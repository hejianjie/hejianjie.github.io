<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java集合</title>
    <link href="/2021/07/27/Java%E9%9B%86%E5%90%88/"/>
    <url>/2021/07/27/Java%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="Java集合框架"><a href="#Java集合框架" class="headerlink" title="Java集合框架"></a>Java集合框架</h1><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210727171333.gif" alt="img"></p><p>Java 中的集合框架可以划分为两类：</p><ul><li><p>集合 Collection：用来存储<strong>同一类型的数据</strong>，Collection 的子接口又分为 List、Set、Queue 三种；</p><p>List：ArrayList、LinkedList、Vector、Stack；</p><p>Set：HashSet、LinkedHashSet、TreeSet；</p><p>Queue：PriorityQueue、ArrayDeque。</p></li><li><p>映射 Map：用来存储<strong>键值对数据</strong>。</p><p>Map：HashMap、LinkedHashMap、TreeMap、Hashtable(没遵守驼峰命名)</p></li></ul><p>Collection有一个重要的方法：<code>iterator()</code>，返回一个Iterator（迭代器），用于遍历集合的所有元素。Iterator模式可以把访问逻辑从不同的集合类中抽象出来，从而避免向客户端暴露集合的内部结构。典型的用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator it = collection.iterator(); <span class="hljs-comment">// 获得一个迭代器</span><br><span class="hljs-keyword">while</span>(it.hasNext()) &#123;<br>    Object obj = it.next(); <span class="hljs-comment">// 得到下一个元素</span><br>&#125;<br></code></pre></td></tr></table></figure><p>不需要维护遍历集合的”指针’’，所有的内部状态都由Iterator来维护，而这个Iterator由集合类通过工厂方法生成。</p><p>每一种集合类返回的Iterator具体类型可能不同，但它们都实现了Iterator接口，因此，我们不需要关心到底是哪种Iterator，它只需要获得这个Iterator接口即可。</p><p>要确保遍历过程顺利完成，必须保证遍历过程中不更改集合的内容（Iterator的<code>remove()</code>方法除外），所以，确保遍历可靠的原则是：只在一个线程中使用这个集合，或者在多线程中对遍历代码进行同步。</p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>List表达一个有序的集合，List中的每个元素都有索引，使用此接口能够准确的控制每个元素插入的位置。用户也能够使用索引来访问List中的元素。</p><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList的底层数据结构是一个数组，查询通过数组下标查询，查询速度快，增删慢。允许所有元素，包括null。是非同步的（unsynchronized）。</p><p>ArrayList在实例化时，有参则按参数确定创建数组大小，无参则创建空数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//无参构造</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>&#125;<br> <br><span class="hljs-comment">//有参构造：</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (initialCapacity &gt;<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">this</span>.elementData =<span class="hljs-keyword">new</span> Object[initialCapacity];<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (initialCapacity ==<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">this</span>.elementData = EMPTY_ELEMENTDATA;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                           initialCapacity);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ArrayList在添加元素时，当长度不足触发扩容时，若数组为空则给一个默认为10的容量，若不为空则将数组的容量扩大1.5倍的容量。</p><hr><blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3></blockquote><blockquote><h4 id="ArrayList的扩容机制？"><a href="#ArrayList的扩容机制？" class="headerlink" title="ArrayList的扩容机制？"></a>ArrayList的扩容机制？</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br><span class="hljs-comment">//扩容</span><br>ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>elementData[size++] = e;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ArrayList使用<code>add()</code>方法进行扩容，<code>add()</code>方法会先处理长度，再将元素添加到数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculateCapacity</span><span class="hljs-params">(Object[] elementData, <span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<br><span class="hljs-keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<br>&#125;<br><span class="hljs-keyword">return</span> minCapacity;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br>modCount++;<br><span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>grow(minCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><p>在处理数组长度时，<code>calculateCapacity()</code>方法判断数组是否为空，若为空直接给一个默认值为10的容量，<code>ensureExplicitCapacity()</code>方法是否需要扩容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">grow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br><span class="hljs-keyword">int</span> oldCapacity = elementData.length;<br><span class="hljs-keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>newCapacity = minCapacity;<br><span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>newCapacity = hugeCapacity(minCapacity);<br>elementData = Arrays.copyOf(elementData, newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><p>若确定扩容，则使用<code>grow()</code>方法进行扩容，首先获取到ArrayList中elementData数组的内存空间长度，再通过右移运算<code>oldCapacity &gt;&gt; 1</code>得到原长度的一半，再加上原长度，也即<strong>每次扩容是原来的1.5倍</strong>。</p><p>扩容后再判断新数组的容量是否足够，足够则完成扩容，否则就将数组长度设置为需要的长度，并检查是否大于默认的最大值出现溢出。</p><p>完成容量处理后调用<code>Arrays.copyOf()</code>方法将elementData数组指向新的内存空间为newCapacity的连续空间， 并将elementData的数据复制到新的内存空间。</p><hr><h4 id="为什么说ArrayList是线程不安全的？"><a href="#为什么说ArrayList是线程不安全的？" class="headerlink" title="为什么说ArrayList是线程不安全的？"></a>为什么说ArrayList是线程不安全的？</h4><p>ArrayList 不是线程安全的。 线程不安全的两种体现：数组越界异常 <code>ArrayIndexOutOfBoundsException</code>、元素值覆盖和为空问题。</p><p><strong>数组越界异常</strong> </p><p>由于ArrayList添加元素是分先判断elementData数组容量是否满足需求，再在elementData对应位置上设置元素的值两步进行，可以看出一个不安全的隐患，<strong>在多个线程进行add操作时可能会导致elementData数组越界</strong>。</p><p>具体逻辑如下：</p><ol><li>列表大小为9，即size=9</li><li>线程A开始进入add方法，这时它获取到size的值为9，调用ensureCapacityInternal方法进行容量判断。</li><li>线程B此时也进入add方法，它获取到size的值也为9，也开始调用ensureCapacityInternal方法。</li><li>线程A发现需求大小为10，而elementData的大小就为10，可以容纳。于是它不再扩容，返回。</li><li>线程B也发现需求大小为10，也可以容纳，返回。</li><li>线程A开始进行设置值操作， elementData[size++] = e 操作。此时size变为10。</li><li>线程B也开始进行设置值操作，它尝试设置elementData[10] = e，而elementData没有进行过扩容，它的下标最大为9。于是此时会报出一个数组越界的异常ArrayIndexOutOfBoundsException。</li></ol><p><strong>元素值覆盖和为空问题</strong></p><p><code>elementData[size++] = e</code> 设置值的操作同样会导致线程不安全。从这儿可以看出，这步操作也不是一个原子操作，它由如下两步操作构成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">elementData[size] = e;<br>size = size + <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>当在多线程环境下执行时，可能就会发生一个线程的值覆盖另一个线程添加的值，具体逻辑如下：</p><ol><li>列表大小为0，即size=0</li><li>线程A开始添加一个元素，值为A。此时它执行第一条操作，将A放在了elementData下标为0的位置上。</li><li>接着线程B刚好也要开始添加一个值为B的元素，且走到了第一步操作。此时线程B获取到size的值依然为0，于是它将B也放在了elementData下标为0的位置上。</li><li>线程A开始将size的值增加为1</li><li>线程B开始将size的值增加为2</li></ol><p>这样线程AB执行完毕后，理想中情况为size为2，elementData下标0的位置为A，下标1的位置为B。而实际情况变成了size为2，elementData下标为0的位置变成了B，下标1的位置上什么都没有。并且后续除非使用set方法修改此位置的值，否则将一直为null，因为size为2，添加元素时会从下标为2的位置上开始。</p><hr><h4 id="如何对ArrayList线程安全处理？"><a href="#如何对ArrayList线程安全处理？" class="headerlink" title="如何对ArrayList线程安全处理？"></a>如何对ArrayList线程安全处理？</h4><ul><li> <strong>Collections.synchronizedList</strong></li></ul><p>  最常用的方法是<strong>通过 Collections 的 synchronizedList 方法</strong>将 ArrayList 转换成线程安全的容器后再使用。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Object&gt; list =Collections.synchronizedList(<span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;);<br></code></pre></td></tr></table></figure><ul><li><p><strong>为list.add()方法加锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(list.get()) &#123;<br>    list.get().add(model);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>CopyOnWriteArrayList</strong></p><p>使用线程安全的 CopyOnWriteArrayList 代替线程不安全的 ArrayList。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Object&gt; list1 = <span class="hljs-keyword">new</span> CopyOnWriteArrayList&lt;Object&gt;();<br></code></pre></td></tr></table></figure></li><li><p><strong>使用ThreadLocal</strong></p><p>使用ThreadLocal变量确保线程封闭性(封闭线程往往是比较安全的， 但由于使用ThreadLocal封装变量，相当于把变量丢进执行线程中去，每new一个新的线程，变量也会new一次，一定程度上会造成性能[内存]损耗，但其执行完毕就销毁的机制使得ThreadLocal变成比较优化的并发解决方案)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ThreadLocal&lt;List&lt;Object&gt;&gt; threadList = <span class="hljs-keyword">new</span> ThreadLocal&lt;List&lt;Object&gt;&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> List&lt;Object&gt; <span class="hljs-title">initialValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></blockquote><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>LinkedList由双链表实现，增删只需要修改链表节点指针，对元素的插入和删除效率较高。LinkedList没有同步方法。 jdk1.6使用的是一个带有 <code>header</code>节头结点的双向循环链表， 头结点不存储实际数据 ，在1.6之后，就变更使用两个节点<code>first</code>、<code>last</code>指向首尾节点。</p><p>LinkedList提供额外的get，remove，insert方法在LinkedList的首部或尾部。这些操作使LinkedList可被用作堆栈（stack），队列（queue）或双向队列（deque）。</p><hr><blockquote><h4 id="LinkedList中offer-与add-的区别是什么？"><a href="#LinkedList中offer-与add-的区别是什么？" class="headerlink" title="LinkedList中offer()与add()的区别是什么？"></a>LinkedList中<code>offer()</code>与<code>add()</code>的区别是什么？</h4><p>offer属于 <code>offer in interface Deque&lt;E&gt;</code>，add 属于 <code>add in interface Collection&lt;E&gt;</code>。  </p><p>当队列为空时候，使用add方法会报错，而offer方法会返回false。</p><ul><li>作为List使用时，一般采用add / get方法来 压入/获取对象。</li><li>作为Queue使用时，才会采用 offer / poll / take等方法。</li><li>作为链表对象时，offer等方法相对来说没有什么意义，这些方法是用于支持队列应用的。</li></ul><hr></blockquote><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>Vector的底层数据结构也是一个数组，查询速度快。它的方法上加了synchronized关键字，所以它是线程安全的，但也因此，它的效率很低，几乎已经被淘汰了。</p><h1 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h1><h3 id="为什么Java-Vector（和Stack）类被认为已过时或已弃用？Stack作为Vector的一个子类，应该用什么代替呢？"><a href="#为什么Java-Vector（和Stack）类被认为已过时或已弃用？Stack作为Vector的一个子类，应该用什么代替呢？" class="headerlink" title="为什么Java Vector（和Stack）类被认为已过时或已弃用？Stack作为Vector的一个子类，应该用什么代替呢？"></a>为什么Java Vector（和Stack）类被认为已过时或已弃用？Stack作为Vector的一个子类，应该用什么代替呢？</h3><h3 id="Arrays-asList-返回的list不能用add方法。"><a href="#Arrays-asList-返回的list不能用add方法。" class="headerlink" title="Arrays.asList()返回的list不能用add方法。"></a>Arrays.asList()返回的list不能用add方法。</h3><h2 id="modCount在非线程安全集合中的作用？"><a href="#modCount在非线程安全集合中的作用？" class="headerlink" title="modCount在非线程安全集合中的作用？"></a><code>modCount</code>在非线程安全集合中的作用？</h2><p><code>modCount</code>属性代表为结构性修改（ 改变list的size大小、以其他方式改变他导致正在进行迭代时出现错误的结果）的次数，该属性被<code>Iterato</code>r以及<code>ListIterator</code>的实现类所使用，且很多非线程安全使用<code>modCount</code>属性。</p><p>初始化迭代器时会给这个modCount赋值，如果在遍历的过程中，一旦发现这个对象的modCount和迭代器存储的modCount不一样，<code>Iterator</code>或者<code>ListIterator</code> 将抛出<code>ConcurrentModificationException</code>异常，</p><p>这是jdk在面对迭代遍历的时候为了避免不确定性而采取的 fail-fast（快速失败）原则：</p><p>在线程不安全的集合中，如果使用迭代器的过程中，发现集合被修改，会抛出<code>ConcurrentModificationExceptions</code>错误，这就是fail-fast机制。对集合进行结构性修改时，<code>modCount</code>都会增加，在初始化迭代器时，<code>modCount</code>的值会赋给<code>expectedModCount</code>，在迭代的过程中，只要<code>modCount</code>改变了，<code>int expectedModCount = modCount</code>等式就不成立了，迭代器检测到这一点，就会抛出错误：<code>urrentModificationExceptions</code>。</p><h3 id="使用for循环遍历效率高还是foreach（增强式循环）？"><a href="#使用for循环遍历效率高还是foreach（增强式循环）？" class="headerlink" title="使用for循环遍历效率高还是foreach（增强式循环）？"></a>使用for循环遍历效率高还是foreach（增强式循环）？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; integers.length; i++) &#123;<br>    System.out.println(intergers[i]);<br>&#125;<br><br><span class="hljs-keyword">for</span>(Integer in : integers)&#123;<br>    System.out.println(in);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>for适合循环ArrayLIst以及数组，当大批量的循环LinkedList时程序将会卡死，它适合循环数组结构，通过下标去遍历。</p></li><li><p>foreach适合循环LinkedList，使用双链表结构实现的应当使用foreach循环。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github建立图床</title>
    <link href="/2021/07/27/Github%E5%BB%BA%E7%AB%8B%E5%9B%BE%E5%BA%8A/"/>
    <url>/2021/07/27/Github%E5%BB%BA%E7%AB%8B%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用markdown写文章嵌入图片会导入图片路径，在线上无法读取到本地的图片，因此需要建立图床来解决这个问题。</p><p>个人采用开源<strong>PicGO</strong>结合<strong>jsDelivr</strong>的免费cdn基于Github仓库搭建免费的图床。</p><h2 id="下载PicGo"><a href="#下载PicGo" class="headerlink" title="下载PicGo"></a>下载PicGo</h2><p><a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>是一款用 <code>Electron-vue</code> 开发的软件，可以支持微博，七牛云，腾讯云COS，又拍云，GitHub，阿里云OSS，SM.MS，imgur 等8种常用图床，功能强大，简单易用。</p><h2 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a>配置GitHub</h2><p>首先需要建立一个图片仓库，名称随意，后续配置的时候名称保持一致即可。</p><p>新建 Personal access tokens， 名称自定义，自己用的话全部钩上。（其实权限只要 repo 即可）。</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210727144339.png" alt="img"></p><h2 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h2><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210727145441.PNG" alt="配置信息"></p><p><strong>仓库名称：</strong> <code>&lt;用户名&gt;/&lt;preject&gt;</code><br><strong>分支：</strong> <code>master</code><br><strong>token：</strong> 生成的 <code>Personal access tokens</code><br><strong>指定存储路径：</strong> <code>images/</code>  </p><blockquote><p>PicGo上传文件时，将自动在Github仓库中创建此文件夹。注意末尾要加 <strong>/</strong></p></blockquote><p><strong>自定义域名：</strong> <code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code></p><blockquote><p>如果设置了自定义域名，PicGo生成的访问链接，将是 <code>自定义域名+文件名</code> 的访问方式，这里使用 jsDelivr 加速访问。</p></blockquote><p>PicGO其他配置内容可以参照<a href="https://picgo.github.io/PicGo-Doc/zh/guide/">官方文档</a></p><h2 id="Typora的配置"><a href="#Typora的配置" class="headerlink" title="Typora的配置"></a>Typora的配置</h2><p>进入typra偏好设置-图像选项，如图配置PicGo路径即可。</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210727150312.png" alt="image-20210727150254524"></p><blockquote><p>参考：<a href="https://www.jianshu.com/p/3a62fc203d01">https://www.jianshu.com/p/3a62fc203d01</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>图床</category>
      
    </categories>
    
    
    <tags>
      
      <tag>method</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象的基本原则</title>
    <link href="/2021/07/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BA%94%E4%B8%AA%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/"/>
    <url>/2021/07/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BA%94%E4%B8%AA%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象的基本原则"><a href="#面向对象的基本原则" class="headerlink" title="面向对象的基本原则"></a>面向对象的基本原则</h1><p>在程序设计领域，<strong>SOLID</strong>（<strong>单一功能、开闭原则、里氏替换、接口隔离</strong>以及<strong>依赖反转</strong>）指代了<strong>面向对象编程</strong>和<strong>面向对象设计</strong>的五个基本原则。</p><blockquote><p>SOLID原则仅仅具备指导意义，不能不考虑需求环境生硬遵循，需要结合具体场景。</p></blockquote><blockquote><p>通常当一段代码破坏了一个SOLID原则时，它会打破一大堆。</p></blockquote><h2 id="单一职责原则SRP-Single-Responsibility-Principle"><a href="#单一职责原则SRP-Single-Responsibility-Principle" class="headerlink" title="单一职责原则SRP(Single Responsibility Principle)"></a>单一职责原则SRP(Single Responsibility Principle)</h2><p><strong>一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。</strong></p><p>从定义中可以看出在定义类的时候要将职责划分清楚， 不能让一个类负责干多个事情。换句话说就是一个类只有一个引起它变化的点。如果一个类负责干多个事情那么就会有多个引起它变化的原因。那么这个类就不稳定了，这个类就容易变化，因为如果干的事情越少变化的诱因就愈少，如果干的事情越多变化的诱因就愈多。</p><p>关于单一职责原则，<strong>重点是职责的划分！</strong>职责划分的粒度取决于需求的粒度，并不是在设计类或者函数一定要做到单一职责，这样也会带来类的数量会增多，代码复杂度提高。对成本和效率都会产生影响。</p><h2 id="开放封闭原则OCP-Open－Close-Principle"><a href="#开放封闭原则OCP-Open－Close-Principle" class="headerlink" title="开放封闭原则OCP(Open－Close Principle)"></a>开放封闭原则OCP(Open－Close Principle)</h2><p><strong>软件实体（如类、模块、函数等）应该对扩展开放，对修改封闭。</strong></p><p>需要注意对未发生的变化进行预设很容易踏入过渡设计的陷阱，而一旦需求开始发生变化，那它很可能会以相似的方式一变再变。此时就应该在代码循环开放封闭原则上多下功夫。</p><p>开放封闭原则是相对的，没有完全完美的开放。</p><blockquote><p>开放封闭原则是编写一个好程序的目标，其他设计原则都是达到这个目标的过程。</p><p>里氏替换原则<strong>基于抽象去编程，而不要基于具体。这样也就可以实现：对扩展（基于抽象）是开放的，对变更（基于具体）是禁止的。</strong></p></blockquote><h2 id="里氏替换原则-the-Liskov-Substitution-Principle-LSP"><a href="#里氏替换原则-the-Liskov-Substitution-Principle-LSP" class="headerlink" title="里氏替换原则(the Liskov Substitution Principle LSP)"></a>里氏替换原则(the Liskov Substitution Principle LSP)</h2><p><strong>子类应当可以替换父类并出现在父类能够出现的任何地方。</strong></p><p>里氏替换原则通俗的来讲就是：<strong>子类可以扩展父类的功能，但不能改变父类原有的功能。</strong></p><p>里氏替换原则有至少以下两种含义：</p><ul><li><p>里氏替换原则是针对继承而言的，如果继承是为了实现代码重用，也就是为了共享方法，那么共享的父类方法就应该保持不变，不能被子类重新定义。</p><p>子类只能通过新添加方法来扩展功能，父类和子类都可以实例化，而子类继承的方法和父类是一样的，父类调用方法的地方，子类也可以调用同一个继承得来的，逻辑和父类一致的方法，这时用子类对象将父类对象替换掉时，当然逻辑一致，相安无事。</p></li><li><p>如果继承的目的是为了多态，而多态的前提就是子类覆盖并重新定义父类的方法，为了符合LSP，我们应该将父类定义为抽象类，并定义抽象方法，让子类重新定义这些方法，当父类是抽象类时，父类就是不能实例化，所以也不存在可实例化的父类对象在程序里。也就不存在子类替换父类实例（根本不存在父类实例了）时逻辑不一致的可能。</p></li></ul><h3 id="多态与里氏替换原则"><a href="#多态与里氏替换原则" class="headerlink" title="多态与里氏替换原则"></a>多态与里氏替换原则</h3><p>里氏替换原则要求<strong>特殊性不可违背普遍性</strong>，这个违背是指<strong>子类修改父类</strong>。而<strong>多态是指子类本身就父类中的普遍性进行特殊化的继承，实际上并未修改父类</strong>。所以，两者不冲突，是一种补充关系。多态使得父类的普遍性能够在子类中进行特殊化继承。里氏代换原则要求继承关系必须符合普遍性与特殊性的规律。</p><blockquote><p>不符合 LSP 的最常见的情况是，父类和子类都是可实例化的非抽象类，且父类的方法被子类重新定义，这一类的实现继承会造成父类和子类间的强耦合，也就是实际上并不相关的属性和方法牵强附会在一起，不利于程序扩展和维护。</p><p><strong>符合 LSP 的方法：尽量不要从可实例化的父类中继承，而是要使用基于抽象类和接口的继承。</strong></p></blockquote><blockquote><p><strong>基于抽象去编程，而不要基于具体。这样也就可以实现：对扩展（基于抽象）是开放的，对变更（基于具体）是禁止的。</strong></p></blockquote><h2 id="接口分离原则-the-Interface-Segregation-Principle-ISP"><a href="#接口分离原则-the-Interface-Segregation-Principle-ISP" class="headerlink" title="接口分离原则(the Interface Segregation Principle ISP)"></a>接口分离原则(the Interface Segregation Principle ISP)</h2><p><strong>使用多个专门的接口比使用单一的总接口要好。不应该强行要求客户端依赖于它们不用的接口（接口属于客户，不属于它所在的类层次结构）。类之间的依赖应该建立在最小的接口上面。</strong></p><h4 id="接口隔离原则和单一职责原则"><a href="#接口隔离原则和单一职责原则" class="headerlink" title="接口隔离原则和单一职责原则"></a>接口隔离原则和单一职责原则</h4><p>从功能上来看，接口隔离和单一职责两个原则具有一定的相似性。</p><p>它们的区别在于观察角度或是侧重点不一样。单一职责是从模块、类或方法自身的角度来看的，接口隔离原则是从调用者的角度来看的。</p><blockquote><p>举个例子，有个聚合服务，为APP提供了一组相同标准的接口，但它们的功能不同，有些和商品相关，有些和用户相关，有些和订单相关。这看起来既不符合接口隔离原则，也不符合接口单一职责原则。其实，从APP的角度来看，这组接口是一个整体，多一个不行，缺一个不可，所以它是符合接口隔离原则的。从更粗粒度的服务层面来看，这个聚合服务本身只为APP服务，这也符合单一职责。</p></blockquote><h2 id="依赖倒置原则-the-Dependency-Inversion-Principle-DIP"><a href="#依赖倒置原则-the-Dependency-Inversion-Principle-DIP" class="headerlink" title="依赖倒置原则(the Dependency Inversion Principle DIP)"></a>依赖倒置原则(the Dependency Inversion Principle DIP)</h2><p><strong>上层模块不应该依赖下层模块，它们都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</strong></p><p>这个原则听起来很像是“针对接口编程，不针对现实编程”，但更强调“抽象”。</p><h4 id="在依赖倒置原则中的倒置指的是和一般OO设计的思考方式完全相反。"><a href="#在依赖倒置原则中的倒置指的是和一般OO设计的思考方式完全相反。" class="headerlink" title="在依赖倒置原则中的倒置指的是和一般OO设计的思考方式完全相反。"></a><strong>在依赖倒置原则中的倒置指的是和一般OO设计的思考方式完全相反。</strong></h4><p>举个例子，现在你需要实现一个比萨店，你第一件想到的事情是什么？我想到的是一个比萨店，里面有很多具体的比萨，如：芝士比萨、素食比萨、海鲜比萨……<br><strong>比萨店是上层模块，比萨是下层模块</strong>，如果把比萨店和它依赖的对象画成一张图，看起来是这样：</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210726201203.png" alt="正常依赖-上层依赖下层"></p><p>上图可以看出，先从顶端开始，然后往下到具体类，比萨店全都依赖这些具体类。</p><p>现在<strong>将依赖关系倒置</strong>，不从上层模块发散，而是从下层模块开始尝试进行抽象化。</p><p>显然，芝士比萨、素食比萨、海鲜比萨都是比萨，所以它们应该共享一个Pizza接口。抽象完成后回头重新思考如何设计比萨店。于是得到如下的依赖关系：</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210726201600.png" alt="依赖倒置-上层下层均依赖抽象"></p><p>从两图的对比可以看出，依赖由最初的<strong>上层依赖下层</strong>，转变为<strong>二者依赖于抽象</strong>，在依赖关系上确实发生了<strong>倒置</strong>。</p><blockquote><p>参考：<a href="https://www.jianshu.com/p/c3ce6762257c">六大设计原则之依赖倒置原则（DIP）</a></p></blockquote><hr><h2 id="迪米特法则-Law-of-Demeter-LoD"><a href="#迪米特法则-Law-of-Demeter-LoD" class="headerlink" title="迪米特法则(Law of Demeter, LoD)"></a>迪米特法则(Law of Demeter, LoD)</h2><p><strong>一个对象应该对其他对象有最少的了解</strong>，所以迪米特法则又叫做最少知识原则（Least Knowledge Principle, LKP）。</p><p><strong>迪米特法则的意义在于降低类之间的耦合</strong>。由于每个对象尽量减少对其他对象的了解，因此，很容易使得系统的功能模块功能独立，相互之间不存在（或很少有）依赖关系。</p><p>迪米特法则还有一个英文解释是：<strong>talk only to your immediate friends（只和直接的朋友交流）</strong>。什么是朋友呢？每个对象都必然会与其他的对象有耦合关系，两个对象之间的耦合就会成为朋友关系。那么什么又是直接的朋友呢？<strong>出现在成员变量、方法的输入输出参数中的类就是直接的朋友</strong>。迪米特法则要求只和直接的朋友通信。</p><blockquote><p>只出现在方法体内部的类就不是直接的朋友，如果一个类和不是直接的朋友进行交流，就属于违反迪米特法则。</p></blockquote><hr><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><p>solid原则包括迪米特法则具备指导意义的程序设计原则，个人认为所有的原则中最核心的就是开放封闭原则，其他设计原则都是达到这个目标的过程。单一职能原则、接口分离原则包括迪米特法则都是为了实现高内聚、低耦合，如此就确定了职能划分清晰的不修改部分，实现<strong>对修改封闭</strong>；另一方面，里氏替换原则与依赖倒置原则都是对抽象的约束与规范，指明程序应基于抽象而非具体，实现<strong>对扩展开放</strong>。通过以上两方面的规范，最终达到开放封闭原则要求的<strong>对扩展开放，对修改封闭</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>面向对象</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象三大特性</title>
    <link href="/2021/07/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/"/>
    <url>/2021/07/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象三大特性"><a href="#面向对象三大特性" class="headerlink" title="面向对象三大特性"></a>面向对象三大特性</h1><h2 id="封装-Encapsulation"><a href="#封装-Encapsulation" class="headerlink" title="封装(Encapsulation)"></a>封装(Encapsulation)</h2><p>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问。因此在编写类时一般将成员变量私有化，外部类需要同getter和setter方法来查看和设置变量。</p><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><table><thead><tr><th>作用域，可见性</th><th>当前类</th><th>同一包</th><th>子类</th><th>其他包</th></tr></thead><tbody><tr><td>private</td><td>✔</td><td></td><td></td><td></td></tr><tr><td>default</td><td>✔</td><td>✔</td><td></td><td></td></tr><tr><td>protected</td><td>✔</td><td>✔</td><td>✔</td><td></td></tr><tr><td>public</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr></tbody></table><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>this关键字在类的方法定义中使用时代表<strong>当前对象的引用</strong>，this常用于处理函数参数名与成员变量重名的情况。</p><p>this可以看作一个变量，它的值指向当前对象的引用。</p><h3 id="内部类-Inner-Class"><a href="#内部类-Inner-Class" class="headerlink" title="内部类( Inner Class)"></a>内部类( Inner Class)</h3><p>内部类就是定义在另一个类中的类。与之对应，包含内部类的类被称为外部类。</p><p>内部类的作用：</p><ul><li><p>提供更好的封装，可以将内部类隐藏在外部类中，<strong>不允许同一包下的其他类访问</strong>；</p></li><li><p>完善了Java多继承机制，由于每一个内部类都可以独立的继承接口或类，所以无论外部类是否继承或实现了某个类或接口，对于内部类没有影响，如此一来可以间接实现多继承。</p></li><li><p>使用匿名内部类实现回调功能，在java中通常就是编写一个接口并实现这个接口，然后将这个接口的一个对象作以参数的形式传到另一个程序方法中， 然后通过接口调用方法，匿名内部类就可以很好的展现了这一种回调功能。</p></li><li><p>解决继承及实现接口出现同名方法的问题</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MyDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Demo</span> </span>&#123;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>如果接口与继承类中的方法同名则会难以区分，但如果使用内部类来实现接口就能很好区分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MyDemo</span> </span>&#123;<br>      <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">inner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Demo</span> </span>&#123;<br>          <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>              System.out.println(<span class="hljs-string">&quot;接口的test方法&quot;</span>);<br>          &#125;<br>      &#125;<br>      <br>      <span class="hljs-function"><span class="hljs-keyword">public</span> Demo <span class="hljs-title">getIn</span><span class="hljs-params">()</span> </span>&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> inner();<br>      &#125;<br>      <br>      <br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>          <span class="hljs-comment">//调用接口而来的test()方法</span><br>          DemoTest dt = <span class="hljs-keyword">new</span> DemoTest();<br>          Demo d = dt.getIn();<br>          d.test();<br>          <br>          <span class="hljs-comment">//调用继承而来的test()方法</span><br>          dt.test();<br>      &#125;<br>  &#125;<br>  <br>  <span class="hljs-comment">//运行结果</span><br>  接口的test方法<br>  父类的test方法<br></code></pre></td></tr></table></figure></blockquote></li></ul><p>内部类可以分为四种:<strong>成员内部类、局部内部类、匿名内部类、静态内部类</strong>。</p><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span></span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成员内部类就是位于外部类成员位置的类。成员内部类可以无条件访问外部类的属性和方法，包括<strong>私有数据</strong>；</p><blockquote><p>如果成员内部类的属性或者方法与外部类的同名，将导致外部类的这些属性与方法在内部类被隐藏，也可按照该格式调用<code>外部类.this.属性/方法</code>。</p></blockquote><p>成员内部类是寄生于外部类，创建内部类对象就必须先创造外部类对象。之后创建内部类有两种方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*方式1创建成员内部类对象*/</span><br>C c = <span class="hljs-keyword">new</span> C();<br>C.D d = c.<span class="hljs-function">new <span class="hljs-title">D</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">/*方式2创建成员内部类对象*/</span><br>C.D d1 = c.getClassD();<br></code></pre></td></tr></table></figure><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><p>局部内部类就是定义在一个方法或者一个作用域里面的类。</p><p>它和成员内部类的区别在于局部内部类的访问权限仅限于方法或作用域内。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">K</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">J</span></span>&#123;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>局部内部类就像局部变量一样，<strong>前面不能加访问修饰符以及static修饰符</strong>。</p></blockquote><p><strong>局部内部类访问局部变量必须加final修饰</strong>：因为<strong>局部变量是随着方法的调用而调用</strong>，<strong>使用完毕就消失</strong>，<strong>而堆内存的数据并不会立即消失</strong>。所以，堆内存还是用该变量，而该变量已经没有了。<strong>为了让该值还存在，就加final修饰。</strong>原因是，当我们使用final修饰变量后，堆内存直接存储的<strong>是值</strong>，而<strong>不是变量名</strong>。</p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p><strong>static是不能用来修饰类的</strong>,但是成员内部类可以看做外部类中的一个成员,所以可以用static修饰,这种<strong>用static修饰的内部类我们称作静态内部类</strong>,也称作嵌套内部类。</p><p>​    静态内部类不能使用外部类的非static成员变量和成员方法。</p><blockquote><p>非静态内部类编译后会默认的保存一个指向外部类的引用，而静态类却没有。即使没有外部类对象，也可以创建静态内部类对象，而外部类的非static成员必须依赖于对象的调用，静态成员则可以直接使用类调用，不必依赖于外部类的对象，所以静态内部类只能访问静态的外部属性和方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outter</span> </span>&#123;<br>      <span class="hljs-keyword">int</span> age = <span class="hljs-number">10</span>;<br>      <span class="hljs-keyword">static</span> age2 = <span class="hljs-number">20</span>;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Outter</span><span class="hljs-params">()</span> </span>&#123;        <br>      &#125;<br>       <br>      <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> </span>&#123;<br>          <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> </span>&#123;<br>              System.out.println(age);<span class="hljs-comment">//错误</span><br>              System.out.println(age2);<span class="hljs-comment">//正确</span><br>          &#125;<br>      &#125;<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span>  </span>&#123;<br>          Outter.Inner inner = <span class="hljs-keyword">new</span> Outter.Inner();<br>          inner.method();<br>      &#125;<br>  &#125;<br><br></code></pre></td></tr></table></figure><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>一个没有名字的类，是内部类的简化写法。</p><p>匿名内部类的本质其实是继承该类或者实现接口的子类匿名对象。此外，在开发的时候，会看到抽象类，或者接口作为参数。而这个时候，实际需要的是一个子类对象。如果该方法仅仅调用一次，我们就可以使用匿名内部类的格式简化。</p><blockquote><p>匿名内部类没有构造方法。也是唯一没有构造方法的内部类。<strong>匿名内部类和局部内部类一样只能访问外部类的final变量。</strong></p></blockquote><h2 id="继承-Inherit"><a href="#继承-Inherit" class="headerlink" title="继承(Inherit)"></a>继承(Inherit)</h2><p>继承实际上也是为了<strong>提高代码的复用性和可扩展性</strong>，在定义不同类的时候存在一些相同属性，为了方便使用可以将这些共同属性抽象成一个父类，在定义其他子类时可以继承自该父类，减少代码的重复定义，子类可以使用父类中<strong>非私有</strong>的成员。</p><blockquote><p>java中的继承是<strong>单继承</strong>，即<strong>一个类只有一个父类。</strong></p></blockquote><h3 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h3><p>方法重载：在同一个类中处理不同数据的多个相同方法名的多态手段。</p><p>方法重写：相对继承而言，子类中对父类已经存在的方法进行区别化的修改。</p><blockquote><p>重写需要保证方法的返回值类型、方法名、参数类型及个数都要与父类继承的方法相同</p></blockquote><h3 id="继承的初始化顺序"><a href="#继承的初始化顺序" class="headerlink" title="继承的初始化顺序"></a>继承的初始化顺序</h3><p>　1、初始化父类再初始化子类</p><p>　2、先执行初始化对象中的属性，再执行构造方法中的初始化。</p><p>　基于上面两点，可以知道实例化一个子类，java程序的执行顺序是：</p><p>　<strong>父类对象属性初始化 → 父类对象构造方法 → 子类对象属性初始化 → 子类对象构造方法</strong>　　　</p><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>使用final关键字做标识有“最终的”含义。</p><table><thead><tr><th>final修饰对象</th><th align="left">作用</th></tr></thead><tbody><tr><td>类</td><td align="left">该类不允许被继承</td></tr><tr><td>方法</td><td align="left">该方法不允许被覆盖(重写)。</td></tr><tr><td>属性</td><td align="left">该类的该属性不会进行隐式的初始化，即 该final 属性的初始化属性必须有值，或在构造方法中赋值(但只能选其一，且必须选其一，因为没有默认值！)，且初始化之后就不能改了，只能赋值一次。</td></tr><tr><td>变量</td><td align="left">该变量的值只能赋一次值，在声明变量的时候才能赋值，即变为常量。</td></tr></tbody></table><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p>siper可以理解为是指向自己父（超）类对象的一个指针，而这个父类指的是离自己最近的一个父类。</p><p>super用来访问父类内容，当子类中的成员变量或方法与父类中同名时可用super用于区分。</p><p>super关键字在子类里调用父类的构造方法，则必须在子类的构造方法中的<strong>第一行</strong>。<strong>如果子类构造方法中既没有显示调用父类的构造方法，而父类没有无参的构造方法，则编译出错。</strong>（如果没有显示声明父类的无参的构造方法，系统会自动默认生成一个无参构造方法，但是，如果声明了一个有参的构造方法，而没有声明无参的构造方法，这时系统不会动默认生成一个无参构造方法，此时称为父类没有无参的构造方法。）</p><blockquote><p>子类的构造的过程当中必须调用父类的构造方法。其实这个过程已经隐式地使用了super关键字。</p></blockquote><h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><p>Object类是所有类的父类，如果一个类没有使用extends关键字明确标识继承另一个类，那么这个类默认继承Object类。</p><p><strong>Object类中的方法，适合所有子类。</strong></p><ol><li><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><p>在Object类里面定义toString()方法的时候返回的对象的哈希code码(对象地址字符串)。</p><p>toString()在碰到“println”之类的输出方法时会自动调用，不用显式打出来。</p><p><strong>undefined和null没有toString()方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">undefined.toString();<span class="hljs-comment">//错误</span><br><span class="hljs-keyword">null</span>.toString();<span class="hljs-comment">//错误</span><br></code></pre></td></tr></table></figure><p><strong>布尔型数据true和false返回对应的’true’和’false’</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">true</span>.toString();<span class="hljs-comment">//&#x27;true&#x27;</span><br><span class="hljs-keyword">false</span>.toString();<span class="hljs-comment">//&#x27;false&#x27;</span><br>Boolean.toString();<span class="hljs-comment">//&quot;function Boolean() &#123; [native code] &#125;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>字符串类型原值返回</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&#x27;1&#x27;</span>.toString();<span class="hljs-comment">//&#x27;1&#x27;</span><br><span class="hljs-string">&#x27;&#x27;</span>.toString();<span class="hljs-comment">//&#x27;&#x27;</span><br><span class="hljs-string">&#x27;abc&#x27;</span>.toString();<span class="hljs-comment">//&#x27;abc&#x27;</span><br>String.toString();<span class="hljs-comment">//&quot;function String() &#123; [native code] &#125;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>数值类型的情况较复杂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Number.toString();<span class="hljs-comment">//&quot;function Number() &#123; [native code] &#125;&quot;</span><br></code></pre></td></tr></table></figure><p>　　1、正浮点数及NaN、Infinity加引号返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.23</span>.toString();<span class="hljs-comment">//&#x27;1.23&#x27;</span><br>NaN.toString();<span class="hljs-comment">//&#x27;NaN&#x27;</span><br>Infinity.toString();<span class="hljs-comment">//&#x27;Infinity&#x27;</span><br></code></pre></td></tr></table></figure><p>　　2、负浮点数或加’+’号的正浮点数直接跟上.toString()，相当于先运行toString()方法，再添加正负号，转换为数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">+<span class="hljs-number">1.23</span>.toString();<span class="hljs-comment">//1.23</span><br>typeof +<span class="hljs-number">1.23</span>.toString();<span class="hljs-comment">//&#x27;number&#x27;</span><br>-<span class="hljs-number">1.23</span>.toString();<span class="hljs-comment">//-1.23</span><br>typeof -<span class="hljs-number">1.23</span>.toString();<span class="hljs-comment">//&#x27;number&#x27;</span><br></code></pre></td></tr></table></figure><p>　　3、整数直接跟上.toString()形式，会报错，提示无效标记，因为整数后的点会被识别为小数点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0.</span>toString();<span class="hljs-comment">//Uncaught SyntaxError: Invalid or unexpected token</span><br></code></pre></td></tr></table></figure><p>　　因此，为了避免以上无效及报错的情况，数字在使用toString()方法时，加括号可解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">(<span class="hljs-number">0</span>).toString();<span class="hljs-comment">//&#x27;0&#x27;</span><br>(-<span class="hljs-number">0</span>).toString();<span class="hljs-comment">//&#x27;0&#x27;</span><br>(+<span class="hljs-number">1.2</span>).toString();<span class="hljs-comment">//&#x27;1.2&#x27;</span><br>(-<span class="hljs-number">1.2</span>).toString();<span class="hljs-comment">//&#x27;-1.2&#x27;</span><br>(NaN).toString();<span class="hljs-comment">//&#x27;NaN&#x27;</span><br></code></pre></td></tr></table></figure><p>　　此外，数字类型的toString()方法可以接收表示转换基数(radix)的可选参数，如果不指定此参数，转换规则将是基于十进制。同样，也可以将数字转换为其他进制数(范围在2-36)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">var</span> n = <span class="hljs-number">17</span>;<br>n.toString();<span class="hljs-comment">//&#x27;17&#x27;</span><br>n.toString(<span class="hljs-number">2</span>);<span class="hljs-comment">//&#x27;10001&#x27;</span><br>n.toString(<span class="hljs-number">8</span>);<span class="hljs-comment">//&#x27;21&#x27;</span><br>n.toString(<span class="hljs-number">10</span>);<span class="hljs-comment">//&#x27;17&#x27;</span><br>n.toString(<span class="hljs-number">12</span>);<span class="hljs-comment">//&#x27;15&#x27;</span><br>n.toString(<span class="hljs-number">16</span>);<span class="hljs-comment">//&#x27;11&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>对象Object类型及自定义对象类型加括号返回[object Object]</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;&#125;.toString();<span class="hljs-comment">//报错，Unexpected token .</span><br>(&#123;&#125;).toString();<span class="hljs-comment">//[object Object]</span><br>(&#123;a:<span class="hljs-number">123</span>&#125;).toString();<span class="hljs-comment">//[object Object]</span><br>Object.toString();<span class="hljs-comment">//&quot;function Object() &#123; [native code] &#125;&quot;</span><br><span class="hljs-function">function <span class="hljs-title">Person</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">this</span>.name = <span class="hljs-string">&#x27;test&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person();<br>person1.toString();<span class="hljs-comment">//&quot;[object Object]&quot;</span><br></code></pre></td></tr></table></figure><h4 id="String-StringBuffer和StringBuilder"><a href="#String-StringBuffer和StringBuilder" class="headerlink" title="String ,StringBuffer和StringBuilder"></a>String ,StringBuffer和StringBuilder</h4><table><thead><tr><th></th><th>String</th><th>StringBuffer</th><th>StringBuilder</th></tr></thead><tbody><tr><td>版本</td><td>JDK1.0</td><td>JDK1.0</td><td>JDK1.5</td></tr><tr><td>是否可变</td><td>不可变</td><td>可变</td><td>可变</td></tr><tr><td>线程安全</td><td>线程安全</td><td>线程安全</td><td>线程不安全</td></tr><tr><td>运行速度</td><td>最慢</td><td>快</td><td>最快</td></tr><tr><td>占用内存</td><td>最多</td><td>少</td><td>最少</td></tr></tbody></table><blockquote><p>若希望将StringBuffer在屏幕上显示出来, 则必须首先<strong>调用toString方法把它变成字符串常量</strong>，<strong>因为PrintStream的方法println()不接受StringBuffer类型的参数</strong>。</p></blockquote></li><li><h4 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h4></li></ol><p>返回值是布尔类型，默认的情况下，比较的是对象的<strong>引用</strong>是否指向同一块内存地址（对象实例化时，即给对象分配内存空间，该内存空间的地址就是内存地址）。</p><ul><li><h4 id="equals-与"><a href="#equals-与" class="headerlink" title="equals() 与 =="></a>equals() 与 ==</h4><p><strong>Java 语言里的 equals方法其实是交给开发者去覆写的，让开发者自己去定义满足什么条件的两个Object是equal的。</strong></p><p>Java中默认的 equals方法实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span> == obj);<br>&#125;<br></code></pre></td></tr></table></figure><p>因此默认的equals()与==没有区别。</p><p><strong>String类则覆写了equals()方法,直观的讲就是比较字符是不是都相同，会先比较引用地址，若不同再比较内容。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object anObject)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == anObject) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123;<br>        String anotherString = (String)anObject;<br>        <span class="hljs-keyword">int</span> n = count;<br>        <span class="hljs-keyword">if</span> (n == anotherString.count) &#123;<br>            <span class="hljs-keyword">char</span> v1[] = value;<br>            <span class="hljs-keyword">char</span> v2[] = anotherString.value;<br>            <span class="hljs-keyword">int</span> i = offset;<br>            <span class="hljs-keyword">int</span> j = anotherString.offset;<br>            <span class="hljs-keyword">while</span> (n-- != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (v1[i++] != v2[j++])<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此，不能单纯的<strong>说equals到底比较的是什么。对于一个类的equals方法是什么意思就是要去看该类对此方法的定义</strong>。</p></li><li><h4 id="equals-的重写"><a href="#equals-的重写" class="headerlink" title="equals() 的重写"></a>equals() 的重写</h4><p>很多时候我们使用 equals() 需要比较的是<strong>对象的值，而不是地址</strong>，如果两个对象内存地址相同，那两个对象也一定相同。所以 equals() 重写的 equals() 方法中首先判断的还是<strong>地址</strong>(如 String 类)，如果地址不同才会去判断<strong>值是否相等</strong>。</p><p><strong>重写 equals() 必须重写 hashCode()</strong></p><p>hashCode 方法返回该对象的哈希码值。Object 类中定义的 hashCode 方法为不同的对象返回不同的整形值（通常情况下实现的方式是将对象的内部地址转换为整形值）。</p><blockquote><p>在 OpenJDK 中找到 <a href="https://link.juejin.cn/?target=http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/3462d04401ba/src/share/native/java/lang/Object.c">Object.c</a> 文件，可以看到hashCode 方法指向 <code>JVM_IHashCode</code> 方法来处理。hashCode() 产生于 <a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/runtime/synchronizer.cpp">ObjectSynchronizer::FastHashCode</a>，它具体的实现在 <a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/runtime/synchronizer.cpp">synchronizer.cpp</a> 中的 <code>get_next_hash</code>。从<code>get_next_hash</code>的方法中我们可以看到，如果从0开始算的话，这里提供了<strong>6种计算 hash 值的方案，有自增序列，随机数，关联内存地址等</strong>多种方式，其中<strong>官方默认的是最后一种，即随机数生成</strong>。可以看出 <strong>hashCode 也许和内存地址有关系，但不是直接代表内存地址的，具体需要看虚拟机版本和设置</strong>。</p><p>因此，<strong>hashCode() 返回的并不是实际的内存地址，而是与内存地址相关联的计算结果值。</strong>如果是实际内存地址的话，JVM 中的频繁 GC 和内存移动将会导致对象 hashCode 的改变。</p></blockquote><p>重写 equals() 必须重写 hashCode()，是因为如果不这样做的话，就会<strong>违反 hashCode 的通用约定</strong>，从而<strong>导致该类无法结合所有基于散列的集合一起正常工作</strong>，这类集合包括 HashMap 和 HashSet。</p><p>这里的<strong>通用约定</strong>，从 Object 类的 hashCode 方法的注释可以了解，主要包括以下几个方面，</p><ul><li>在应用程序的执行期间，只要对象的 equals 方法的比较操作所用到的信息没有被修改，那么对同一个对象的多次调用，hashCode 方法都必须始终返回同一个值。</li><li>如果两个对象根据 equals 方法比较是相等的，那么调用这两个对象中的 hashCode 方法都必须产生同样的整数结果。</li><li>如果两个对象根据 equals 方法比较是不相等的，那么调用者两个对象中的 hashCode 方法，则不一定要求 hashCode 方法必须产生不同的结果。但是给不相等的对象产生不同的整数散列值，是有可能提高散列表（hash table）的性能。</li></ul><p>从理论上来说如果重写了 equals 方法而没有重写 hashCode 方法则违背了上述约定的第二条，<strong>相等的对象必须拥有相等的散列值</strong>。</p><blockquote><p>虽然 hashCode 方法被重写了，但是如果我们想要获取原始的 Object 类中的哈希码，我们可以通过 <code>System.identityHashCode(Object a)</code>来获取，该方法返回默认的 Object 的 hashCode 方法值，即使对象的 hashCode 方法被重写了也不影响。</p></blockquote><blockquote><p>参考：<a href="https://juejin.cn/post/6844903910839156743">对Java中HashCode方法的深入思考</a></p></blockquote><blockquote><p>重写equals方法的要求：</p><p>1、自反性：对于任何非空引用x，x.equals(x)应该返回true。</p><p>2、对称性：对于任何引用x和y，如果x.equals(y)返回true，那么y.equals(x)也应该返回true。</p><p>3、传递性：对于任何引用x、y和z，如果x.equals(y)返回true，y.equals(z)返回true，那么x.equals(z)也应该返回true。</p><p>4、一致性：如果x和y引用的对象没有发生变化，那么反复调用x.equals(y)应该返回同样的结果。</p><p>5、非空性：对于任意非空引用x，x.equals(null)应该返回false。</p></blockquote></li></ul><h2 id="多态-Polymorphism"><a href="#多态-Polymorphism" class="headerlink" title="多态(Polymorphism)"></a><strong>多态(Polymorphism)</strong></h2><p>多态就是<strong>相同的行为，不同的实现</strong>。多态是方法的多态，不是属性的多态（多态与属性无关）。</p><p>多态的存在要有3个必要条件：<strong>继承，方法重写，父类引用指向子类对象</strong>。</p><blockquote><p>如果我们在子类中编写一个独有的方法（没有继承父类的方法），此时就不能通过父类的引用创建的子类对象来调用该方法</p></blockquote><h3 id="静态多态与动态多态"><a href="#静态多态与动态多态" class="headerlink" title="静态多态与动态多态"></a>静态多态与动态多态</h3><p>动静之分主要是表现在程序是在运行期还是编译期，通过被绑定的对象类型来决定到底执行的是哪个方法。<br><strong>静态多态是在编译期就确定了对象以及对象行为的绑定关系</strong>，所以运行起来以后就固定为编译期确定的效果；<br>而<strong>动态多态是在编译期未知绑定关系，运行进行以后才进行绑定</strong>，所以具有更大的灵活性；很明显，动态多态具有更大的灵活性和可扩展性。</p><h4 id="静态多态"><a href="#静态多态" class="headerlink" title="静态多态"></a>静态多态</h4><p>静态多态是在编译期间就可以确定要执行的是何种类型的对象以及该对象的何种行为，运行期不会有改变的情况。所以 <strong>方法重载</strong> 或 <strong>单独使用方法重写</strong> 都是它的具体表现形式。</p><blockquote><p>方法重载：<br>在一个类当中，具有多个同名方法，参数列表不同（包括：参数个数、参数类型、参数顺序的不同），从而各有各的实现。</p><p>方法重写：<br>在继承关系中，不同的子类都拥有继承于父类的某个共有方法，但是各有各的实现。</p></blockquote><h4 id="动态多态"><a href="#动态多态" class="headerlink" title="动态多态"></a>动态多态</h4><p><strong>父类的引用指向子类的对象</strong>。当绑定一个父类引用的时候，它既有可能指向父类的对象，也有可能是指向该父类的某个子类的对象。它是可变的，具体指向谁不是由编码期的声明决定的，而是可以通过在运行时传入不同的对象，从而形成所谓的<strong>“动态绑定”</strong>。</p><p>当父类引用指向子类对象以后，在使用这个引用调用方法的时候会发生什么呢？其实无非就三种情况</p><ol><li><p>使用父类引用调用父类定义的方法；</p><blockquote><p>其本质就是本类的引用调用本类的方法，所以也就没有任何编译或运行的问题；</p></blockquote></li><li><p>使用父类引用调用子类定义的方法；</p><blockquote><p>在调用的时候会发现根本调用不到，编译就会马上报错。其道理也很简单：虽然对象是子类对象，其中当然包含有子类自己定义的内容，但是由于我们的引用是父类类型（即我们是站在父类的层面去看待它），当然就看不到这些子类定义的内容了。如果想访问，那么必须进行“向下转型”。</p></blockquote></li><li><p>使用父类引用调用父类定义，但被子类重写了的方法。</p><blockquote><p>由于这个方法是重写方法，首先说明它的定义就是在父类当中，所以利用父类的引用当然可以看到有这个方法，保证能够使用引用调用得到；其次该方法被子类对象重写了，而且不同的子类可以各有各的实现，那么具体的运行效果，就要依赖于这个父类引用运行起来以后，到底是指向哪种子类的对象了（指向谁，就执行谁的重写后效果）。</p></blockquote></li></ol><h3 id="引用类型转换"><a href="#引用类型转换" class="headerlink" title="引用类型转换"></a><strong>引用类型转换</strong></h3><h4 id="向上类型转换-隐式-自动类型转换"><a href="#向上类型转换-隐式-自动类型转换" class="headerlink" title="向上类型转换(隐式/自动类型转换)"></a>向上类型转换(隐式/自动类型转换)</h4><p>将子类对象赋给父类引用，称为向上转型（upcasting），自动进行类型转换。向上转型可以调用的子类继承的方法，但不能调用子类特有的方法。需要特别理解的是如果子类重写了父类的方法，向上转型后通过父类引用调用的却是真实子类重写的方法。</p><h4 id="向下类型转换-强制类型转换"><a href="#向下类型转换-强制类型转换" class="headerlink" title="向下类型转换(强制类型转换)"></a>向下类型转换(强制类型转换)</h4><p>将父类的引用变量转换为子类类型，称为向下转型（downcasting）。向下转型后就可以调用子类特有的方法了。</p><ul><li>需要进行强制转换;</li><li>强制转换不是做手术，必须转换成真实子类型，否则ClassCastException；</li><li>向下转型之前肯定发生了向上转型；</li><li>为了避免ClassCastException,向下转型之前使用instanceof先判断一下</li></ul><h4 id="instanceof运算符"><a href="#instanceof运算符" class="headerlink" title="instanceof运算符"></a>instanceof运算符</h4><p><strong>instanceof</strong>是Java的一个二元操作符，和==，&gt;，&lt;属于同一类。由于它是由字母组成的，所以也是Java的保留关键字。<strong>它的作用是测试它左边的对象是否是它右边的类的实例</strong>，返回boolean类型的数据。</p><p>在写程序的时候，如果要进行类型转换，我们最好使用instanceof运算符来判断它左边的对象是否是它右边的类的实例，再进行强制转换。</p><blockquote><p>使用instancof的前提：左边的对象和右边的类型在继承树上有上下级关系</p></blockquote><blockquote><p>在比较一个对象是否和另一个对象属于同一个类实例的时候，我们通常可以采用instanceof和getClass两种方法通过两者是否相等来判断，但是两者在判断上面是有差别的。Instanceof进行类型检查规则是:<strong>你属于该类吗？或者你属于该类的派生类吗？</strong>而通过getClass获得类型信息<strong>采用==来进行检查是否相等</strong>的操作是<strong>严格的判断</strong>,<strong>不会存在继承方面的考虑</strong>；</p></blockquote><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类前使用abstract关键字修饰，则该类为抽象类。</p><p>抽象类是约束子类必须有什么方法，而并不关注子类如何实现这些方法。抽象类定义抽象方法，只有声明，不需要实现。抽象方法没有方法体以分号结束，抽象方法必须用abstract关键字来修饰。包含抽象方法的类是抽象类。抽象类中可以包含普通的方法，也可以没有抽象方法。抽象类不能直接创建，可以定义引用变量来指向子类对象，来实现抽象方法。</p><p>抽象类应用场景：</p><ol><li>在某些情况下，某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法(可实现动态多态)。</li><li>从多个具有相同特征的类中抽象出一个抽象类，以这个抽象类作为子类的模板，从而避免子类设计的随意性。</li></ol><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口可以理解为一种特殊的类，由<strong>全局常量</strong>和公共的<strong>抽象方法</strong>所组成。也可理解为一个特殊的抽象类，因为它含有抽象方法。</p><p>如果说类是一种具体实现体，而接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部数据，也不关心这些类里方法的实现细节，它只规定这些类里必须提供的某些方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] [<span class="hljs-keyword">abstract</span>] <span class="hljs-class"><span class="hljs-keyword">interface</span> 接口名 [<span class="hljs-keyword">extends</span>父接口1,2....]（多继承）</span>&#123;<br><span class="hljs-number">0</span>…n常量 (<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span>)<br><span class="hljs-number">0</span>…n 抽象方法(<span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span>)                                     　&#125;       <br><span class="hljs-comment">//其中[ ]里的内容表示可选项，可以写也可以不写;</span><br><span class="hljs-comment">//接口中的属性都是常量，即使定义时不添加public static final 修饰符，系统也会自动加上；</span><br><span class="hljs-comment">//接口中的方法都是抽象方法，即使定义时不添加public abstract修饰符，系统也会自动加上。</span><br></code></pre></td></tr></table></figure><p>接口的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] <span class="hljs-class"><span class="hljs-keyword">class</span> 类名 <span class="hljs-keyword">extends</span> 父类 <span class="hljs-keyword">implements</span> 接口1，接口2...</span>&#123;<br>类体部分<br><span class="hljs-comment">//如果继承了抽象类，需要实现继承的抽象方法；</span><br><span class="hljs-comment">//要实现接口中的抽象方法</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果要继承父类，继承父类必须在实现接口之前,即extends关键字必须在implements关键字前</p><p>通常我们在命名一个接口时，经常以I开头，用来区分普通的类。如：IPlayGame</p></blockquote><p>接口和匿名内部类配合使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//写法一</span><br>Interface i =<span class="hljs-keyword">new</span> <span class="hljs-class"><span class="hljs-keyword">interface</span>()</span>&#123;<br>    Public <span class="hljs-keyword">void</span> method&#123;<br>        System.out.println(<span class="hljs-string">&quot;利用匿名内部类实现接口1&quot;</span>);<br>&#125;<br>&#125;;<br>i.method();<br><br><span class="hljs-comment">//写法二</span><br>Interface i =<span class="hljs-keyword">new</span> <span class="hljs-class"><span class="hljs-keyword">interface</span>()</span>&#123;<br>Public <span class="hljs-keyword">void</span> method&#123;<br>        System.out.println(<span class="hljs-string">&quot;利用匿名内部类实现接口1&quot;</span>);<br>    &#125;<br>&#125;.method();<br></code></pre></td></tr></table></figure><h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3><h4 id="语法层面上的区别"><a href="#语法层面上的区别" class="headerlink" title="语法层面上的区别"></a>语法层面上的区别</h4><ul><li><p>抽象类可以提供成员方法的实现细节，而接口中只能存在public abstract 方法；</p></li><li><p>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的；</p></li><li><p>抽象类可以有静态代码块和静态方法，而接口中不能含有静态代码块以及静态方法；</p></li><li><p>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</p></li></ul><h4 id="设计层面上的区别"><a href="#设计层面上的区别" class="headerlink" title="设计层面上的区别"></a>设计层面上的区别</h4><ul><li><p>抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象。抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（行为）进行抽象。</p><p>继承是一个 “是不是”的关系，而 接口 实现则是 “有没有”的关系。如果一个类继承了某个抽象类，则子类必定是抽象类的种类，而接口实现则是有没有、具备不具备的关系，具备则实现。</p><blockquote><p>举个简单的例子，飞机和鸟是不同类的事物，但是它们都有一个共性，就是都会飞。那么在设计的时候，可以将飞机设计为一个类Airplane，将鸟设计为一个类Bird，但是不能将 <code>飞行</code> 这个特性也设计为类，因此它只是一个行为特性，并不是对一类事物的抽象描述。此时可以将 <code>飞行</code> 设计为一个接口Fly，包含方法fly( )，然后Airplane和Bird分别根据自己的需要实现Fly这个接口。然后至于有不同种类的飞机，比如战斗机、民用飞机等直接继承Airplane即可，对于鸟也是类似的，不同种类的鸟直接继承Bird类即可。</p></blockquote></li><li><p>抽象类作为很多子类的父类，它是一种模板式设计。而接口是一种行为规范，它是一种辐射式设计。</p><p>对于抽象类，如果需要添加新的方法，可以直接在抽象类中添加具体的实现，子类可以不进行变更；而对于接口则不行，如果接口进行了变更，则所有实现这个接口的类都必须进行相应的改动。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>面向对象</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工具</title>
    <link href="/2021/07/22/%E5%B7%A5%E5%85%B7/"/>
    <url>/2021/07/22/%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Website</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>资源</title>
    <link href="/2021/07/22/%E8%B5%84%E6%BA%90/"/>
    <url>/2021/07/22/%E8%B5%84%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="图源"><a href="#图源" class="headerlink" title="图源"></a>图源</h1><table><thead><tr><th><strong>地址</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td><a href="https://wallpaperhub.app/">Wallpaper Hub</a></td><td>高质量免费的电脑壁纸高清网站</td></tr><tr><td><a href="https://wallhaven.cc/">Wallhaven</a></td><td>高清壁纸搜索引擎</td></tr><tr><td><a href="https://unsplash.com/">Unsplash</a></td><td>中文高清免版权图库</td></tr></tbody></table><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><table><thead><tr><th>地址</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://echarts.apache.org/zh/index.html">ECharts</a></td><td>一个基于 JavaScript 的开源可视化图表库</td></tr><tr><td><a href="http://www.animate.net.cn/">Animate.css</a></td><td>开源CSS动画库，内置了很多典型的css3动画，兼容性好使用方便</td></tr></tbody></table><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><table><thead><tr><th>地址</th><th>备注</th></tr></thead><tbody><tr><td><a href="http://doc.ruoyi.vip/ruoyi-vue/">RuoYi</a></td><td>基于SpringBoot、Spring Security、Jwt、Vue的前后端分离的后台管理系统</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Website</category>
      
    </categories>
    
    
    <tags>
      
      <tag>source</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo主题</title>
    <link href="/2021/07/22/Hexo%E4%B8%BB%E9%A2%98/"/>
    <url>/2021/07/22/Hexo%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>hexo本身自带一套主题<code>landscape</code>，但是原主题过于简洁，通常在<a href="https://hexo.io/themes/">官方地址</a>选取其他主题替换。</p><h2 id="Next"><a href="#Next" class="headerlink" title="Next"></a><a href="https://theme-next.js.org/">Next</a></h2><p>个人使用的第一个主题，主题风格极度简洁，但是稳定性与功能性几乎是所有主题中最好的。主题适配多种插件，比较适合喜欢界面简洁但功能丰富的人群。</p><h2 id="Fluid"><a href="#Fluid" class="headerlink" title="Fluid"></a><a href="https://hexo.fluid-dev.com/docs/">Fluid</a></h2><p>目前使用的主题，主要我个人比较喜欢这款主题的布局与风格。在功能性方面，这款主题同样比较丰富，具体内容官方文档中均有详细描述。此外，主题配套的文档可谓十分详实，对于配置中可能会遇到的问题都有详细的说明。</p><hr><p>以上是我实际使用过的主题，下面两个主要是界面符合我个人审美，但并未实际使用，故仅给出链接。</p><h2 id="Ocean"><a href="#Ocean" class="headerlink" title="Ocean "></a><a href="https://zhwangart.com/2018/11/30/Ocean/">Ocean </a></h2><h2 id="Claudia"><a href="#Claudia" class="headerlink" title="Claudia"></a><a href="https://haojen.github.io/Claudia-theme-blog/">Claudia</a></h2>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>theme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo插件</title>
    <link href="/2020/10/06/Hexo%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/"/>
    <url>/2020/10/06/Hexo%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo评论插件"><a href="#Hexo评论插件" class="headerlink" title="Hexo评论插件"></a>Hexo评论插件</h1><p>大致对比了网上已有的评论插件，在考虑简便性以及成本的基础上，我个人选择使用gitalk用于博客搭建。Gitalk 是一个基于 Github Issue 和 Preact 开发的评论插件。</p><p>这里放一个Next主题下的评论系统的<a href="https://theme-next.js.org/docs/third-party-services/comments.html">官方链接</a>，感兴趣可以自行参考。</p><h2 id="构建方式"><a href="#构建方式" class="headerlink" title="构建方式"></a>构建方式</h2><ol><li><p>首先<a href="https://github.com/settings/applications/new">申请</a>一个新的OAuth Application，注册成功后会得到一个<code>Client ID</code>和<code>Client Secret</code>，这两项会在后续配置中用到，需要记一下。<img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210722214805.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210722214825.png" alt="img"></p></li><li><p>建立评论仓库</p><p>建立由于存放评论的内容，设置中打开issues，默认应该是打开的</p><span id="more"></span></li><li><p>添加代码</p><p>通常情况下只要将对应的代码嵌入页面之中即可使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/gitalk@latest/dist/gitalk.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gitalk-container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>     <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> gitalk = <span class="hljs-keyword">new</span> Gitalk(&#123;</span><br><span class="javascript">    <span class="hljs-comment">// gitalk的主要参数</span></span><br><span class="javascript">      <span class="hljs-attr">clientID</span>: <span class="hljs-string">&#x27;&#x27;</span>,   <span class="hljs-comment">//上面获取到的值</span></span><br><span class="javascript">      <span class="hljs-attr">clientSecret</span>: <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-comment">//上面获取到的值</span></span><br><span class="javascript">      <span class="hljs-attr">repo</span>: <span class="hljs-string">&#x27;&#x27;</span>,  <span class="hljs-comment">//你刚才建立仓库的名字</span></span><br><span class="javascript">      <span class="hljs-attr">owner</span>: <span class="hljs-string">&#x27;&#x27;</span>,   <span class="hljs-comment">//你的GitHub用户名字</span></span><br><span class="javascript">      <span class="hljs-attr">admin</span>:<span class="hljs-string">&#x27;&#x27;</span>,  <span class="hljs-comment">//你的GitHub用户的名字</span></span><br><span class="javascript">      <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">//id不能重复</span></span><br><span class="javascript">        &#125;);</span><br><span class="javascript">      gitalk.render(<span class="hljs-string">&#x27;gitalk-container&#x27;</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure></li><li><p>Next主题配置</p><p>我个人使用的是Next主题，Next有对应的集成插件，修改主题_config.yml配置即可。Next以往版本内部为gitment参数，8.0版本修改为gitalk参数。<img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210722214630.png" alt="image-20201006092628245"></p><p>但配置项基本一致，重点是之前申请所得的两个参数。</p><p>此外还需要引入对应的js与css否则不会显示评论模块。<img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210722214654.png" alt="img"></p><p>加载完成后需要注册Github Application的账号登录评论模块，进行手动初始化评论才能让其他用户进行评论</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>plugin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用笔记</title>
    <link href="/2020/09/28/Hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/09/28/Hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        通过网上教程以Hexo与Github自建个人博客，谨以此文纪念，同时对于使用过程中出现的问题以及学到的相关知识进行记录。</p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hexo</span>: <span class="hljs-number">5</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">hexo</span>-cli: <span class="hljs-number">4</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">os</span>: Windows_NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">18362</span> win<span class="hljs-number">32</span> x<span class="hljs-number">64</span><br><span class="hljs-attribute">node</span>: <span class="hljs-number">12</span>.<span class="hljs-number">18</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">NexT</span> version <span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="Hexo相关知识点"><a href="#Hexo相关知识点" class="headerlink" title="Hexo相关知识点"></a>Hexo相关知识点</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；</p></li><li><p>hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；同时我个人使用的主题Next也有多个版本（目前使用/**<a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-theme-fluid</a>**），截止此文撰写最新的版本为 8.0.0，往期的旧版本已停止维护，很多文章的对应配置信息也与新的版本有所出入，需要自行甄别；</p></li><li><p>hexo有2种<code>_config.yml</code>文件，一个是根目录下的全局的<code>_config.yml</code>，一个是各个<code>theme</code>下的；</p></li><li><p>有的教程会让配置SSH密钥，SSH密钥可以为了防止其他人恶意部署文件到你的仓库，使用以后每次部署文件都需要登录Github账号，通过下述配置可比避免每次登录：</p><p>修改配置文件的deploy属性</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">    type:</span> git<br><span class="hljs-symbol">    repo:</span> git@github.com:xxxxx/xxxxx.github.io.git<br><span class="hljs-symbol">    branch:</span> master<br></code></pre></td></tr></table></figure><p>当然在网上也看到有人将登录信息写在环境变量里或者修改git的配置信息，此处不做详细说明。</p></li></ol><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><h4 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vala">hexo n [layout] &lt;title&gt;<br><span class="hljs-meta">#新建文章</span><br><span class="hljs-meta">#layout 可选参数，用于选取文章的布局模板，若省略则为默认post布局</span><br><span class="hljs-meta">#title 必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围</span><br></code></pre></td></tr></table></figure><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="ruby">p  <span class="hljs-comment">#自定义新文章的路径</span></span><br><span class="ruby"></span>-<span class="ruby">r <span class="hljs-comment">#如果存在同名文章，将其替换</span></span><br><span class="ruby"></span>-<span class="ruby">s <span class="hljs-comment">#文章的 Slug，作为新文章的文件名和发布后的 URL</span></span><br></code></pre></td></tr></table></figure><h5 id="Hexo新建标签、分类、归档等页面"><a href="#Hexo新建标签、分类、归档等页面" class="headerlink" title="Hexo新建标签、分类、归档等页面"></a>Hexo新建标签、分类、归档等页面</h5><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> <span class="hljs-string">&quot;tages&quot;</span> <br></code></pre></td></tr></table></figure><blockquote><p>你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> --path about/me <span class="hljs-string">&quot;About me&quot;</span><br></code></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hexo <span class="hljs-keyword">new</span> page <span class="hljs-comment">--path about/me</span><br></code></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><p>对于tags之类的页面，如需生效，须找到对应的创建页面加上type,注意<code>type：</code>后面要有一个空格。</p></blockquote><p>然后打开对应路径中的文件，例如 <code>/source/tages/index.md</code>，设置其类型 type 值为“tages”，一定注意<code>type:</code>后一定要有空格。 </p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: tags<br>date: 2020<span class="hljs-string">-09</span><span class="hljs-string">-28</span> 19:48:15<br>type: &quot;tags&quot;<br><span class="hljs-keyword">tags:</span> 标签<br></code></pre></td></tr></table></figure><p>当同时具有多个标签时，使用如下方式处理，注意便签之间仍旧需要注意空格问题。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">tags:</span> [标签1, 标签2, 标签3]<br></code></pre></td></tr></table></figure><p>最后打开 <code>/themes/主题/_config.yml</code>，把tages标签那项取消注释即可。在写文章时添加对应的tags或categories会自动归类。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">menu:</span><br><span class="hljs-symbol">  home:</span> / || fa fa-home<br><span class="hljs-symbol">  about:</span> <span class="hljs-meta-keyword">/about/</span> || fa fa-user<br><span class="hljs-symbol">  tags:</span> <span class="hljs-meta-keyword">/tags/</span> || fa fa-tags<br><span class="hljs-symbol">  categories:</span> <span class="hljs-meta-keyword">/categories/</span> || fa fa-th<br><span class="hljs-symbol">  archives:</span> <span class="hljs-meta-keyword">/archives/</span> || fa fa-archive<br>  <span class="hljs-meta"># schedule: /schedule/ || fa fa-calendar</span><br>  <span class="hljs-meta"># sitemap: /sitemap.xml || fa fa-sitemap</span><br>  <span class="hljs-meta"># commonweal: /404/ || fa fa-heartbeat</span><br></code></pre></td></tr></table></figure><h5 id="layout布局-文章模板，非网页布局"><a href="#layout布局-文章模板，非网页布局" class="headerlink" title="layout布局(文章模板，非网页布局)"></a>layout布局(文章模板，非网页布局)</h5><p>在<code>/scaffolds/</code>目录下是文章的模板，可以自己新建对应的模板，在创建文章时选择对应模板即可，图简单的话可以直接修改post.md，作为默认模板可以在创建文件时不选择模板。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: &#123;&#123; title &#125;&#125;<br>date: &#123;&#123; date &#125;&#125;<br><span class="hljs-keyword">tags:</span> <br>categories: <br></code></pre></td></tr></table></figure><h5 id="写草稿"><a href="#写草稿" class="headerlink" title="写草稿"></a>写草稿</h5><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">draft</span> [layout] &lt;filename&gt;<br></code></pre></td></tr></table></figure><p>会在source/drafts目录下生成一个new-draft.md文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到drafts目录之中。</p><p>发布草稿</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">hexo publish [layout] <span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果要强行预览草稿，可以修改配置文件或者使用对应指令</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#更改配置文件</span><br>render_drafts: <span class="hljs-literal">true</span><br><br><span class="hljs-meta">#使用指令</span><br>$ hexo server --drafts<br></code></pre></td></tr></table></figure><h5 id="让文章不显示全部内容"><a href="#让文章不显示全部内容" class="headerlink" title="让文章不显示全部内容"></a>让文章不显示全部内容</h5><p>在合适的位置加上<code>&lt;!--more--&gt;</code>即可</p><h4 id="本地生成"><a href="#本地生成" class="headerlink" title="本地生成"></a>本地生成</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo g == hexo <span class="hljs-keyword">generate</span> #生成静态文件<br>hexo s == hexo server #启动服务预览<br></code></pre></td></tr></table></figure><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">hexo <span class="hljs-attr">d</span> == hexo deploy <span class="hljs-comment">#部署</span><br>hexo d <span class="hljs-attr">-g</span> == hexo g -d <span class="hljs-comment">#指定生成后部署</span><br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> clean <span class="hljs-comment">#清除缓存，网站显示异常时可尝试此操作</span><br></code></pre></td></tr></table></figure><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> --<span class="hljs-literal">debug</span> <span class="hljs-comment">#调试模式，用于将消息详细记录到终端和debug.log文件</span><br></code></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haml">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>    -<span class="ruby">s <span class="hljs-comment">#静态模式,仅提供 public 文件夹中的文件并禁用文件监视</span></span><br><span class="ruby"></span>    -<span class="ruby">p <span class="hljs-number">5000</span> <span class="hljs-comment">#定服务器端口，默认为 4000</span></span><br><span class="ruby"></span>    -<span class="ruby">i <span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span> <span class="hljs-comment">#指定服务器 IP 地址，默认为 0.0.0.0</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
