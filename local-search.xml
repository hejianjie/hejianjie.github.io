<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java集合</title>
    <link href="/2021/07/27/Java%E9%9B%86%E5%90%88/"/>
    <url>/2021/07/27/Java%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="Java集合框架"><a href="#Java集合框架" class="headerlink" title="Java集合框架"></a>Java集合框架</h1><p>图中实线边框的是实现类，折线边框的是抽象类，而点线边框的是接口。</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210727171333.gif" alt="img"></p><p>Java 中的集合框架可以划分为两类：</p><ul><li><p>集合 Collection：用来存储<strong>同一类型的数据</strong>，Collection 的子接口又分为 List、Set、Queue 三种；</p><p>List：ArrayList、LinkedList、Vector、Stack；</p><p>Set：HashSet、LinkedHashSet、TreeSet；</p><p>Queue：PriorityQueue、ArrayDeque。</p></li><li><p>映射 Map：用来存储<strong>键值对数据</strong>。</p><p>Map：HashMap、LinkedHashMap、TreeMap、Hashtable(没遵守驼峰命名)</p></li></ul><p>Collection有一个重要的方法：<code>iterator()</code>，返回一个Iterator（迭代器），用于遍历集合的所有元素。Iterator模式可以把访问逻辑从不同的集合类中抽象出来，从而避免向客户端暴露集合的内部结构。典型的用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator it = collection.iterator(); <span class="hljs-comment">// 获得一个迭代器</span><br><span class="hljs-keyword">while</span>(it.hasNext()) &#123;<br>    Object obj = it.next(); <span class="hljs-comment">// 得到下一个元素</span><br>&#125;<br></code></pre></td></tr></table></figure><p>不需要维护遍历集合的”指针’’，所有的内部状态都由Iterator来维护，而这个Iterator由集合类通过工厂方法生成。</p><p>每一种集合类返回的Iterator具体类型可能不同，但它们都实现了Iterator接口，因此，我们不需要关心到底是哪种Iterator，它只需要获得这个Iterator接口即可。</p><p>要确保遍历过程顺利完成，必须保证遍历过程中不更改集合的内容（Iterator的<code>remove()</code>方法除外），所以，确保遍历可靠的原则是：只在一个线程中使用这个集合，或者在多线程中对遍历代码进行同步。</p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>List表达一个有序的集合，List中的每个元素都有索引，使用此接口能够准确的控制每个元素插入的位置。用户也能够使用索引来访问List中的元素。</p><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList的底层数据结构是一个Object数组，查询通过数组下标查询，查询速度快，增删慢。允许所有元素，包括null。是非同步的（unsynchronized）。</p><p>ArrayList 实现了<code>RandmoAccess</code> 接口，所以有随机访问功能。</p><p>ArrayList在实例化时，有参则按参数确定创建数组大小，无参则创建空数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//无参构造</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>&#125;<br> <br><span class="hljs-comment">//有参构造：</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (initialCapacity &gt;<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">this</span>.elementData =<span class="hljs-keyword">new</span> Object[initialCapacity];<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (initialCapacity ==<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">this</span>.elementData = EMPTY_ELEMENTDATA;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                           initialCapacity);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ArrayList在添加元素时，当长度不足触发扩容时，若数组为空则给一个默认为10的容量，若不为空则将数组的容量扩大1.5倍的容量。</p><blockquote><p><strong>问题：</strong></p><h4 id="ArrayList的扩容机制？"><a href="#ArrayList的扩容机制？" class="headerlink" title="ArrayList的扩容机制？"></a>ArrayList的扩容机制？</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br><span class="hljs-comment">//扩容</span><br>ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>elementData[size++] = e;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ArrayList使用<code>add()</code>方法进行扩容，<code>add()</code>方法会先处理长度，再将元素添加到数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculateCapacity</span><span class="hljs-params">(Object[] elementData, <span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<br><span class="hljs-keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<br>&#125;<br><span class="hljs-keyword">return</span> minCapacity;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br>modCount++;<br><span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>grow(minCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><p>在处理数组长度时，<code>calculateCapacity()</code>方法判断数组是否为空，若为空直接给一个默认值为10的容量，<code>ensureExplicitCapacity()</code>方法是否需要扩容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">grow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br><span class="hljs-keyword">int</span> oldCapacity = elementData.length;<br><span class="hljs-keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>newCapacity = minCapacity;<br><span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>newCapacity = hugeCapacity(minCapacity);<br>elementData = Arrays.copyOf(elementData, newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><p>若确定扩容，则使用<code>grow()</code>方法进行扩容，首先获取到ArrayList中elementData数组的内存空间长度，再通过右移运算<code>oldCapacity &gt;&gt; 1</code>得到原长度的一半，再加上原长度，也即<strong>每次扩容是原来的1.5倍</strong>。</p><p>扩容后再判断新数组的容量是否足够，足够则完成扩容，否则就将数组长度设置为需要的长度，并检查是否大于默认的最大值出现溢出。</p><p>完成容量处理后调用<code>Arrays.copyOf()</code>方法将elementData数组指向新的内存空间为newCapacity的连续空间， 并将elementData的数据复制到新的内存空间。</p><hr><h4 id="为什么说ArrayList是线程不安全的？"><a href="#为什么说ArrayList是线程不安全的？" class="headerlink" title="为什么说ArrayList是线程不安全的？"></a>为什么说ArrayList是线程不安全的？</h4><p>ArrayList 不是线程安全的。 线程不安全的两种体现：数组越界异常 <code>ArrayIndexOutOfBoundsException</code>、元素值覆盖和为空问题。</p><p><strong>数组越界异常</strong> </p><p>由于ArrayList添加元素是分先判断elementData数组容量是否满足需求，再在elementData对应位置上设置元素的值两步进行，可以看出一个不安全的隐患，<strong>在多个线程进行add操作时可能会导致elementData数组越界</strong>。</p><p>具体逻辑如下：</p><ol><li>列表大小为9，即size=9</li><li>线程A开始进入add方法，这时它获取到size的值为9，调用ensureCapacityInternal方法进行容量判断。</li><li>线程B此时也进入add方法，它获取到size的值也为9，也开始调用ensureCapacityInternal方法。</li><li>线程A发现需求大小为10，而elementData的大小就为10，可以容纳。于是它不再扩容，返回。</li><li>线程B也发现需求大小为10，也可以容纳，返回。</li><li>线程A开始进行设置值操作， elementData[size++] = e 操作。此时size变为10。</li><li>线程B也开始进行设置值操作，它尝试设置elementData[10] = e，而elementData没有进行过扩容，它的下标最大为9。于是此时会报出一个数组越界的异常ArrayIndexOutOfBoundsException。</li></ol><p><strong>元素值覆盖和为空问题</strong></p><p><code>elementData[size++] = e</code> 设置值的操作同样会导致线程不安全。从这儿可以看出，这步操作也不是一个原子操作，它由如下两步操作构成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">elementData[size] = e;<br>size = size + <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>当在多线程环境下执行时，可能就会发生一个线程的值覆盖另一个线程添加的值，具体逻辑如下：</p><ol><li>列表大小为0，即size=0</li><li>线程A开始添加一个元素，值为A。此时它执行第一条操作，将A放在了elementData下标为0的位置上。</li><li>接着线程B刚好也要开始添加一个值为B的元素，且走到了第一步操作。此时线程B获取到size的值依然为0，于是它将B也放在了elementData下标为0的位置上。</li><li>线程A开始将size的值增加为1</li><li>线程B开始将size的值增加为2</li></ol><p>这样线程AB执行完毕后，理想中情况为size为2，elementData下标0的位置为A，下标1的位置为B。而实际情况变成了size为2，elementData下标为0的位置变成了B，下标1的位置上什么都没有。并且后续除非使用set方法修改此位置的值，否则将一直为null，因为size为2，添加元素时会从下标为2的位置上开始。</p><hr><h4 id="如何对ArrayList线程安全处理？"><a href="#如何对ArrayList线程安全处理？" class="headerlink" title="如何对ArrayList线程安全处理？"></a>如何对ArrayList线程安全处理？</h4><ul><li> <strong>Collections.synchronizedList</strong></li></ul><p>  最常用的方法是<strong>通过 Collections 的 synchronizedList 方法</strong>将 ArrayList 转换成线程安全的容器后再使用。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Object&gt; list =Collections.synchronizedList(<span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;);<br></code></pre></td></tr></table></figure><ul><li><p><strong>为list.add()方法加锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(list.get()) &#123;<br>    list.get().add(model);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>CopyOnWriteArrayList</strong></p><p>使用线程安全的 CopyOnWriteArrayList 代替线程不安全的 ArrayList。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Object&gt; list1 = <span class="hljs-keyword">new</span> CopyOnWriteArrayList&lt;Object&gt;();<br></code></pre></td></tr></table></figure></li><li><p><strong>使用ThreadLocal</strong></p><p>使用ThreadLocal变量确保线程封闭性(封闭线程往往是比较安全的， 但由于使用ThreadLocal封装变量，相当于把变量丢进执行线程中去，每new一个新的线程，变量也会new一次，一定程度上会造成性能[内存]损耗，但其执行完毕就销毁的机制使得ThreadLocal变成比较优化的并发解决方案)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ThreadLocal&lt;List&lt;Object&gt;&gt; threadList = <span class="hljs-keyword">new</span> ThreadLocal&lt;List&lt;Object&gt;&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> List&lt;Object&gt; <span class="hljs-title">initialValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><hr><h4 id="为什么Arrays-asList-返回的list不能用add方法？"><a href="#为什么Arrays-asList-返回的list不能用add方法？" class="headerlink" title="为什么Arrays.asList()返回的list不能用add方法？"></a>为什么Arrays.asList()返回的list不能用add方法？</h4><p><code>Arrays.asList()</code>返回的list使用<code>add()</code>方法会抛出<code>UnsupportedOperationException</code>异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Arrays.java部分源码</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayList</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractList</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">RandomAccess</span>, <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">2764017481108945198L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> E[] a;<br>    <br>    ArrayList(E[] array) &#123;<br>        a = Objects.requireNonNull(array);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@SafeVarargs</span><br><span class="hljs-meta">@SuppressWarnings(&quot;varargs&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">asList</span><span class="hljs-params">(T... a)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(a);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//AbstractList.java部分源码</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    add(size(), e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, E element)</span> </span>&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException();<br>&#125;<br></code></pre></td></tr></table></figure><p>由Arrays的源码可知，<code>Arrays.asList()</code>返回的是<code>java.util.Arrays.ArrayList</code>，不是<code>java.utils.ArrayList</code>，而是一个继承<code>AbstractList</code>的内部类<code>ArrayList</code>，且该内部类并没有重写AbstractList中的add、remove方法。因此asList返回的对象在调用add方法时，实际调用的是AbstractList中的add方法。且由AbstractList的源码可知，直接调用add方法会抛<code>UnsupportedOperationException</code>异常。</p><p>因此<code>ArrayList.asList()</code>返回的对象不能用add方法，会抛<code>UnsupportedOperationException</code>异常。</p><p><strong>解决方法</strong>：创建一个<code>java.utils.ArrayList</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list  = <span class="hljs-keyword">new</span> ArrayList(Arrays.asList(items));<br></code></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="https://blog.csdn.net/wuli_sanena/article/details/107426175">https://blog.csdn.net/wuli_sanena/article/details/107426175</a></p></blockquote><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>LinkedList由双链表实现，增删只需要修改链表节点指针，对元素的插入和删除效率较高。LinkedList没有同步方法。 jdk1.6使用的是一个带有 <code>header</code>节头结点的双向循环链表， 头结点不存储实际数据 ，在1.6之后，就变更为双向链表，使用两个节点<code>first</code>、<code>last</code>指向首尾节点。</p><p>LinkedList提供额外的get，remove，insert方法在LinkedList的首部或尾部。这些操作使LinkedList可被用作堆栈（stack），队列（queue）或双向队列（deque）。</p><blockquote><p><strong>问题：</strong></p><h4 id="LinkedList中offer-与add-的区别是什么？"><a href="#LinkedList中offer-与add-的区别是什么？" class="headerlink" title="LinkedList中offer()与add()的区别是什么？"></a>LinkedList中<code>offer()</code>与<code>add()</code>的区别是什么？</h4><p>offer属于 <code>offer in interface Deque&lt;E&gt;</code>，add 属于 <code>add in interface Collection&lt;E&gt;</code>。  </p><p>当队列为空时候，使用add方法会报错，而offer方法会返回false。</p><ul><li>作为List使用时，一般采用add / get方法来 压入/获取对象。</li><li>作为Queue使用时，才会采用 offer / poll / take等方法。</li><li>作为链表对象时，offer等方法相对来说没有什么意义，这些方法是用于支持队列应用的。</li></ul><hr><h4 id="modCount在非线程安全集合中的作用？"><a href="#modCount在非线程安全集合中的作用？" class="headerlink" title="modCount在非线程安全集合中的作用？"></a><code>modCount</code>在非线程安全集合中的作用？</h4><p><code>modCount</code>属性代表为结构性修改（ 改变list的size大小、以其他方式改变他导致正在进行迭代时出现错误的结果）的次数，该属性被<code>Iterato</code>r以及<code>ListIterator</code>的实现类所使用，且很多非线程安全使用<code>modCount</code>属性。</p><p>初始化迭代器时会给这个modCount赋值，如果在遍历的过程中，一旦发现这个对象的modCount和迭代器存储的modCount不一样，<code>Iterator</code>或者<code>ListIterator</code> 将抛出<code>ConcurrentModificationException</code>异常，</p><p>这是<strong>jdk在面对迭代遍历的时候为了避免不确定性而采取的 fail-fast（快速失败）原则</strong>。</p><hr><h4 id="快速失败-fail-fast-和安全失败-fail-safe-有什么区别？"><a href="#快速失败-fail-fast-和安全失败-fail-safe-有什么区别？" class="headerlink" title="快速失败(fail-fast)和安全失败(fail-safe)有什么区别？"></a>快速失败(fail-fast)和安全失败(fail-safe)有什么区别？</h4><p><strong>快速失败和安全失败是对迭代器而言的。</strong></p><p><strong>快速失败</strong>：在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的内容进行了修改（增加、删除、修改），则会抛出<code>Concurrent Modification Exception</code>。</p><p><strong><code>java.util</code>包下的集合类都是快速失败的，不能在多线程下发生并发修改（迭代过程中被修改</strong>）。</p><p>迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 <code>modCount</code>变量。集合在被遍历期间如果内容发生变化，就会改变<code>modCount</code>的值。每当迭代器使用<code>hashNext()</code>/<code>next()</code>遍历下一个元素之前，都会检测<code>modCount</code>变量是否为expectedmodCount值，是的话就返回遍历；否则抛出异常，终止遍历。<br>注意：这里异常的抛出条件是检测到 <code>modCount！=expectedmodCount</code> 这个条件。如果集合发生变化时修改modCount值刚好又设置为了<code>expectedmodCount</code>值，则异常不会抛出。因此，不能依赖于这个异常是否抛出而进行并发操作的编程，这个异常只建议用于检测并发修改的bug。</p><p><strong>安全失败</strong>：采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。由于迭代时是<strong>对原集合的拷贝进行遍历</strong>，所以在遍历过程中对原集合所作的修改并不能被迭代器检测到，所以不会触发<code>Concurrent Modification Exception</code>。</p><p><strong><code>java.util.concurrent</code>包下的容器都是安全失败，可以在多线程下并发使用，并发修改。</strong></p><p>基于拷贝内容的优点是避免了<code>Concurrent Modification Exception</code>，但同样地，迭代器并不能访问到修改后的内容，即：迭代器遍历的是开始遍历那一刻拿到的集合拷贝，在遍历期间原集合发生的修改迭代器是不知道的。</p><hr><h4 id="LinkedList有什么线程安全问题？"><a href="#LinkedList有什么线程安全问题？" class="headerlink" title="LinkedList有什么线程安全问题？"></a>LinkedList有什么线程安全问题？</h4><p>LinkedList没有做线程锁，多个线程同步访问的时候可能会导致数据损坏。</p><p>以<code>add()</code>操作为例：</p><p>当调用<code>add()</code>方法时候默认执行的是lastadd方法（尾插）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">linkLast</span><span class="hljs-params">(E e)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<br>        <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(l, e, <span class="hljs-keyword">null</span>);<br>        last = newNode;<br>        <span class="hljs-keyword">if</span> (l == <span class="hljs-keyword">null</span>)<br>            first = newNode;<br>        <span class="hljs-keyword">else</span><br>            l.next = newNode;<br>        size++;<br>        modCount++;<br>    &#125;<br></code></pre></td></tr></table></figure><p>由于没有加锁操作，当两个线程并行运行时候同时向第四个节点处尾插加入第五个节点。</p><ol><li>第一个线程拿到第四个节点的引用地址last赋值给l，并创建新的节点，将新节点的prev指向第四个节点；</li><li>此时线程阻塞，第二个线程执行，并成功添加第五个节点；</li><li>然后第一个线程继续执行，将last赋值为刚刚新建的节点，并将l（第四个节点）的next域指向新节点；</li><li>此时链表里面共五个几点，第二个线程创建的节点会被第一个线程创建的节点覆盖。</li></ol><hr><h4 id="如何对LinkedList线程安全处理？"><a href="#如何对LinkedList线程安全处理？" class="headerlink" title="如何对LinkedList线程安全处理？"></a>如何对LinkedList线程安全处理？</h4><p>参考ArrayList的处理方式。</p><ul><li><p><strong>Collections.synchronizedList</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = Collections.synchronizedList(<span class="hljs-keyword">new</span> LinkedList&lt;String&gt;());<br></code></pre></td></tr></table></figure></li><li><p><strong>方法加锁</strong></p></li><li><p><strong>ConcurrentLinkedQueue</strong></p><p>使用线程安全的ConcurrentLinkedQueue及进行替换。</p></li></ul></blockquote><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>Vector的底层数据结构也是一个数组，查询速度快。它的方法上加了synchronized关键字，所以它是线程安全的，但也因此，它的效率很低，几乎已经被淘汰了。</p><p>由于<code>Collections.sychronizedList</code>方法Collections.sychronizedList，基本可以替代Vector。</p><blockquote><p><strong>问题</strong>：</p><h4 id="为什么Java-Vector（和Stack）类被认为已过时或已弃用？"><a href="#为什么Java-Vector（和Stack）类被认为已过时或已弃用？" class="headerlink" title="为什么Java Vector（和Stack）类被认为已过时或已弃用？"></a>为什么Java Vector（和Stack）类被认为已过时或已弃用？</h4><p>Vector类以及Hashtable类的淘汰应当从历史发展的角度来看。</p><p><strong>同步容器</strong>：在Java发展的早期就在支持多线程了，也提供了一些线程安全的容器，比如在最早jdk1.2提供的集合容器类比如<strong>Vector、Hashtable</strong>，他们的实现机制都差不多，都是在方法层面上加<strong>synchronized</strong>关键字来实现线程安全。在早期jdk还提供了<strong>Collections.synchronizedXxx</strong>系列方法来创建同步容器。这几个方法的实现方式都差不多，都是把集合对象作为参数设置进一个新对象里，然后将传递进去的集合作为新建对象的属性封装起来，最后通过访问新建对象的方法（通过<strong>synchronized</strong>实现同步）去访问传递进去的集合。</p><p>这类通过锁实现同步的叫着同步容器，同步容器对于他自身来说是线程安全的，但是我们在进行一些复合操作的时候就可能并不是线程安全的了。</p><p>比如<code>int size = vector.size(); vector.remove(size);</code>这类操作，在多线程情况下如果也有get最后一个元素，就很容易出现异常。</p><p>再比如<code>for (int i = 0; i &lt; vector.size(); i++)</code>，虽然vector是线程安全的，但是可以能在遍历的过程中其他线程对vector进行了操作，比如移除了最后一个，那么这个遍历就会出现异常。</p><p>那么要解决这类复合操作就必须额外加锁去控制。</p><p>同步容器是通过把所有对容器的状态访问都通过加锁来实现串行化访问，最终实现容器的线程安全，这种方式的缺点就是严重降低了容器的并发性，在多线程竞争容器的锁时就会严重影响程序的性能。</p><p><strong>并发容器</strong>：在jdk1.5开始提供了多种并发容器用来改进同步容器的性能，并发容器是针对多个线程并发访问设计，常见的比如<strong>ConcurrentHashMap</strong>来代替同步的Map系列，<strong>CopyOnWriteArrayList</strong>来代替同步的List系列，<strong>CopyOnWriteArraySet</strong>来代替同步的Set系列，这些并发容器还提供了一些复合操作，比如“没有则添加”、替换、删除；</p><p>以ConcurrentHashMap为例，简单看下并发容器是如何优化的。在jdk8以前与hashtable做一个简单的对比图，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210728135306.jpg" alt="img"></p><p>hashtable底层是一个数组结构，数组每个元素又是一个链表结构，每次访问hashtable方法都会针对hashtable这个对象加锁，一次只能一个线程访问，而在<strong>ConcurrentHashMap</strong>把数据分成了多个Segment数组，在每个Segment中在保存一个HashEntry数组，HashEntry数组中元素又是一个链表结构，每次访问都是访问某个Segment元素下的数据，每次只针对对应的Segment加锁，也就是<strong>ConcurrentHashMap</strong>下有多少个Segment那么他就最多支持同时多少个线程访问。</p><p>在jdk8对<strong>ConcurrentHashMap</strong>进一步进行了优化，它的真正结构已经和hashmap差不多了，而且是针对每个node进行加锁，可以支持更高的并发，底层数组有多长就最多支持多大的并发。同时<strong>ConcurrentHashMap</strong>还支持了一些复合操作，比如<code>putIfAbsent</code>、<code>remove(Object key, Object value)</code>（存在才删除）这类的更加安全的方法。</p><p>Vector与Hashtable这些类被逐渐淘汰主要是因为历史发展原因，java发展的早期只考虑到多线程的安全问题，所以实现了一堆同步容器；当多线程、高并发越来越多，同步容器的性能影响了整体性能，所以才有了并发容器的发展；由于更加优化的容器的出现，早期的容器才被逐渐替代并被建议弃用。而JDK要保持向下兼容，避免老旧项目出现问题，所以会有很多该淘汰的方法还保留着，只是不推荐使用！</p><p><strong>参考：</strong><a href="https://zhuanlan.zhihu.com/p/149244430">https://zhuanlan.zhihu.com/p/149244430</a></p><hr><h4 id="Stack作为Vector的一个子类，应该用什么代替呢？"><a href="#Stack作为Vector的一个子类，应该用什么代替呢？" class="headerlink" title="Stack作为Vector的一个子类，应该用什么代替呢？"></a>Stack作为Vector的一个子类，应该用什么代替呢？</h4><p>Java堆栈<code>Stack</code>类已经过时，Java官方推荐使用<code>Deque</code>替代<code>Stack</code>使用。</p><p><code>Deque</code>是一个双端队列接口，继承自<code>Queue</code>接口，<code>Deque</code>的实现类是<code>LinkedList</code>、<code>ArrayDeque</code>、<code>LinkedBlockingDeque</code>，其中<code>LinkedList</code>是最常用的。(<code>LinkedList</code>是<code>Deque</code>和<code>List</code>两个的接口实现类)</p></blockquote><h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set是一种不包含重复的元素的Collection，即对Set中任意的两个元素<code>element1</code>和<code>element2</code>都有<code>elementl.equals(element2)= false</code>。Set最多有一个null元素。</p><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>HashSet底层数据结构采用哈希表实现，元素无序且唯一，线程不安全，效率高，可以存储null元素，元素的唯一性是靠所存储元素类型是否重写<code>hashCode()</code>和<code>equals()</code>方法来保证的，如果没有重写这两个方法，则无法保证元素的唯一性。</p><p><strong><code>hashCode()</code>:</strong> 属性相同的对象返回值必须相同, 属性不同的返回值尽量不同(提高效率)；</p><p><strong><code>equals()</code>:</strong> 属性相同返回true, 属性不同返回false,返回false的时候存储。</p><p>HashSet默认构造函数是构建一个初始容量为16，负载因子为0.75 的HashMap。HashSet是通过组合模式，使用HashMap的key是不重复的来实现HashSet中的元素是不重复的，遍历时为该map对象的keySet()即map的key集合。</p><blockquote><p><strong>问题</strong>：</p><h4 id="HashSet原理是什么？"><a href="#HashSet原理是什么？" class="headerlink" title="HashSet原理是什么？"></a>HashSet原理是什么？</h4><p>HashSet封装了一个 HashMap 对象来存储所有的集合元素，所有放入 HashSet 中的集合元素实际上由 HashMap 的 key 来保存，而 HashMap 的 value 则存储了一个 PRESENT，它是一个静态的 Object 对象。</p><p>HashSet在存元素时，会调用对象的hashCode方法计算出存储位置，然后和该位置上所有的元素进行equals比较，如果该位置没有其他元素或者比较的结果都为false就存进去，否则就不存。这样的原理注定了元素是按照哈希值来找存储位置，所有无序，而且可以保证无重复元素。</p><h4 id="hashset存储的PRESENT的作用是什么？"><a href="#hashset存储的PRESENT的作用是什么？" class="headerlink" title="hashset存储的PRESENT的作用是什么？"></a>hashset存储的PRESENT的作用是什么？</h4><p>HashSet有一个全局唯一的PRESENT指向的Object对象，add的时候使用其作为map的value。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Dummy value to associate with an Object in the backing Map</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object PRESENT = <span class="hljs-keyword">new</span> Object();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-keyword">null</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> map.remove(o)==PRESENT;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用PRESENT的两个方法的返回值都是是boolean。</p><p>map.put和remove方法的处理逻辑均是：key有关联的值则返回对应的值，否则返回null。</p><p>以add为例，若当前无键值为<code>key</code>的键，则map.put返回null，<code>null==null</code>返回true；若已存在键值为<code>key</code>的键，则map.put返回PRESENT，<code>PRESENT!=null</code>返回false。可见使用PRESENT可以对key是否存在作出区分。</p><p>如果用null来代替PRESENT则无论目标键是否存在都会返回null，<code>null==null</code>永远返回true，也就无法区分key在HashSet是否存在。</p><p><strong>参考</strong>：<a href="https://blog.csdn.net/fu250/article/details/106415918">https://blog.csdn.net/fu250/article/details/106415918</a></p><hr><h4 id="HashSet如何排序？"><a href="#HashSet如何排序？" class="headerlink" title="HashSet如何排序？"></a>HashSet如何排序？</h4><p>HashSet是无序的，如果一定需要对其中的元素进行排序可以转换为其他结构再进行排序。</p><p>将HashSet转换为List，然后使用Collections.sort()进行排序；<br>将将Hashset转换为TreeSet。</p></blockquote><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><p>LinkedHashSet是HashSet的子类。</p><p>LinkedHashSet内部使用的是LinkHashMap，具有可预知迭代顺序的 Set 接口的哈希表和链接列表实现，即遍历序和插入序是一致的。</p><p>LinkedHashSet默认构造函数是构建一个初始容量为16，负载因子为0.75 的LinkHashMap。</p><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>TreeSet底层数据结构采用红黑树来实现，元素唯一且已经排好序；唯一性同样需要重写hashCode和equals()方法，二叉树结构保证了元素的有序性。</p><p>TreeSet是用来排序的, 可以指定一个顺序, 对象存入之后会按照指定的顺序排列。</p><p>根据构造方法不同，分为自然排序（无参构造）和比较器排序（有参构造）。</p><p>**自然顺序(Comparable)**：自然排序要求元素必须实现Compareable接口，并重写里面的compareTo()方法，元素通过比较返回的int值来判断排序序列，返回0说明两个对象相同，不需要存储；</p><p>**比较器顺序(Comparator)**：比较器排需要在TreeSet初始化是时候传入一个实现Comparator接口的比较器对象，或者采用匿名内部类的方式new一个Comparator对象，重写里面的compare()方法；</p><h3 id="CopyOnWriteArraySet"><a href="#CopyOnWriteArraySet" class="headerlink" title="CopyOnWriteArraySet"></a>CopyOnWriteArraySet</h3><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><h3 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h3><p>基于优先级堆的无界优先级queue (<strong>优先级队列</strong>）。</p><p>优先级队列逻辑上使用堆结构（完全二叉树）实现，物理上使用动态数组实现，并非像TreeMap一样完全有序，但是如果按照指定方式出队，结果可以是有序的。</p><p>优先级队列的元素根据它们默认的自然排序（natural ordering ），或由一个Comparator在队列实例化的时候排序，这取决于所使用的构造方法。</p><p>优先队列不允许空值，而且不支持non-comparable（不可比较）的对象，比如用户自定义的类（不支持可比较的原因是因为在添加的时候会判断是否有Comparator，如果没有，会获取入参的Comparable，但是如果在构造的时候传入一个Comparator就可以）。优先队列要求使用Java Comparable和Comparator接口给对象排序，并且在排序时会按照优先级处理其中的元素。优先队列的大小是不受限制的，但在创建时可以指定初始大小。当我们向优先队列增加元素的时候，队列大小会自动增加。</p><h3 id="ArrayDeque"><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a>ArrayDeque</h3><p>ArrayDeque是Deque的实现类，是<strong>数组双端队列</strong>。</p><p>Deque接口继承自Queue接口，其含义是”double ended queue”，即双端队列，它既可以当作栈使用(效率高于Stack)，也可以当作队列使用(效率高于LinkedList)。</p><p>ArrayDeque不支持null值，不支持随机访问和随机插入数据</p><p>ArrayDeque底层通过数组实现，为了满足可以同时在数组两端插入或删除元素的需求，该数组还必须是循环的，即<strong>循环数组（circular array）</strong>，也就是说数组的任何一点都可能被看作起点或者终点。ArrayDeque用两个int值head和tail来表示头部和尾部。需要注意的是tail并不是尾部元素的索引，而是尾部元素的下一位，即下一个将要被加入的元素的索引。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//用数组存储元素</span><br><span class="hljs-comment">//给element数组使用transient修饰，原因和ArrayList一样，就是防止扩容后网络传输没用的数据影响效率。</span><br><span class="hljs-keyword">transient</span> Object[] elements; <span class="hljs-comment">// non-private to simplify nested class access</span><br><span class="hljs-comment">//头部元素的索引</span><br><span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> head;<br><span class="hljs-comment">//尾部下一个将要被加入的元素的索引</span><br><span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> tail;<br><span class="hljs-comment">//最小容量，必须为2的幂次方</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MIN_INITIAL_CAPACITY = <span class="hljs-number">8</span>;<br></code></pre></td></tr></table></figure><p>ArrayDeque有三个构造函数来初始化，除了无参的构造函数使用了默认容量，其它两个构造函数会通过<code>allocateElements</code>来计算初始容量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayDeque</span><span class="hljs-params">()</span> </span>&#123;  <br>    elements = (E[]) <span class="hljs-keyword">new</span> Object[<span class="hljs-number">16</span>]; <span class="hljs-comment">// 默认的数组长度大小  </span><br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayDeque</span><span class="hljs-params">(<span class="hljs-keyword">int</span> numElements)</span> </span>&#123;  <br>    allocateElements(numElements); <span class="hljs-comment">// 需要的数组长度大小  </span><br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayDeque</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;  <br>    allocateElements(c.size()); <span class="hljs-comment">// 根据集合来分配数组大小  </span><br>    addAll(c); <span class="hljs-comment">// 把集合中元素放到数组中  </span><br>&#125;  <br></code></pre></td></tr></table></figure><p>ArrayDeque对数组的大小(即队列的容量)有特殊的要求，必须是 2^n。</p><p>从<code>allocateElements</code>方法源码可以看出，对于一个小于<code>2^30</code>的值，经过五次右移和位或操作后，可以得到一个<code>2^k - 1</code>的值。最后再将这个值<code>+1</code>，得到<code>2^k</code>。通过这个方法，可以将一个任意的初始值转化为<code>2^n</code>的值，不过有一点不足在于，如果本身传进来的值就是<code>2^n</code>的值，那么经过转化会变成<code>2^(n+1)</code>，所以我们在不用刻意去传入<code>2^n</code>的值。还有一点在于，如果传入的值大于等于<code>2^30</code>，那么经过转化会变成负值，即<code>&lt; 0</code>，此时会把初始值设置为<code>2^30</code>，即最大的容量只有<code>2^30</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">allocateElements</span><span class="hljs-params">(<span class="hljs-keyword">int</span> numElements)</span> </span>&#123;  <br>    <span class="hljs-keyword">int</span> initialCapacity = MIN_INITIAL_CAPACITY;  <br>    <span class="hljs-comment">// 找到大于需要长度的最小的2的幂整数。  </span><br>    <span class="hljs-comment">// Tests &quot;&lt;=&quot; because arrays aren&#x27;t kept full.  </span><br>    <span class="hljs-keyword">if</span> (numElements &gt;= initialCapacity) &#123;  <br>        initialCapacity = numElements;  <br>        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="hljs-number">1</span>);  <br>        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="hljs-number">2</span>);  <br>        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="hljs-number">4</span>);  <br>        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="hljs-number">8</span>);  <br>        initialCapacity |= (initialCapacity &gt;&gt;&gt; <span class="hljs-number">16</span>);  <br>        initialCapacity++;  <br>  <br>        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)   <span class="hljs-comment">// Too many elements, must back off  </span><br>            initialCapacity &gt;&gt;&gt;= <span class="hljs-number">1</span>;<span class="hljs-comment">// Good luck allocating 2 ^ 30 elements  </span><br>    &#125;  <br>    elements = (E[]) <span class="hljs-keyword">new</span> Object[initialCapacity];  <br>&#125;  <br></code></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在队头 添加元素</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addFirst</span><span class="hljs-params">(E e)</span> </span>&#123;<br><span class="hljs-comment">// 存入空数据时，抛出异常NullPointerException</span><br>    <span class="hljs-keyword">if</span> (e == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>    elements[head = (head - <span class="hljs-number">1</span>) &amp; (elements.length - <span class="hljs-number">1</span>)] = e;<br><span class="hljs-comment">// 空间不足</span><br>    <span class="hljs-keyword">if</span> (head == tail)<br>        doubleCapacity(); <span class="hljs-comment">// 扩容</span><br>&#125;<br><br><span class="hljs-comment">// 在队尾 添加元素</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addLast</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (e == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>    elements[tail] = e;<br>    <span class="hljs-keyword">if</span> ( (tail = (tail + <span class="hljs-number">1</span>) &amp; (elements.length - <span class="hljs-number">1</span>)) == head)<br>        doubleCapacity();<br>&#125;<br></code></pre></td></tr></table></figure><p>下标越界的处理解决起来非常简单，以队头为例，<code>head = (head - 1) &amp; (elements.length - 1)</code>，这段代码相当于取余，同时解决了head为负值的情况。因为elements.length必需是2的指数倍，elements - 1就是二进制低位全1，跟head - 1相与之后就起到了取模的作用，如果head - 1为负数（其实只可能是-1），则相当于对其取相对于elements.length的补码。</p><p><strong>ArrayDeque对数据的操作</strong></p><table><thead><tr><th>Queue 方法</th><th>等效的Deque方法</th><th>说明</th></tr></thead><tbody><tr><td>add(e)</td><td>addLast(e)</td><td>向队尾插入元素，失败则抛出异常</td></tr><tr><td>offer(e)</td><td>offerLast(e)</td><td>向队尾插入元素，失败则返回false</td></tr><tr><td>remove()</td><td>removeFirst()</td><td>获取并删除队首元素，失败则抛出异常</td></tr><tr><td>poll()</td><td>pollFirst()</td><td>获取并删除队首元素，失败则返回null</td></tr><tr><td>element()</td><td>getFirst()</td><td>获取但不删除队首元素，失败则抛出异常</td></tr><tr><td>peek()</td><td>peekFirst()</td><td>获取但不删除队首元素，失败则返回null</td></tr></tbody></table><p>注：因为Deque是Queue的实现类，所以以上12个方法Deque都有。</p><table><thead><tr><th>Stack 方法</th><th>等效的Deque方法</th><th>说明</th></tr></thead><tbody><tr><td>push(e)</td><td>addFirst(e)</td><td>向栈顶插入元素，失败则抛出异常</td></tr><tr><td>无</td><td>offerFirst(e)</td><td>向栈顶插入元素，失败则返回false</td></tr><tr><td>pop()</td><td>removeFirst()</td><td>获取并删除栈顶元素，失败则抛出异常</td></tr><tr><td>无</td><td>pollFirst()</td><td>获取并删除栈顶元素，失败则返回null</td></tr><tr><td>peek()</td><td>peekFirst()</td><td>获取但不删除栈顶元素，失败则抛出异常</td></tr><tr><td>无</td><td>peekFirst()</td><td>获取但不删除栈顶元素，失败则返回null</td></tr></tbody></table><p>上面两个表共定义了Deque的12个接口。添加，删除，取值都有两套接口，它们功能相同，区别是对失败情况的处理不同。一套接口遇到失败就会抛出异常，另一套遇到失败会返回特殊值（false或null）。除非某种实现对容量有限制，大多数情况下，添加操作是不会失败的。 </p><h3 id="ConcurrentLinkedQueue"><a href="#ConcurrentLinkedQueue" class="headerlink" title="ConcurrentLinkedQueue"></a>ConcurrentLinkedQueue</h3><p>ConcurrentLinkedQueue是一个基于链接节点的无界线程安全队列，即<strong>基于链表的并发队列</strong>。</p><hr><p>以上为常见的非阻塞队列，下面给出常见的阻塞队列（BlockingQueue）。</p><h3 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h3><p>ArrayBlockingQueue是一个阻塞式的队列，即<strong>基于数组的并发阻塞队列</strong>，继承自AbstractBlockingQueue，间接的实现了Queue接口和Collection接口，同时基于 ReentrantLock 来实现线程安全，所以提供了 ReentrantLock 所能支持的公平性选择。</p><p>ArrayBlockingQueue 是一个有界队列，有界也就意味着，它不能够存储无限多数量的对象。所以在创建 ArrayBlockingQueue 时，必须要给它指定一个队列的大小。</p><p>ArrayBlockingQueue在生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此也意味着两者无法真正并行运行，这点尤其不同于 LinkedBlockingQueue；ArrayBlockingQueue和LinkedBlockingQueue间还有一个明显的不同之处在于，前者在插入或删除元素时不会产生或销毁任何额外的对象实例，而后者则会生成一个额外的Node对象。这在长时间内需要高效并发地处理大批量数据的系统中，其对于GC的影响还是存在一定的区别。而在创建ArrayBlockingQueue时，还可以控制对象的内部锁是否采用公平锁，默认采用非公平锁。</p><p><strong>构造方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接收一个整型的参数，这个整型参数指的是队列的长度</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayBlockingQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>(capacity, <span class="hljs-keyword">false</span>);<br>&#125;<br><br><span class="hljs-comment">//接收两个参数，队列的长度，boolean类型的参数是作为可重入锁的参数进行初始化，规定可重入锁是公平还是不公平，默认为false，另外初始化了notEmpty、notFull两个信号量。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayBlockingQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity, <span class="hljs-keyword">boolean</span> fair)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (capacity &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    <span class="hljs-keyword">this</span>.items = <span class="hljs-keyword">new</span> Object[capacity];<br>    lock = <span class="hljs-keyword">new</span> ReentrantLock(fair);<br>    notEmpty = lock.newCondition();<br>    notFull =  lock.newCondition();<br>&#125;<br><br><span class="hljs-comment">//接收两三个参数，第一个整型，第二个boolean类型，第三个集合类型，此构造方法不常用</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayBlockingQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity, <span class="hljs-keyword">boolean</span> fair,</span></span><br><span class="hljs-params"><span class="hljs-function">                              Collection&lt;? extends E&gt; c)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>(capacity, fair);<br><br>    <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">this</span>.lock;<br>    lock.lock(); <span class="hljs-comment">// Lock only for visibility, not mutual exclusion</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (E e : c) &#123;<br>                checkNotNull(e);<br>                items[i++] = e;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>        &#125;<br>        count = i;<br>        putIndex = (i == capacity) ? <span class="hljs-number">0</span> : i;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法</strong>：</p><table><thead><tr><th>方法</th><th>队列满时处理方式</th><th>说明</th></tr></thead><tbody><tr><td>add(E e)</td><td>抛出“Queue full”异常</td><td>把 e 加到 BlockingQueue 里</td></tr><tr><td>offer(E e)</td><td>返回false</td><td>如果可能的话，将 e 加到 BlockingQueue 里</td></tr><tr><td>put(E e)</td><td>线程阻塞，直到中断或被唤醒</td><td>把 e 加到 BlockingQueue 里，如果 BlockQueue 没有空间，则调用此方法的线程被阻断直到 BlockingQueue 里面有空间再继续</td></tr><tr><td>offer(E e, long timeout, TimeUnit unit)</td><td>在规定时间内重试，超过规定时间返回false</td><td>如果可能的话，将 e 加到 BlockingQueue 里，若不能立即加入，则可以等 time 参数规定的时间，失败时返回 null</td></tr></tbody></table><table><thead><tr><th>方法</th><th>队列空时处理方式</th><th>说明</th></tr></thead><tbody><tr><td>peek()</td><td>返回null</td><td>取走 BlockingQueue 里排在首位的对象</td></tr><tr><td>poll()</td><td>返回null</td><td>取走 BlockingQueue 里排在首位的对象</td></tr><tr><td>take()</td><td>线程阻塞，指定中断或被唤醒</td><td>取走 BlockingQueue 里排在首位的对象，若 BlockingQueue 为空，阻断进入等待状态直到 Blocking 有新的对象被加入为止</td></tr><tr><td>poll(long timeout, TimeUnit unit)</td><td>在规定时间内重试，超过规定时间返回null</td><td>取走 BlockingQueue 里排在首位的对象，若不能立即取出，则可以等 time 参数规定的时间，取不到时返回 null</td></tr></tbody></table><h3 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h3><p>LinkedBlockingQueue内部由<strong>单链表实现</strong>，只能从head取元素，从tail添加元素，即<strong>基于链表的FIFO阻塞队列</strong>。</p><p>LinkedBlockingQueue如果不指定容量，默认为<code>Integer.MAX_VALUE</code>，也就是无界队列。所以为了避免队列过大造成机器负载或者内存爆满的情况出现，在使用的时候建议手动传一个队列的大小。</p><p><strong>LinkedBlockingQueue是读写分离的</strong>，添加元素和获取元素都有独立的锁，读写操作可以并行执行。</p><p>当生产者往队列中放入一个数据时，队列会从生产者手中获取数据，并缓存在队列内部，而生产者立即返回；只有当队列缓冲区达到最大值缓存容量时 （LinkedBlockingQueue可以通过构造函数指定该值），才会阻塞生产者队列，直到消费者从队列中消费掉一份数据，生产者线程会被唤醒，反之对于消费者这端的处理也基于同样的原理。LinkedBlockingQueue之所以能够高效的处理并发数据，还因为其对于生产者端和消费者端分别采用了独立的锁来控制数据同步，这也意味着在高并发的情况下生产者和消费者可以并行地操作队列中的数据，以此来提高整个队列的并发性能。</p><p><strong>构造函数</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//默认构造，设置容量为Integer.MAX</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkedBlockingQueue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 默认大小为Integer.MAX_VALUE</span><br>    <span class="hljs-keyword">this</span>(Integer.MAX_VALUE);<br>&#125;<br><br><span class="hljs-comment">//设置指定容量，初始化了last和head节点，让它们都指向了一个元素为null的节点</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkedBlockingQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (capacity &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    <span class="hljs-keyword">this</span>.capacity = capacity;<br>    last = head = <span class="hljs-keyword">new</span> Node&lt;E&gt;(<span class="hljs-keyword">null</span>);<br>&#125;；  <br><br><span class="hljs-comment">//传入一个容器，如果调用该构造器，容量默认也是Integer.MAX_VALUE  </span><br><span class="hljs-comment">//使用了putLock来进行加锁，但是这里并不是为了多线程的竞争而加锁，只是为了放入的元素能立即对其他线程可见</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkedBlockingQueue</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>(Integer.MAX_VALUE);<br>    <span class="hljs-keyword">final</span> ReentrantLock putLock = <span class="hljs-keyword">this</span>.putLock;<br>    putLock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (E e : c) &#123;<br>            <span class="hljs-keyword">if</span> (e == <span class="hljs-keyword">null</span>)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();<br>            <span class="hljs-keyword">if</span> (n == capacity)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;Queue full&quot;</span>);<br>            enqueue(<span class="hljs-keyword">new</span> Node&lt;E&gt;(e));<br>            ++n;<br>        &#125;<br>        count.set(n);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        putLock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法</strong>：</p><table><thead><tr><th>方法</th><th>队列满时处理方式</th><th>说明</th></tr></thead><tbody><tr><td>put(E e)</td><td>阻塞等待</td><td>创建一个node节点放入队列中，如果放完以后队列还有剩余空间，继续唤醒下一个添加线程进行添加。如果放之前队列中没有元素，放完以后要唤醒消费线程进行消费。</td></tr><tr><td>offer(E e)</td><td>直接返回false</td><td>创建一个node节点放入队列中</td></tr><tr><td>offer(E e, long timeout, TimeUnit unit)</td><td>在规定时间内重试，超过规定时间返回false</td><td>对offer方法进行了阻塞超时处理，使用了Condition的awaitNanos来进行超时等待</td></tr></tbody></table><table><thead><tr><th>方法</th><th>队列空时处理方式</th><th>说明</th></tr></thead><tbody><tr><td>take()</td><td>阻塞等待</td><td>从队首获取并移除一个元素，如果消费后还有元素在队列中，继续唤醒下一个消费线程进行元素移除。</td></tr><tr><td>poll()</td><td>直接返回false</td><td>从队首获取并移除一个元素</td></tr><tr><td>poll(long timeout, TimeUnit unit)</td><td>在规定时间内重试，超过规定时间返回false</td><td>对poll方法进行了阻塞超时处理，，利用了Condition的awaitNanos方法来进行阻塞等待直至超时。</td></tr></tbody></table><h3 id="LinkedBlockingDeque"><a href="#LinkedBlockingDeque" class="headerlink" title="LinkedBlockingDeque"></a>LinkedBlockingDeque</h3><p>LinkedBlockingDeque是一个由链表结构组成的双向阻塞队列，即<strong>基于链表的FIFO双端阻塞队列</strong>，元素不允许为 null。双向队列因为多了一个操作队列的入口，在多线程同时入队时，也就减少了一半的竞争。一般多用于<strong>生产者消费者模式</strong>。</p><p>相比于其他阻塞队列，LinkedBlockingDeque多了addFirst、addLast、peekFirst、peekLast等方法，以first结尾的方法，表示插入、获取获移除双端队列的第一个元素。以last结尾的方法，表示插入、获取获移除双端队列的最后一个元素。</p><p>LinkedBlockingDeque是可选容量的，在初始化时可以设置容量防止其过度膨胀，如果不设置，默认容量大小为Integer.MAX_VALUE。</p><h3 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h3><p>DelayQueue是一个无界的BlockingQueue，DelayQueue的底层存储是一个PriorityQueue，即<strong>延时阻塞队列</strong>。DelayQueue的特点就是插入Queue中的数据可以按照自定义的delay时间进行排序，只有delay时间小于0的元素才能够被取出。</p><p>当生产者线程调用put之类的方法加入元素时，会触发Delayed接口中的compareTo方法进行排序，也就是说队列中元素的顺序是按到期时间排序的，而非它们进入队列的顺序。排在队列头部的元素是最早到期的，越往后到期时间赿晚。</p><p>DelayQueue是Leader-Followr模式的变种，消费者线程处于等待状态时，总是等待最先到期的元素，而不是长时间的等待。消费者线程尽量把时间花在处理任务上，最小化空等的时间，以提高线程的利用效率。</p><p>DelayQueue中的元素只有当其指定的延迟时间到了，才能够从队列中获取到该元素。DelayQueue是一个没有大小限制的队列，因此往队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。</p><h3 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h3><p>PriorityBlockingQueue是一个支持优先级的无界阻塞队列，即带<strong>优先级的无界阻塞队列</strong>。PriorityBlockingQueue线程不安全，队列的元素需要实现<strong>Comparable</strong>接口，完成队列的排序。</p><p>PriorityBlockingQueue是基于最小二叉堆实现，使用基于CAS实现的自旋锁来控制队列的动态扩容，保证了扩容操作不会阻塞take操作的执行。</p><p>PriorityBlockingQueue并不会阻塞数据生产者，而只会在没有可消费的数据时，阻塞数据的消费者。因此使用的时候要特别注意，生产者生产数据的速度绝对不能快于消费者消费数据的速度， 否则时间一长，会最终耗尽所有的可用堆内存空间。在实现PriorityBlockingQueue时，内部控制线程同步的锁采用的是公平锁。</p><h3 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h3><p>SynchronousQueue没有容量，是无缓冲等待队列，是一个不存储元素的阻塞队列，即<strong>并发同步阻塞队列</strong>。</p><p>SynchronousQueue类似于无中介的直接交易，有点像原始社会中的生产者和消费者，生产者拿着产品去集市销售给产品的最终消费者，而消费者必须亲自去 集市找到所要商品的直接生产者，如果一方没有找到合适的目标，那么对不起，大家都在集市等待。相对于有缓冲的BlockingQueue来说，少了一个中间经销商的环节（缓冲区），如果有经销商，生产者直接把产品批发给经销商，而无需在意经销商最终会将这些产品卖给那些消费者，由于经销商可以库存一部分商品，因此相对于直接交易模式，总体来说采用中间经销商的模式会吞吐量高一些（可以批量买卖）；但另一方面，又因为经销商的引入，使得产品从生产者到消费者 中间增加了额外的交易环节，单个产品的及时响应性能可能会降低。</p><p>可以认为SynchronousQueue是一个缓存值为1的阻塞队列，但是 isEmpty()方法永远返回是true，remainingCapacity() 方法永远返回是0，remove()和removeAll() 方法永远返回是false，iterator()方法永远返回空，peek()方法永远返回null。</p><p>声明一个SynchronousQueue有两种不同的方式：拥有公平（FIFO）和非公平(LIFO)策略。</p><p><strong>公平模式</strong>：SynchronousQueue会采用公平锁，并配合一个FIFO队列来阻塞多余的生产者和消费者，从而体系整体的公平策略；</p><p><strong>非公平模式</strong>（SynchronousQueue默认）：SynchronousQueue采用非公平锁，同时配合一个LIFO队列来管理多余的生产者和消费者，而后一种模式，如果生产者和消费者的处理速度有差距，则很容易出现饥渴的情况，即可能有某些生产者或者是消费者的数据永远都得不到处理。</p><p>使用SynchronousQueue阻塞队列一般要求maximumPoolSizes为无界(Integer.MAX_VALUE)，避免线程拒绝执行操作。</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map用于保存具有映射关系的数据，Map里保存着两组数据：key和value，它们都可以使任何引用类型的数据，但key不能重复。所以通过指定的key就可以取出对应的value。</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap在jdk1.7中底层是由<strong>数组（也有叫做“位桶”的）+链表</strong>实现；jdk1.8中底层是由<strong>数组+链表/红黑树</strong>实现。</p><p>HashMap可以存储null键和null值，线程不安全。在HashMap中，null可以作为键，这样的键只有一个，但可以有一个或多个键所对应的值为null。</p><p>当get()方法返回null值时，即可以表示HashMap中没有该key，也可以表示该key所对应的value为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个key，应该用<code>containsKey()</code>方法来判断。</p><p>而在Hashtable中，无论是key还是value都不能为null。</p><p>HashMap初始size为<strong>16</strong>，扩容：newsize = oldsize*2，size一定为<strong>2的n次幂</strong>。</p><h4 id="HashMap在jdk1-7中的实现"><a href="#HashMap在jdk1-7中的实现" class="headerlink" title="HashMap在jdk1.7中的实现:"></a><strong>HashMap在jdk1.7中的实现</strong>:</h4><ul><li><h5 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h5><p>HashMap 采用的数据结构 = <strong>数组（主） + 单链表（副）</strong>，这种数据结构也称为<strong>拉链法</strong>；</p></li><li><h5 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始容量 16（1左移4位）</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>;<br><span class="hljs-comment">//最大容量 2^30</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAXIMUM_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<br><span class="hljs-comment">//默认加载因子 0.75</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="hljs-number">0.75f</span>;<br><span class="hljs-comment">//实际加载因子</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> loadFactor;<br><span class="hljs-comment">//扩容阈值（threshold），当哈希表的大小size ≥ 扩容阈值threshold时，就会扩容哈希表（即扩充 HashMap 的容量） </span><br><span class="hljs-comment">//扩容：对哈希表进行 resize 操作（即重建内部数据结构），从而哈希表将具有原来两倍的桶数</span><br><span class="hljs-comment">//threshold 扩容阈值 = 容量 * 加载因子</span><br><span class="hljs-keyword">int</span> threshold;<br><span class="hljs-comment">//空的 Entry 类型数组，参数未知</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Entry&lt;?,?&gt;[] EMPTY_TABLE = &#123;&#125;;<br><span class="hljs-comment">//存储数据的 Entry 类型数组，长度是 2 的幂</span><br><span class="hljs-keyword">transient</span> Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;<br><span class="hljs-comment">//HashMap 存储的结点数量</span><br><span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> size;<br></code></pre></td></tr></table></figure><blockquote><p>HashMap默认的负载极限为0.75。负载极限的默认值（0.75）是时间和空间成本上的一种折中：</p><ul><li><code>较高</code>的负载极限可以降低hash表所占用的内存空间，但会增加查询数据的时间开销，而查询是最频繁的操作（HashMap的get()与put()方法都要用到查询）；</li><li><code>较低</code>的负载极限会提高查询数据的性能，但会增加hash表所占用的内存开销。</li></ul><p>因此在使用时可以根据实际情况来调整负载极限值。</p></blockquote></li><li><h5 id="Entry-结点"><a href="#Entry-结点" class="headerlink" title="Entry 结点"></a>Entry 结点</h5><p>Entry 类实现了 Map.Entry 接口（Map 接口中的 Entry 接口）；即，实现了 getKey() ， getValue() ， equals(Object o )和 hashCode() 等方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Map</span>.<span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; </span>&#123;<br>    <span class="hljs-comment">//键</span><br>    <span class="hljs-keyword">final</span> K key;<br>    <span class="hljs-comment">//值</span><br>    V value;<br>    <span class="hljs-comment">//后继，从而形成用来解决 hash 冲突的单链表</span><br>    Entry&lt;K,V&gt; next;<br>    <span class="hljs-comment">//每个结点的 hash 值</span><br>    <span class="hljs-keyword">int</span> hash;<br><span class="hljs-comment">/*构造方法</span><br><span class="hljs-comment"> 参数：哈希值 h ，键 k ，值 v，下一个结点 n </span><br><span class="hljs-comment">*/</span><br>    Entry(<span class="hljs-keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;<br>        value = v;<br>        next = n;<br>        key = k;<br>        hash = h;<br>    &#125;<br><span class="hljs-comment">//返回与此结点对应的键</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> K <span class="hljs-title">getKey</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br><span class="hljs-comment">//返回与此结点对应的值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> V <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><span class="hljs-comment">//存放值，并获取旧值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> V <span class="hljs-title">setValue</span><span class="hljs-params">(V newValue)</span> </span>&#123;<br>        V oldValue = value;<br>        value = newValue;<br>        <span class="hljs-keyword">return</span> oldValue;<br>    &#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">判断2个 Entry 结点是否相等，必须 key 和 value 都相等，才返回 true </span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Map.Entry))<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        Map.Entry e = (Map.Entry)o;<br>        Object k1 = getKey();<br>        Object k2 = e.getKey();<br>        <span class="hljs-keyword">if</span> (k1 == k2 || (k1 != <span class="hljs-keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;<br>            Object v1 = getValue();<br>            Object v2 = e.getValue();<br>            <span class="hljs-keyword">if</span> (v1 == v2 || (v1 != <span class="hljs-keyword">null</span> &amp;&amp; v1.equals(v2)))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><span class="hljs-comment">//计算 hash 值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());<br>    &#125;<br><span class="hljs-comment">//toString</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getKey() + <span class="hljs-string">&quot;=&quot;</span> + getValue();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h5 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//传入初始容量和加载因子</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity, <span class="hljs-keyword">float</span> loadFactor)</span> </span>&#123;<br>        <span class="hljs-comment">//小于 0 直接抛出异常</span><br>        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal initial capacity: &quot;</span> +<br>                                               initialCapacity);<br>        <span class="hljs-comment">//如果初始容量大于最大容量，则就直接赋值为最大容量</span><br>        <span class="hljs-keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)<br>            initialCapacity = MAXIMUM_CAPACITY;<br>        <span class="hljs-comment">//判断加载因子</span><br>        <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                               loadFactor);<br>        <span class="hljs-keyword">this</span>.loadFactor = loadFactor;<br>        threshold = initialCapacity;<br>        init();<br>    &#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);<br>    &#125;<br><span class="hljs-comment">//空参构造器，传入默认初始容量16和默认加载因子0.75</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);<br>    &#125;<br><span class="hljs-comment">//传入一个Map集合并转化为该HashMap</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(Math.max((<span class="hljs-keyword">int</span>) (m.size() / DEFAULT_LOAD_FACTOR) + <span class="hljs-number">1</span>,<br>                      DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);<br>        inflateTable(threshold);<br><br>        putAllForCreate(m);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><h5 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h5><p>该方法采用的是头插法，详细的看下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>&#123;<br>        <span class="hljs-comment">//如果哈希表未初始化，则使用构造器设置的阈值(即初始容量) 初始化数组table </span><br>        <span class="hljs-keyword">if</span> (table == EMPTY_TABLE) &#123;<br>            inflateTable(threshold);<br>        &#125;<br>        <span class="hljs-comment">//键为空时单独处理</span><br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> putForNullKey(value);<br>        <span class="hljs-comment">//计算key的 hash 值</span><br>        <span class="hljs-keyword">int</span> hash = hash(key);<br>        <span class="hljs-comment">//根据hash值和当前数组的长度确认 key 对应存放的数组 table 中位置</span><br>        <span class="hljs-keyword">int</span> i = indexFor(hash, table.length);<br>        <span class="hljs-comment">//找出是否已经存在键为 key 的键值对，如果存在的话就更新这个键值对的值为 value</span><br>        <span class="hljs-comment">//遍历链表，以该数组索引为 i 的元素为头结点的链表</span><br>        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="hljs-keyword">null</span>; e = e.next) &#123;<br>            Object k;<br>            <span class="hljs-comment">//若 key 对应的键值对已经存在，则就用新的 value 代替 旧的 value并返回旧的 value</span><br>            <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;<br>                V oldValue = e.value;<br>                e.value = value;<br>                e.recordAccess(<span class="hljs-keyword">this</span>);<br>                <span class="hljs-keyword">return</span> oldValue;<br>            &#125;<br>        &#125;<br>        modCount++;<br>        <span class="hljs-comment">//若键为 key 的键值对不存在，那么就插入该键值对</span><br>        addEntry(hash, key, value, i);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><h5 id="putForNullKey方法"><a href="#putForNullKey方法" class="headerlink" title="putForNullKey方法"></a>putForNullKey方法</h5><p>HashMap 允许插入键为 null 的键值对，但是因为<strong>无法调用 null 的 hashCode() 方法</strong>，也就无法确定该键值对的桶下标，只能<strong>通过强制指定一个桶下标来存放</strong>；<strong>HashMap 使用第 0 个桶存放键为 null 的键值对。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> V <span class="hljs-title">putForNullKey</span><span class="hljs-params">(V value)</span> </span>&#123;<br>        <span class="hljs-comment">//遍历以数组索引为 0 的链表，寻找是否存在 key == null 对应的键值对</span><br>        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="hljs-number">0</span>]; e != <span class="hljs-keyword">null</span>; e = e.next) &#123;<br>            <span class="hljs-comment">//若存在则用新 value 替换旧 value ，并返回旧的 value</span><br>            <span class="hljs-keyword">if</span> (e.key == <span class="hljs-keyword">null</span>) &#123;<br>                V oldValue = e.value;<br>                e.value = value;<br>                e.recordAccess(<span class="hljs-keyword">this</span>);<br>                <span class="hljs-keyword">return</span> oldValue;<br>            &#125;<br>        &#125;<br>        modCount++;<br>        <span class="hljs-comment">//否则，就直接插入数组 table[0] 的位置，key 值为空并且 hash 值为0</span><br>        addEntry(<span class="hljs-number">0</span>, <span class="hljs-keyword">null</span>, value, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><h5 id="addEntry-和-createEntry-方法"><a href="#addEntry-和-createEntry-方法" class="headerlink" title="addEntry 和 createEntry 方法"></a>addEntry 和 createEntry 方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addEntry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, <span class="hljs-keyword">int</span> bucketIndex)</span> </span>&#123;<br>        <span class="hljs-comment">//判断当前的数据个数，如果大于等于阈值（开始的时候为 16 * 0.75 = 12）</span><br>        <span class="hljs-comment">//并且数组table的索引为bucketIndex的位置不为空时，就会进行扩容</span><br>        <span class="hljs-keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="hljs-keyword">null</span> != table[bucketIndex])) &#123;<br>            <span class="hljs-comment">//扩容为原来的2倍</span><br>            resize(<span class="hljs-number">2</span> * table.length);<br>            <span class="hljs-comment">//获取传入的key键值的hash值</span><br>            hash = (<span class="hljs-keyword">null</span> != key) ? hash(key) : <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">//计算扩容后的存放位置</span><br>            bucketIndex = indexFor(hash, table.length);<br>        &#125;<br><span class="hljs-comment">//创建存储结点</span><br>        createEntry(hash, key, value, bucketIndex);<br>    &#125;<br> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createEntry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, <span class="hljs-keyword">int</span> bucketIndex)</span> </span>&#123;<br>        <span class="hljs-comment">//获取出当前数组的索引为bucketIndex的结点元素赋值给e</span><br>        Entry&lt;K,V&gt; e = table[bucketIndex];<br>        <span class="hljs-comment">//将上一步获取的结点e作为新插入结点的后继结点（创建Entry结点在上面的内容中）</span><br>        <span class="hljs-comment">//也就是头插法</span><br>        table[bucketIndex] = <span class="hljs-keyword">new</span> Entry&lt;&gt;(hash, key, value, e);<br>         <span class="hljs-comment">//长度+1</span><br>        size++;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>inflateTable 和 initHashSeedAsNeeded 方法分别是第一次添加元素时进行数组的初始化（阈值 threshold 开始时其实为16，经过该方法后变才成为 12 ）和 判断是否需要进行rehash（重新计算 hash 值，用于扩容）；</strong></p></li><li><h5 id="确定桶下标"><a href="#确定桶下标" class="headerlink" title="确定桶下标"></a>确定桶下标</h5><p>HashMap 中很多操作都会先确定一个键值对所在的桶下标；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据键值 key 计算 hash 值</span><br><span class="hljs-keyword">int</span> hash = hash(key);<br><span class="hljs-comment">//根据 hash 值，获得 key 对应存储的数组 table 中的位置</span><br><span class="hljs-keyword">int</span> i = indexFor(hash, table.length);<br></code></pre></td></tr></table></figure><p><strong>计算 hash 值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(Object k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> h = hashSeed;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != h &amp;&amp; k <span class="hljs-keyword">instanceof</span> String) &#123;<br>            <span class="hljs-keyword">return</span> sun.misc.Hashing.stringHash32((String) k);<br>        &#125;<br>        <span class="hljs-comment">//键值key使用hashCode()计算出值再与h进行异或运算</span><br>        h ^= k.hashCode();<br>        <span class="hljs-comment">//哈希码（hash值）操作  = 使用hashCode() + 4次位运算 + 5次异或运算（9次扰动）</span><br>        h ^= (h &gt;&gt;&gt; <span class="hljs-number">20</span>) ^ (h &gt;&gt;&gt; <span class="hljs-number">12</span>);<br>        <span class="hljs-keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="hljs-number">7</span>) ^ (h &gt;&gt;&gt; <span class="hljs-number">4</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>上述代码是求出键值 key 的 hashCode 值，然后会进行 4 次位运算和 5 次异或运算（该处理也被称为扰动处理）；最后会将运算的结果返回并参与确定桶下标的处理；</p><p><strong>确定下标</strong></p><p>确定桶下标的最后一步是将 key 的 hash 值对桶个数取模：hash%capacity，如果能保证 capacity 为 2 的 n 次方，那么就可以将这个操作转换为位运算，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexFor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> h, <span class="hljs-keyword">int</span> length)</span> </span>&#123;<br>    <span class="hljs-comment">//根据上一步计算出的数值</span><br>    <span class="hljs-keyword">return</span> h &amp; (length-<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>问题</strong>：</p><h4 id="为什么不直接采用经过-hashCode-处理的哈希码作为存储结点元素的数组-table-的下标位置？"><a href="#为什么不直接采用经过-hashCode-处理的哈希码作为存储结点元素的数组-table-的下标位置？" class="headerlink" title="为什么不直接采用经过 hashCode() 处理的哈希码作为存储结点元素的数组 table 的下标位置？"></a>为什么不直接采用经过 hashCode() 处理的哈希码作为存储结点元素的数组 table 的下标位置？</h4><p>容易出现哈希码（hash值）与数组大小范围不匹配的情况，即，计算出来的哈希码可能不在数组大小范围内，从而导致无法匹配存储位置；</p><p>为了解决“哈希码与数组大小范围不匹配”的问题，HashMap 给出了解决方案：<strong>哈希码 &amp;（数组长度-1）</strong>；</p><hr><h4 id="为什么采用哈希码和数组长度-1的与运算-amp-计算数组下标？"><a href="#为什么采用哈希码和数组长度-1的与运算-amp-计算数组下标？" class="headerlink" title="为什么采用哈希码和数组长度-1的与运算(&amp;) 计算数组下标？"></a>为什么采用哈希码和数组长度-1的与运算(&amp;) 计算数组下标？</h4><p><strong>保证了哈希码的均匀性（实现均匀分布），同时减少了哈希碰撞</strong>，如：</p><ul><li><p>数组长度 = 2 的幂 = 100…00 的形式（二进制），其首位是 1 ，最后一位是 0。</p><p>算出的下标值就会集中于某几位，这样增大了 hash 冲突的可能性；数组长度为偶数，最后一位是 0，&amp; 出结果肯定为偶数，这样浪费了一半空间，而且也增大了hash冲突的可能性；</p></li><li><p>数组长度-1 = 0111…11 的形式，其首位是 0 ，最后一位是 1。</p><p>这样 &amp; 出的结果，就会由 hash 值的后几位来决定，并且最后一位为 1 ，&amp; 出的结果是奇数还是偶数，由 hash 值的最后来决定；</p></li></ul><p><strong>使用 &amp; 运算可以提高运算效率</strong>。</p><ul><li><p>令 x = 1&lt;&lt;4，即 x 为 2 的 4 次方，它具有以下性质：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">x   : <span class="hljs-number">00010000</span><br>x-<span class="hljs-number">1</span> : <span class="hljs-number">00001111</span><br></code></pre></td></tr></table></figure></li><li><p>令一个数 y 与 x-1 做与运算，可以去除 y 位级表示的第 4 位以上数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">y       : <span class="hljs-number">10110010</span><br>x-<span class="hljs-number">1</span>     : <span class="hljs-number">00001111</span><br>y&amp;(x-<span class="hljs-number">1</span>) : <span class="hljs-number">00000010</span><br></code></pre></td></tr></table></figure></li><li><p>这个性质和 y 对 x 取模效果是一样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">y   : <span class="hljs-number">10110010</span><br>x   : <span class="hljs-number">00010000</span><br>y%x : <span class="hljs-number">00000010</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>位运算的代价比求模运算小的多</strong>，因此在进行这种计算时用位运算的话能带来更高的性能；</p><hr><h4 id="为什么在计算数组下标前，需对哈希码进行二次处理？"><a href="#为什么在计算数组下标前，需对哈希码进行二次处理？" class="headerlink" title="为什么在计算数组下标前，需对哈希码进行二次处理？"></a>为什么在计算数组下标前，需对哈希码进行二次处理？</h4><p>因为一般数组长度只会对应 hash 码的后几位，这样求出的结果也会易造成 hash 冲突，说白了就是，经过移位运算，得到的 hash 码更加均匀，提高了数组索引的随机性和均匀性；</p><hr><h4 id="数组长度为什么是-2-的幂（初始为-16）并且为什么要进行位与运算？"><a href="#数组长度为什么是-2-的幂（初始为-16）并且为什么要进行位与运算？" class="headerlink" title="数组长度为什么是 2 的幂（初始为 16）并且为什么要进行位与运算？"></a>数组长度为什么是 2 的幂（初始为 16）并且为什么要进行位与运算？</h4><p>长度为 2 的幂时，length-1 的值的所有二进制位都是 1 ，该情况下，函数 indexFor() 的结果等同于 hash 值后几位值，只要输入的 hash 值本身分布均匀，那么该 Hash 算法的结果就是均匀的，这就是为了 <strong>实现均匀分布</strong> 。<strong>使用位于运算是为了提高运算效率</strong>。</p></blockquote></li><li><h5 id="扩容以及环形链表问题"><a href="#扩容以及环形链表问题" class="headerlink" title="扩容以及环形链表问题"></a>扩容以及环形链表问题</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">resize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> newCapacity)</span> </span>&#123;<br>    <span class="hljs-comment">//保存原来的数组 table</span><br>    Entry[] oldTable = table;<br>    <span class="hljs-comment">//保存原来数组的长度</span><br>    <span class="hljs-keyword">int</span> oldCapacity = oldTable.length;<br>    <span class="hljs-comment">//如果长度等于最大容量那么阈值直接赋值为整数最大值</span><br>    <span class="hljs-keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;<br>        threshold = Integer.MAX_VALUE;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//否则，创建一个长度为newCapacity（2的容量）的数组 newTable</span><br>    Entry[] newTable = <span class="hljs-keyword">new</span> Entry[newCapacity];<br>    <span class="hljs-comment">//将原来数组上的数据（键值对）转移到新 table 中完成扩容</span><br>    transfer(newTable, initHashSeedAsNeeded(newCapacity));<br>    <span class="hljs-comment">//扩容后，新数组 table 引用到 HashMap 的table属性上</span><br>    table = newTable;<br>    <span class="hljs-comment">//确定新的阈值</span><br>    threshold = (<span class="hljs-keyword">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(Entry[] newTable, <span class="hljs-keyword">boolean</span> rehash)</span> </span>&#123;<br>    <span class="hljs-comment">//获取新的数组长度</span><br>    <span class="hljs-keyword">int</span> newCapacity = newTable.length;<br>    <span class="hljs-comment">//开始遍历原来的数组，将原数组中的键值对移动到新数组中</span><br>    <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        如果数组当前位置的元素 e 不为空时，就继续向下遍历</span><br><span class="hljs-comment">        也就是如果存在链表就系统链表中的元素e 也就是用来进行维护遍历的指针</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">null</span> != e) &#123;<br>            <span class="hljs-comment">//保存元素 e 的下一个结点</span><br>            Entry&lt;K,V&gt; next = e.next;<br>            <span class="hljs-comment">//判断是否对 hash 值重新进行计算（效率稍低）</span><br>            <span class="hljs-comment">//rehash的值是根据方法initHashSeedAsNeeded计算出的</span><br>            <span class="hljs-keyword">if</span> (rehash) &#123;<br>                e.hash = <span class="hljs-keyword">null</span> == e.key ? <span class="hljs-number">0</span> : hash(e.key);<br>            &#125;<br>            <span class="hljs-comment">//计算新的存放元素的数组索引 i</span><br>            <span class="hljs-keyword">int</span> i = indexFor(e.hash, newCapacity);<br>            <span class="hljs-comment">/*采用头插法进行移动：先将新数组的newTable[i] 赋值给e的后继（e.next指向newTable[i]</span><br><span class="hljs-comment">            第一次时newTable[i]为null）</span><br><span class="hljs-comment">            接着将元素e赋值给newTbale[i]（进行了元素的转移，因此新数组中的元素e的后继就为null）</span><br><span class="hljs-comment">            最后将next元素结点赋值给e（即，e指向了next的结点元素）</span><br><span class="hljs-comment">            */</span><br>            e.next = newTable[i];<br>            newTable[i] = e;<br>            e = next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在扩容时直接按原来的方法计算 hash 值并且计算扩容后需要插入的位置（不计算添加的元素数据），因此效率较低；而且扩容完成后链表中的元素结点是逆序状态（头插法导致）；<br><strong>在方法 transfer 中进行元素的移动时采用的是头插法，并且在多线程并发下可能会产生环形链表的问题；</strong></p><p>如下图所示，e其实也就是维护链表的指针，目前指向如下；</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210805170205.png" alt="img"></p><p>接着会计算新的 hash 值 int i = indexFor(e.hash, newCapacity) ，然后将newTable[i] 引用赋值给 e.next（目前e 的 next 为 7，被赋值后 e 的 next 就为 null）：</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210805170953.png" alt="img"></p><p>然后就会执行 newTable[i] = e 语句，也就是将 e 的引用赋值 给 newTable[i] ，接着就会执行 e = next ，将 next 的引用赋值给 e（e 指向了原表中的 7，但 e 的值也就是 3 已经赋值给了 newTable[i]了）：</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210805171043.png" alt="img"></p><p>接着就继续移动元素 7，当移动 7 完成后，next 就会指向 null ，然后再次循环时就不满足条件 while(null != e) 最终退出循环，移动完成；</p><blockquote><p><strong>问题</strong>：</p><h4 id="在多线程的情况下头插法是如何产生环形链表的呢？"><a href="#在多线程的情况下头插法是如何产生环形链表的呢？" class="headerlink" title="在多线程的情况下头插法是如何产生环形链表的呢？"></a>在多线程的情况下头插法是如何产生环形链表的呢？</h4><p>示例：两个线程 A 和 B ，都要执行 put 操作，即向表中添加元素，即线程 A 和线程 B 都会进行扩容（目前容量为 2 ，那么扩容后为 4）；</p><p>如果是线程 A 执行并且执行到 transfer 方法的 1 处（Entry&lt;K,V&gt; next = e.next）然后被 A 被挂起（每个线程有自己的方法栈，目前这个都在 A 线程的方法栈中保存着）：<br><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210805171323.png" alt="img"></p><p>A 被挂起后，接着 B 来继续执行，并且 B 线程将会全部执行完毕并写入内存中（A 和 B 两个线程有各自的方法栈，方法栈是私有的。<strong>但是注意！！这里的移动都是通过引用完成的而不是复制元素本身的值</strong>），B 线程全部执行完毕:</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210805171357.png" alt="img"></p><p>这时，A 线程的 e 指针还是指向元素 3 ，next 还是指向 7 ；</p><p>这时，A 再次进行移动元素，先处理元素 3 ， 将 3 放入线程 A 自己栈的新 table 中，但由于 B 线程已经修改了 7 的 next （ B 线程在移动完后，7 元素的 next ，也就是 7.next 指向的是元素 3 ，而不再是旧表中的 null 了（虽然方法栈都是私有的，但它们修改的是引用）），因此， 7.next 就指向 3 ：</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210805171447.png" alt="img"></p><p><strong>当 A 线程再次对 7 元素进行移动时，会执行代码 Entry&lt;K,V&gt; next = e.next</strong> ，那么会发现，这时的 next 指向的就不是 null 了，而是元素 3 ，接着继续执行代码 <strong>e.next = newTable[i]</strong> ，就会看见如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210805172533.png" alt="img"></p><p>然后，继续执行代码 newTable[i] = e 和 e = next （此时e.next = 7，也就是3.next = 7）：</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210805172618.png" alt="img"></p><p>现在 e 指向的是 3 ，然后进入下一轮 while 循环，会有 <strong>Entry&lt;K,V&gt; next = e.next</strong> ，那么，3.next = next = 7 ，就成为如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210805172652.png" alt="img"></p><p>最终，陷入死循环中。</p></blockquote></li><li><h5 id="get-方法"><a href="#get-方法" class="headerlink" title="get 方法"></a>get 方法</h5><p> get() 方法和put() 方法的原理几乎相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>        <span class="hljs-comment">//如果 key 值为空，就和put 类似</span><br>        <span class="hljs-comment">//以数组中的第 1 个元素（即table[0]）为头结点的链表去寻找对应 key == null 的键</span><br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> getForNullKey();<br>        <span class="hljs-comment">//否则就另作处理</span><br>        Entry&lt;K,V&gt; entry = getEntry(key);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span> == entry ? <span class="hljs-keyword">null</span> : entry.getValue();<br>    &#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> V <span class="hljs-title">getForNullKey</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//遍历以 table[0] 为头结点的链表，寻找 key==null 对应的值</span><br>        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="hljs-number">0</span>]; e != <span class="hljs-keyword">null</span>; e = e.next) &#123;<br>            <span class="hljs-keyword">if</span> (e.key == <span class="hljs-keyword">null</span>)<br>                <span class="hljs-keyword">return</span> e.value;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><span class="hljs-function"><span class="hljs-keyword">final</span> Entry&lt;K,V&gt; <span class="hljs-title">getEntry</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><span class="hljs-comment">//根据 key 值，通过 hash() 计算出对应的 hash 值</span><br>        <span class="hljs-keyword">int</span> hash = (key == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : hash(key);<br>        <span class="hljs-comment">//根据 has h值计算出对应的数组下标</span><br>        <span class="hljs-comment">//遍历以该数组下标的数组元素为头结点的链表所有结点，寻找该 key 对应的值</span><br>        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];<br>             e != <span class="hljs-keyword">null</span>;<br>             e = e.next) &#123;<br>            Object k;<br>            <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>                <span class="hljs-keyword">return</span> e;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h4 id="HashMap在jdk1-8中的实现"><a href="#HashMap在jdk1-8中的实现" class="headerlink" title="HashMap在jdk1.8中的实现:"></a><strong>HashMap在jdk1.8中的实现</strong>:</h4><ul><li><h5 id="存储结构-1"><a href="#存储结构-1" class="headerlink" title="存储结构"></a>存储结构</h5><p>HashMap1.8 采用的数据结构 = <strong>数组（主） + 单链表（副） + 红黑树</strong>；</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210805173249.png" alt="img"></p><p>这种结构，提高了 HashMap 的性能（解决了发生哈希冲突后，链表过长从而导致索引效率变慢的问题），时间复杂度从 O(n) 降低到了 O(logn)；</p></li><li><h5 id="基本属性-1"><a href="#基本属性-1" class="headerlink" title="基本属性"></a>基本属性</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始容量 16（1左移4位）</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>;<br><span class="hljs-comment">//最大容量 2^30</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAXIMUM_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<br><span class="hljs-comment">//默认加载因子 0.75</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="hljs-number">0.75f</span>;<br><span class="hljs-comment">//实际加载因子</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> loadFactor;<br><span class="hljs-comment">//扩容阈值（threshold），当哈希表的大小size ≥ 扩容阈值threshold时，就会扩容哈希表（即扩充 HashMap 的容量） </span><br><span class="hljs-comment">//扩容：对哈希表进行 resize 操作（即重建内部数据结构），从而哈希表将具有原来两倍的桶数</span><br><span class="hljs-comment">//threshold 扩容阈值 = 容量 * 加载因子</span><br><span class="hljs-keyword">int</span> threshold;<br><span class="hljs-comment">//存储数据的 Node 类型数组，长度是2的幂</span><br><span class="hljs-keyword">transient</span> Node&lt;K,V&gt;[] table;<br><span class="hljs-comment">//存储数据的 Entry 类型数组，长度是 2 的幂</span><br><span class="hljs-keyword">transient</span> Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;<br><span class="hljs-comment">//HashMap的大小，即 HashMap 中存储的键值对的数量</span><br><span class="hljs-keyword">transient</span> <span class="hljs-keyword">int</span> size;<br></code></pre></td></tr></table></figure><p><strong>关于红黑树的相关参数属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//桶的树化阈值：也就是链表转成红黑树的阈值，在存储数据时当链表长度大于该值时，则将链表转换成红黑树</span><br><span class="hljs-comment">//需要配合下面的属性使用</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> TREEIFY_THRESHOLD = <span class="hljs-number">8</span>;<br><span class="hljs-comment">//最小树形化容量阈值：当哈希表中的容量大于该值时，则将链表转换成红黑树</span><br><span class="hljs-comment">//否则，若桶内元素太多时，则会直接扩容，而不是转换为红黑树</span><br><span class="hljs-comment">//为了避免进行扩容，树形化选择的冲突，这个值不能小于 4 * TREEIFY_THRESHOLD</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="hljs-number">64</span>;<br><span class="hljs-comment">//桶的链表还原阈值：红黑树转为链表的阈值，当在扩容（resize()）时</span><br><span class="hljs-comment">//（此时HashMap的数据存储位置会重新计算），在重新计算存储位置后，</span><br><span class="hljs-comment">//当原有的红黑树内数量小于6时，则将红黑树转换成链表</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> UNTREEIFY_THRESHOLD = <span class="hljs-number">6</span>;<br></code></pre></td></tr></table></figure></li><li><h5 id="Node-结点"><a href="#Node-结点" class="headerlink" title="Node 结点"></a>Node 结点</h5><p> 1.7 是 Entry 结点，1.8 则是 Node 结点，其实相差不大，因为都是实现了 Map.Entry （Map 接口中的 Entry 接口）接口，即，实现了 getKey() ， getValue() ， equals(Object o )和 hashCode() 等方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Map</span>.<span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; </span>&#123;<br>        <span class="hljs-comment">//hash 值</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> hash;<br>        <span class="hljs-comment">//键</span><br>        <span class="hljs-keyword">final</span> K key;<br>        <span class="hljs-comment">//值</span><br>        V value;<br>        <span class="hljs-comment">//后继，链表下一个结点</span><br>        Node&lt;K,V&gt; next;<br><span class="hljs-comment">//全参构造器</span><br>        Node(<span class="hljs-keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;<br>            <span class="hljs-keyword">this</span>.hash = hash;<br>            <span class="hljs-keyword">this</span>.key = key;<br>            <span class="hljs-keyword">this</span>.value = value;<br>            <span class="hljs-keyword">this</span>.next = next;<br>        &#125;<br>        <span class="hljs-comment">//返回与此项对应的键</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> K <span class="hljs-title">getKey</span><span class="hljs-params">()</span>        </span>&#123; <span class="hljs-keyword">return</span> key; &#125;<br>        <span class="hljs-comment">//返回与此项对应的值</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> V <span class="hljs-title">getValue</span><span class="hljs-params">()</span>      </span>&#123; <span class="hljs-keyword">return</span> value; &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> key + <span class="hljs-string">&quot;=&quot;</span> + value; &#125;<br><span class="hljs-comment">//hash 值</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> V <span class="hljs-title">setValue</span><span class="hljs-params">(V newValue)</span> </span>&#123;<br>            V oldValue = value;<br>            value = newValue;<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br><span class="hljs-comment">//判断2个Entry是否相等，必须key和value都相等，才返回true  </span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">this</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> Map.Entry) &#123;<br>                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;<br>                <span class="hljs-keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;<br>                    Objects.equals(value, e.getValue()))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><h5 id="红黑树结点"><a href="#红黑树结点" class="headerlink" title="红黑树结点"></a>红黑树结点</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">LinkedHashMap</span>.<span class="hljs-title">Entry</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; </span>&#123;<br>        TreeNode&lt;K,V&gt; parent; <span class="hljs-comment">//父节点</span><br>        TreeNode&lt;K,V&gt; left;<span class="hljs-comment">//左子树</span><br>        TreeNode&lt;K,V&gt; right;<span class="hljs-comment">//右子树</span><br>        TreeNode&lt;K,V&gt; prev;<span class="hljs-comment">//删除辅助结点（删除后需要取消链接）</span><br>        <span class="hljs-keyword">boolean</span> red;<span class="hljs-comment">//颜色</span><br>        <span class="hljs-comment">//构造函数</span><br>        TreeNode(<span class="hljs-keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;<br>            <span class="hljs-keyword">super</span>(hash, key, val, next);<br>        &#125;<br>        <span class="hljs-comment">//返回当前节点的根节点</span><br>        <span class="hljs-function"><span class="hljs-keyword">final</span> TreeNode&lt;K,V&gt; <span class="hljs-title">root</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">for</span> (TreeNode&lt;K,V&gt; r = <span class="hljs-keyword">this</span>, p;;) &#123;<br>                <span class="hljs-keyword">if</span> ((p = r.parent) == <span class="hljs-keyword">null</span>)<br>                    <span class="hljs-keyword">return</span> r;<br>                r = p;<br>            &#125;<br>        &#125;<br><span class="hljs-comment">//     ......后面是红黑树的方法</span><br>    &#125;<br></code></pre></td></tr></table></figure></li><li><h5 id="构造器-1"><a href="#构造器-1" class="headerlink" title="构造器"></a>构造器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//和1.7区别不大</span><br><span class="hljs-comment">//无参构造器，加载因子默认为0.75</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;<br>    &#125;<br><span class="hljs-comment">//指定容量大小的构造器，但调用了双参的构造器，加载因子0.75</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);<br>    &#125;<br><span class="hljs-comment">//全参构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity, <span class="hljs-keyword">float</span> loadFactor)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal initial capacity: &quot;</span> +<br>                                               initialCapacity);<br>        <span class="hljs-comment">//HashMap 的最大容量只能是 MAXIMUM_CAPACITY，哪怕传入的数值大于最大容量，也按照最大容量赋值</span><br>        <span class="hljs-keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)<br>            initialCapacity = MAXIMUM_CAPACITY;<br>        <span class="hljs-comment">//加载因子必须大于0</span><br>        <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                               loadFactor);<br>        <span class="hljs-keyword">this</span>.loadFactor = loadFactor;<br>        <span class="hljs-comment">//设置扩容阈值和1.7类似，目前该阈值不是正真的阈值</span><br>        <span class="hljs-keyword">this</span>.threshold = tableSizeFor(initialCapacity);<br>    &#125;<br><span class="hljs-comment">//将传入的子Map中的全部元素逐个添加到HashMap中</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashMap</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;<br>        putMapEntries(m, <span class="hljs-keyword">false</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>和1.7类似，真正初始化（初始化存储数组table）是在第一次添加键值对的时候，即第一次调用 put() 时；</p></li><li><h5 id="put-方法"><a href="#put-方法" class="headerlink" title="put 方法"></a>put 方法</h5><p>1.8的 put 方法，采用尾插法，并且一定要注意扩容和转换红黑树的过程；该方法和 1.7 的区别就是，将头插法改为尾插法，并且在是否转换为红黑树做了判断；</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210806153123.jpg" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> </span>&#123;<br>        <span class="hljs-comment">//先对传入的key值进行hash值的计算，然后调用putVal方法</span><br>        <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>);<br>    &#125;<br><span class="hljs-function"><span class="hljs-keyword">final</span> V <span class="hljs-title">putVal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hash, K key, V value, <span class="hljs-keyword">boolean</span> onlyIfAbsent,</span></span><br><span class="hljs-params"><span class="hljs-function">                   <span class="hljs-keyword">boolean</span> evict)</span> </span>&#123;<br>        <span class="hljs-comment">//申明tab 和 p 用于操作原数组和结点</span><br>        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <br>        <span class="hljs-keyword">int</span> n, i;<br>        <span class="hljs-comment">//如果原数组是空或者原数组的长度等于0，那么通过resize()方法进行创建初始化</span><br>        <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-keyword">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>            <span class="hljs-comment">//获取到创建后数组的长度n</span><br>            n = (tab = resize()).length;<br>        <br>        <span class="hljs-comment">//通过key的hash值和 数组长度-1 计算出存储元素结点的数组中位置（和1.7一样）</span><br>        <span class="hljs-comment">//并且，如果该位置为空时，则直接创建元素结点赋值给该位置，后继元素结点为null</span><br>        <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-keyword">null</span>)<br>            tab[i] = newNode(hash, key, value, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//否则，说明该位置存在元素</span><br>            Node&lt;K,V&gt; e; K k;<br>            <span class="hljs-comment">//判断table[i]的元素的key是否与添加的key相同，若相同则直接用新value覆盖旧value</span><br>            <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>                ((k = p.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>                e = p;<br>            <span class="hljs-comment">//判断是否是红黑树的结点，如果是，那么就直接在树中添加或者更新键值对</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-keyword">this</span>, tab, hash, key, value);<br>            <span class="hljs-comment">//否则，就是链表，则在链表中添加或替换</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//遍历table[i]，并判断添加的key是否已经存在，和之前判断一样，hash和equals</span><br>                <span class="hljs-comment">//遍历完毕后仍无发现上述情况，则直接在链表尾部插入数据</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> binCount = <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                    <span class="hljs-comment">//如果遍历的下一个结点为空，那么直接插入</span><br>                    <span class="hljs-comment">//该方法是尾插法（与1.7不同）</span><br>                    <span class="hljs-comment">//将p的next赋值给e进行以下判断</span><br>                    <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-keyword">null</span>) &#123;<br>                        <span class="hljs-comment">//直接创建新结点连接在上一个结点的后继上</span><br>                        p.next = newNode(hash, key, value, <span class="hljs-keyword">null</span>);<br>                        <span class="hljs-comment">//如果插入结点后，链表的结点数大于等7（8-1，即大于8）时，则进行红黑树的转换</span><br>                        <span class="hljs-comment">//注意:不仅仅是链表大于8，并且会在treeifyBin方法中判断数组是否为空或数组长度是否小于64</span><br>                        <span class="hljs-comment">//如果小于64则进行扩容，并且不是直接转换为红黑树</span><br>                        <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                            treeifyBin(tab, hash);<br>                        <span class="hljs-comment">//完成后直接退出循环</span><br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-comment">//不退出循环时，则判断两个元素的key是否相同</span><br>                   <span class="hljs-comment">//若相同，则直接退出循环，进行下面替换的操作</span><br>                    <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                        ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-comment">//否则，让p指向下一个元素结点</span><br>                    p = e;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//接着上面的第二个break，如果e不为空，直接用新value覆盖旧value并且返回旧value</span><br>            <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>                V oldValue = e.value;<br>                <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-keyword">null</span>)<br>                    e.value = value;<br>                afterNodeAccess(e);<br>                <span class="hljs-keyword">return</span> oldValue;<br>            &#125;<br>        &#125;<br>        ++modCount;<br>        <span class="hljs-comment">//添加成功后，判断实际存在的键值对数量size是否大于扩容阈值threshold（第一次时为12）</span><br>        <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>            <span class="hljs-comment">//若大于，扩容</span><br>            resize();<br>        <span class="hljs-comment">//添加成功时会调用的方法（默认实现为空）</span><br>        afterNodeInsertion(evict);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><h5 id="hash-key-方法"><a href="#hash-key-方法" class="headerlink" title="hash(key) 方法"></a>hash(key) 方法</h5><p>1.8 计算 hash 的方法和 1.7 有点差别：1.7 做了9次扰动处理 = 4次位运算 + 5次异或运算；而 1.8 只做了2次扰动 = 1次位运算 + 1次异或运算；</p></li><li><h5 id="扩容方法"><a href="#扩容方法" class="headerlink" title="扩容方法"></a>扩容方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//该函数有两种使用情况：初始化哈希表或前数组容量过小，需要扩容</span><br><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>        <span class="hljs-comment">//获取原数组</span><br>        Node&lt;K,V&gt;[] oldTab = table;<br>        <span class="hljs-comment">//获取到原数组的容量oldCap</span><br>        <span class="hljs-keyword">int</span> oldCap = (oldTab == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br>        <span class="hljs-comment">//获取原扩容阈值</span><br>        <span class="hljs-keyword">int</span> oldThr = threshold;<br>        <span class="hljs-comment">//新的容量和阈值目前都为0</span><br>        <span class="hljs-keyword">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//如果原数组容量大于等于最大容量，那么不再扩容</span><br>            <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<br>                threshold = Integer.MAX_VALUE;<br>                <span class="hljs-keyword">return</span> oldTab;<br>            &#125;<br>            <span class="hljs-comment">//而没有超过最大容量，那么扩容为原来的2倍</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>                <span class="hljs-comment">//扩容为原2倍</span><br>                newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold</span><br>        &#125;<br>        <span class="hljs-comment">//经过上面的if，那么这步为初始化容量（使用有参构造器的初始化）</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span><br>            newCap = oldThr;<br>        <span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">// zero initial threshold signifies using defaults</span><br>            <span class="hljs-comment">//否则，使用的无参构造器</span><br>            <span class="hljs-comment">//那么，容量为16，阈值为12（0.75*16）</span><br>            newCap = DEFAULT_INITIAL_CAPACITY;<br>            newThr = (<span class="hljs-keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>        &#125;<br>        <span class="hljs-comment">//计算新的resize的上限</span><br>        <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">float</span> ft = (<span class="hljs-keyword">float</span>)newCap * loadFactor;<br>            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-keyword">float</span>)MAXIMUM_CAPACITY ?<br>                      (<span class="hljs-keyword">int</span>)ft : Integer.MAX_VALUE);<br>        &#125;<br>        threshold = newThr;<br>        <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>        <span class="hljs-comment">//使用新的容量床架一个新的数组</span><br>            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> Node[newCap];<br>        <span class="hljs-comment">//将新的数组引用赋值给table</span><br>        table = newTab;<br>        <span class="hljs-comment">//如果原数组不为空，那么就进行元素的移动</span><br>        <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//遍历原数组中的每个位置的元素</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; oldCap; ++j) &#123;<br>                Node&lt;K,V&gt; e;<br>                <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-comment">//如果该位置元素不为空，那么上一步获取元素接着置为空</span><br>                    oldTab[j] = <span class="hljs-keyword">null</span>;<br>                    <span class="hljs-comment">//判断该元素上是否有链表</span><br>                    <span class="hljs-keyword">if</span> (e.next == <span class="hljs-keyword">null</span>)<br>                        <span class="hljs-comment">//如果无链表，确定元素存放位置，</span><br><span class="hljs-comment">//扩容前的元素位置为 (oldCap - 1) &amp; e.hash ,所以这里的新的位置只有两种可能：1.位置不变，</span><br><span class="hljs-comment">//2.变为 原来的位置+oldCap，下面会详细介绍</span><br>                        newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;<br>                    <span class="hljs-comment">//判断是否是树结点，如果是则执行树的操作</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode)<br>                        ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-keyword">this</span>, newTab, j, oldCap);<br>                    <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// preserve order</span><br>                        <span class="hljs-comment">//否则，说明该元素上存在链表，那么进行元素的移动</span><br>                       <span class="hljs-comment">//根据变化的最高位的不同，也就是0或者1，将链表拆分开</span><br>                        Node&lt;K,V&gt; loHead = <span class="hljs-keyword">null</span>, loTail = <span class="hljs-keyword">null</span>;<br>                        Node&lt;K,V&gt; hiHead = <span class="hljs-keyword">null</span>, hiTail = <span class="hljs-keyword">null</span>;<br>                        Node&lt;K,V&gt; next;<br>                        <span class="hljs-keyword">do</span> &#123;<br>                            next = e.next;<br>                            <span class="hljs-comment">//最高位为0时，则将节点加入 loTail.next</span><br>                            <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123;<br>                                <span class="hljs-keyword">if</span> (loTail == <span class="hljs-keyword">null</span>)<br>                                    loHead = e;<br>                                <span class="hljs-keyword">else</span><br>                                    loTail.next = e;<br>                                loTail = e;<br>                            &#125;<br>                            <span class="hljs-comment">//最高位为1，则将节点加入 hiTail.next</span><br>                            <span class="hljs-keyword">else</span> &#123;<br>                                <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-keyword">null</span>)<br>                                    hiHead = e;<br>                                <span class="hljs-keyword">else</span><br>                                    hiTail.next = e;<br>                                hiTail = e;<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-keyword">null</span>);<br><span class="hljs-comment">//通过loHead和hiHead来保存链表的头结点，然后将两个头结点放到newTab[j]与newTab[j+oldCap]上面去 </span><br>                        <span class="hljs-keyword">if</span> (loTail != <span class="hljs-keyword">null</span>) &#123;<br>                            loTail.next = <span class="hljs-keyword">null</span>;<br>                            newTab[j] = loHead;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-keyword">null</span>) &#123;<br>                            hiTail.next = <span class="hljs-keyword">null</span>;<br>                            newTab[j + oldCap] = hiHead;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> newTab;<br>    &#125;<br></code></pre></td></tr></table></figure><p>扩容中重新计算 hash 值。</p><p>对于代码 newTab[e.hash &amp; (newCap - 1)] ，是计算扩容后的新的存放元素的索引位置，而扩容前则是 table[e.hash &amp; (oldCap - 1)] ，因此，这里就会出现两种情况，一是地址不变，二是变为 原位置+oldCap ；</p><ul><li><p>示例：</p><p>如果 oldCap = 16 ，那么二进制就是 0001 0000 ，oldCap -1 = 15 二进制是 0000 1111 ，</p><p>如果 e1.hash = 10 二进制是 0000 1010 ，e2.hash = 26 二进制是 0101 1010，<br>因此 e1 在扩容前的位置是： e1.hash &amp; oldCap -1 ，结果是：0000 1010</p><p>而 e2 在扩容前是： e2.hash &amp; oldCap-1 ，结果是 0000 1010 ，那么，e1 和 e2 在扩容前在同一个链表上；</p><p>而扩容后， newCap = 32 ，再次计算索引位置 e1.hash &amp; newCap - 1（0000 1010 &amp; 0001 1111）的结果是 0000 1010 ，和之前完全一致；</p><p>而 e2.hash &amp; newCap - 1（0101 1010 &amp; 0001 1111）结果是 0001 1010 ，该结果就是 扩容前位置 + oldCap，即 10 + 16 = 26；</p></li></ul><p>因此，这样的计算就是判断倒数第五位是 0 还是 1 ，<strong>如果是 0 ，那么位置不会改变，若为 1 ，则位置改变为 扩容前的位置 + 原来数组的容量；</strong></p><p>在 JDK1.7 中的话，是先进行扩容后进行插入的，就是当你发现你插入的桶是不是为空，如果不为空说明存在值就发生了hash冲突，那么就必须得扩容，但是如果不发生Hash冲突的话，说明当前桶是空的（后面并没有挂有链表），那就等到下一次发生Hash冲突的时候在进行扩容，但是当如果以后都没有发生hash冲突产生，那么就不会进行扩容了，减少了一次无用扩容，也减少了内存的使用;</p><blockquote><p><strong>问题</strong>：</p><h4 id="1-8-添加时采用尾插法不会出现环形链表的问题，那它就是线程安全的吗？"><a href="#1-8-添加时采用尾插法不会出现环形链表的问题，那它就是线程安全的吗？" class="headerlink" title="1.8 添加时采用尾插法不会出现环形链表的问题，那它就是线程安全的吗？"></a>1.8 添加时采用尾插法不会出现环形链表的问题，那它就是线程安全的吗？</h4><p>不是。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-comment">//----------------&gt; 1</span><br>            tab[i] = newNode(hash, key, value, <span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><p>注意 putVal 的标注的代码，如果没有 hash 冲突则会直接插入元素。如果线程 A 和线程 B 同时进行 put 操作，刚好这两条不同的数据hash 值一样，并且该位置数据为 null，所以这线程 A、B 都会进入该行代码中。假设一种情况，线程 A 进入后还未进行数据插入时挂起，而线程 B 正常执行，从而正常插入数据，然后线程 A 获取 CPU 时间片，此时线程 A 不用再进行 hash 判断了，问题出现：线程 A 会把线程 B 插入的数据给覆盖，发生线程不安全。</p><hr><h4 id="为什么在JDK1-8中进行对HashMap优化的时候，把链表转化为红黑树的阈值是-8-，而不是其它的值呢？"><a href="#为什么在JDK1-8中进行对HashMap优化的时候，把链表转化为红黑树的阈值是-8-，而不是其它的值呢？" class="headerlink" title="为什么在JDK1.8中进行对HashMap优化的时候，把链表转化为红黑树的阈值是 8 ，而不是其它的值呢？"></a>为什么在JDK1.8中进行对HashMap优化的时候，把链表转化为红黑树的阈值是 8 ，而不是其它的值呢？</h4><p><strong>当链表长度大于或等于阈值（默认为 8）的时候，如果同时还满足容量大于或等于 <code>MIN_TREEIFY_CAPACITY</code>（默认为 64）的要求，就会把链表转换为红黑树。</strong>同样，后续如果由于删除或者其他原因调整了大小，当红黑树的节点小于或等于 6 个以后，又会恢复为链表形态。</p><p>每次遍历一个链表，平均查找的时间复杂度是 O(n)，n 是链表的长度。红黑树有和链表不一样的查找性能，由于红黑树有自平衡的特点，可以防止不平衡情况的发生，所以可以始终将查找的时间复杂度控制在 O(log(n))。最初链表还不是很长，所以可能 O(n) 和 O(log(n)) 的区别不大，但是如果链表越来越长，那么这种区别便会有所体现。所以为了提升查找性能，需要把链表转化为红黑树的形式。</p><p>还要注意很重要的一点，单个 TreeNode 需要占用的空间大约是普通 Node 的两倍，所以只有当包含足够多的 Nodes 时才会转成 TreeNodes，而是否足够多就是由 TREEIFY_THRESHOLD 的值决定的。而当桶中节点数由于移除或者 resize 变少后，又会变回普通的链表的形式，以便节省空间。</p><p>默认是链表长度达到 8 就转成红黑树，而当长度降到 6 就转换回去，这体现了<strong>时间和空间平衡</strong>的思想，最开始使用链表的时候，空间占用是比较少的，而且由于链表短，所以查询时间也没有太大的问题。可是当链表越来越长，需要用红黑树的形式来保证查询的效率。</p><p>在理想情况下，链表长度符合<strong>泊松分布</strong>，各个长度的命中概率依次递减，当长度为 8 的时候，是最理想的值。</p><p>事实上，链表长度超过 8 就转为红黑树的设计，更多的是为了防止用户自己实现了不好的哈希算法时导致链表过长，从而导致查询效率低，而此时转为红黑树更多的是一种保底策略，用来保证极端情况下查询的效率。</p><p>通常如果 hash 算法正常的话，那么链表的长度也不会很长，那么红黑树也不会带来明显的查询时间上的优势，反而会增加空间负担。所以通常情况下，并没有必要转为红黑树，所以就选择了概率非常小，小于千万分之一概率，也就是长度为 8 的概率，把长度 8 作为转化的默认阈值。</p><p>如果开发中发现 HashMap 内部出现了红黑树的结构，那可能是我们的哈希算法出了问题，所以需要选用合适的hashCode方法，以便减少冲突。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Java中解释的原因</span><br>   * Because TreeNodes are about twice the size of regular nodes, we<br>     * use them only when bins contain enough nodes to warrant use<br>     * (see TREEIFY_THRESHOLD). <span class="hljs-function">And when they become too <span class="hljs-title">small</span> <span class="hljs-params">(due to</span></span><br><span class="hljs-params"><span class="hljs-function">     * removal or resizing)</span> they are converted back to plain bins.  In</span><br><span class="hljs-function">     * usages with well-distributed user hashCodes, tree bins are</span><br><span class="hljs-function">     * rarely used.  Ideally, under random hashCodes, the frequency of</span><br><span class="hljs-function">     * nodes in bins follows a Poisson distribution</span><br><span class="hljs-function">     * <span class="hljs-params">(http://en.wikipedia.org/wiki/Poisson_distribution)</span> with a</span><br><span class="hljs-function">     * parameter of about 0.5 on average <span class="hljs-keyword">for</span> the <span class="hljs-keyword">default</span> resizing</span><br><span class="hljs-function">     * threshold of 0.75, although with a large variance because of</span><br><span class="hljs-function">     * resizing granularity. Ignoring variance, the expected</span><br><span class="hljs-function">     * occurrences of list size k <span class="hljs-title">are</span> <span class="hljs-params">(exp(-<span class="hljs-number">0.5</span>)</span> * <span class="hljs-title">pow</span><span class="hljs-params">(<span class="hljs-number">0.5</span>, k)</span> /</span><br><span class="hljs-function">     * <span class="hljs-title">factorial</span><span class="hljs-params">(k)</span>). The first values are:</span><br><span class="hljs-function">     *</span><br><span class="hljs-function">     * 0:    0.60653066</span><br><span class="hljs-function">     * 1:    0.30326533</span><br><span class="hljs-function">     * 2:    0.07581633</span><br><span class="hljs-function">     * 3:    0.01263606</span><br><span class="hljs-function">     * 4:    0.00157952</span><br><span class="hljs-function">     * 5:    0.00015795</span><br><span class="hljs-function">     * 6:    0.00001316</span><br><span class="hljs-function">     * 7:    0.00000094</span><br><span class="hljs-function">     * 8:    0.00000006</span><br><span class="hljs-function">     * more: less than 1 in ten million</span><br></code></pre></td></tr></table></figure><hr><h4 id="为什么HashMap为什么要树化？"><a href="#为什么HashMap为什么要树化？" class="headerlink" title="为什么HashMap为什么要树化？"></a>为什么HashMap为什么要树化？</h4><p>本质上这是个安全问题。因为在元素放置过程中，如果一个对象哈希冲突，都被放置到同一个桶里，则会形成一个链表，我们知道链表查询是线性的，会严重影响存取的性能。而在现实世界，构造哈希冲突的数据并不是非常复杂的事情，恶意代码就可以利用这些数据大量与服务器端交互，导致服务器端CPU大量占用，这就构成了哈希碰撞拒绝服务攻击(DOS，Denial-Of-Service attack)。</p><p>用哈希碰撞发起拒绝服务攻击(DOS，Denial-Of-Service attack),常见的场景是攻击者可以事先构造大量相同哈希值的数据，然后以JSON数据的形式发送给服务器，服务器端在将其构建成为Java对象过程中，通常以Hashtable或HashMap等形式存储，哈希碰撞将导致哈希表发生严重退化，算法复杂度可能上升一个数据级，进而耗费大量CPU资源。</p><h4 id="为什么要使用红黑树而不使用AVL树？"><a href="#为什么要使用红黑树而不使用AVL树？" class="headerlink" title="为什么要使用红黑树而不使用AVL树？"></a>为什么要使用红黑树而不使用AVL树？</h4><p>红黑树与AVLl树，在检索的时候效率差不多，都是通过平衡来二分查找。但红黑树不像avl树一样追求绝对的平衡，红黑树允许局部很少的不完全平衡，这样对于效率影响不大，但省去了很多没有必要的调平衡操作，avl树调平衡有时候代价较大，所以效率不如红黑树。</p></blockquote></li></ul><blockquote><p>参考：<a href="https://blog.csdn.net/qq_43816409/article/details/106756664">https://blog.csdn.net/qq_43816409/article/details/106756664</a></p></blockquote><h4 id="Hashmap在jdk1-7和1-8的区别对比"><a href="#Hashmap在jdk1-7和1-8的区别对比" class="headerlink" title="Hashmap在jdk1.7和1.8的区别对比"></a><strong>Hashmap在jdk1.7和1.8的区别对比</strong></h4><table><thead><tr><th>比较</th><th>HashMap1.7</th><th>HashMap1.8</th></tr></thead><tbody><tr><td>数据结构</td><td>数组+链表</td><td>数组+链表+红黑树</td></tr><tr><td>节点</td><td>Entry</td><td>Node TreeNode</td></tr><tr><td>Hash算法</td><td>较为复杂</td><td>异或hash右移16位</td></tr><tr><td>对Null的处理</td><td>单独写一个putForNull()方法处理</td><td>作为以一个Hash值为0的普通节点处理</td></tr><tr><td>初始化</td><td>赋值给一个空数组，put时初始化</td><td>没有赋值，懒加载，put时初始化</td></tr><tr><td>扩容</td><td>插入前扩容</td><td>插入后，初始化，树化时扩容</td></tr><tr><td>节点插入</td><td>头插法</td><td>尾插法</td></tr></tbody></table><ul><li><h5 id="扩容流程对比图："><a href="#扩容流程对比图：" class="headerlink" title="扩容流程对比图："></a>扩容流程对比图：</h5><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210806145844" alt="img"></p></li></ul><blockquote><p><strong>问题</strong>：</p><h4 id="为什么-HashMap-中-String、Integer-这样的包装类适合作为-key-键？"><a href="#为什么-HashMap-中-String、Integer-这样的包装类适合作为-key-键？" class="headerlink" title="为什么 HashMap 中 String、Integer 这样的包装类适合作为 key 键？"></a>为什么 HashMap 中 String、Integer 这样的包装类适合作为 key 键？</h4><p>String、Integer等包装类的特性能够保证Hash值的不可更改性和计算准确性，能够有效的减少Hash碰撞的几率。</p><p>具体来说，String、Integer等包装类都是final修饰的类，具有不可变性，保证key的不可更改性，不会在存取hash值出现值不同的情况。此外，它们内部已重写了equals()、hashCode()等方法，遵守了HashMap内部的规范，不容易出现hash值的计算错误。</p></blockquote><blockquote><p>参考：</p><p><a href="https://blog.csdn.net/qq_36520235/article/details/82417949">https://blog.csdn.net/qq_36520235/article/details/82417949</a></p><p><a href="https://blog.csdn.net/weixin_44141495/article/details/108402128">https://blog.csdn.net/weixin_44141495/article/details/108402128</a></p></blockquote><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h3 id="使用for循环遍历效率高还是foreach（增强式循环）？"><a href="#使用for循环遍历效率高还是foreach（增强式循环）？" class="headerlink" title="使用for循环遍历效率高还是foreach（增强式循环）？"></a>使用for循环遍历效率高还是foreach（增强式循环）？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; integers.length; i++) &#123;<br>    System.out.println(intergers[i]);<br>&#125;<br><br><span class="hljs-keyword">for</span>(Integer in : integers)&#123;<br>    System.out.println(in);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>for适合循环ArrayLIst以及数组，当大批量的循环LinkedList时程序将会卡死，它适合循环数组结构，通过下标去遍历。</p></li><li><p>foreach适合循环LinkedList，使用双链表结构实现的应当使用foreach循环。</p></li></ul><h1 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h1><p>看源码的时候，我给自己抛出了一个问题。</p><ul><li>为什么dequeue里的h.next不指向null，而指向h？</li><li>为什么unlink里没有p.next = null或者p.next = p这样的操作？<br>这个疑问一直困扰着我，直到我看了迭代器的部分源码后才豁然开朗，下面放出部分迭代器的源码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node&lt;E&gt; current;<br><span class="hljs-keyword">private</span> Node&lt;E&gt; lastRet;<br><span class="hljs-keyword">private</span> E currentElement;<br><br>Itr() &#123;<br>    fullyLock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        current = head.next;<br>        <span class="hljs-keyword">if</span> (current != <span class="hljs-keyword">null</span>)<br>            currentElement = current.item;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        fullyUnlock();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> Node&lt;E&gt; <span class="hljs-title">nextNode</span><span class="hljs-params">(Node&lt;E&gt; p)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">// 解决了问题1</span><br>        Node&lt;E&gt; s = p.next;<br>        <span class="hljs-keyword">if</span> (s == p)<br>            <span class="hljs-keyword">return</span> head.next;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-keyword">null</span> || s.item != <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> s;<br>        p = s;<br>    &#125;<br>&#125;<br><span class="hljs-number">1234567891011121314151617181920212223242526</span><br></code></pre></td></tr></table></figure><p>迭代器的遍历分为两步，第一步加双锁把元素放入临时变量中，第二部遍历临时变量的元素。也就是说remove可能和迭代元素同时进行，很有可能remove的时候，有线程在进行迭代操作，而如果unlink中改变了p的next，很有可能在迭代的时候会造成错误，造成不一致问题。这个解决了问题2。</p><p>而问题1其实在nextNode方法中也能找到，为了正确遍历，nextNode使用了 s == p的判断，当下一个元素是自己本身时，返回head的下一个节点。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>java集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github建立图床</title>
    <link href="/2021/07/27/Github%E5%BB%BA%E7%AB%8B%E5%9B%BE%E5%BA%8A/"/>
    <url>/2021/07/27/Github%E5%BB%BA%E7%AB%8B%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用markdown写文章嵌入图片会导入图片路径，在线上无法读取到本地的图片，因此需要建立图床来解决这个问题。</p><p>个人采用开源<strong>PicGO</strong>结合<strong>jsDelivr</strong>的免费cdn基于Github仓库搭建免费的图床。</p><h2 id="下载PicGo"><a href="#下载PicGo" class="headerlink" title="下载PicGo"></a>下载PicGo</h2><p><a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>是一款用 <code>Electron-vue</code> 开发的软件，可以支持微博，七牛云，腾讯云COS，又拍云，GitHub，阿里云OSS，SM.MS，imgur 等8种常用图床，功能强大，简单易用。</p><h2 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a>配置GitHub</h2><p>首先需要建立一个图片仓库，名称随意，后续配置的时候名称保持一致即可。</p><p>新建 Personal access tokens， 名称自定义，自己用的话全部钩上。（其实权限只要 repo 即可）。</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210727144339.png" alt="img"></p><h2 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h2><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210727145441.PNG" alt="配置信息"></p><p><strong>仓库名称：</strong> <code>&lt;用户名&gt;/&lt;preject&gt;</code><br><strong>分支：</strong> <code>master</code><br><strong>token：</strong> 生成的 <code>Personal access tokens</code><br><strong>指定存储路径：</strong> <code>images/</code>  </p><blockquote><p>PicGo上传文件时，将自动在Github仓库中创建此文件夹。注意末尾要加 <strong>/</strong></p></blockquote><p><strong>自定义域名：</strong> <code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code></p><blockquote><p>如果设置了自定义域名，PicGo生成的访问链接，将是 <code>自定义域名+文件名</code> 的访问方式，这里使用 jsDelivr 加速访问。</p></blockquote><p>PicGO其他配置内容可以参照<a href="https://picgo.github.io/PicGo-Doc/zh/guide/">官方文档</a></p><h2 id="Typora的配置"><a href="#Typora的配置" class="headerlink" title="Typora的配置"></a>Typora的配置</h2><p>进入typra偏好设置-图像选项，如图配置PicGo路径即可。</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210727150312.png" alt="image-20210727150254524"></p><blockquote><p>参考：<a href="https://www.jianshu.com/p/3a62fc203d01">https://www.jianshu.com/p/3a62fc203d01</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>图床</category>
      
    </categories>
    
    
    <tags>
      
      <tag>method</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象的基本原则</title>
    <link href="/2021/07/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BA%94%E4%B8%AA%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/"/>
    <url>/2021/07/26/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BA%94%E4%B8%AA%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象的基本原则"><a href="#面向对象的基本原则" class="headerlink" title="面向对象的基本原则"></a>面向对象的基本原则</h1><p>在程序设计领域，<strong>SOLID</strong>（<strong>单一功能、开闭原则、里氏替换、接口隔离</strong>以及<strong>依赖反转</strong>）指代了<strong>面向对象编程</strong>和<strong>面向对象设计</strong>的五个基本原则。</p><blockquote><p>SOLID原则仅仅具备指导意义，不能不考虑需求环境生硬遵循，需要结合具体场景。</p></blockquote><blockquote><p>通常当一段代码破坏了一个SOLID原则时，它会打破一大堆。</p></blockquote><h2 id="单一职责原则SRP-Single-Responsibility-Principle"><a href="#单一职责原则SRP-Single-Responsibility-Principle" class="headerlink" title="单一职责原则SRP(Single Responsibility Principle)"></a>单一职责原则SRP(Single Responsibility Principle)</h2><p><strong>一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。</strong></p><p>从定义中可以看出在定义类的时候要将职责划分清楚， 不能让一个类负责干多个事情。换句话说就是一个类只有一个引起它变化的点。如果一个类负责干多个事情那么就会有多个引起它变化的原因。那么这个类就不稳定了，这个类就容易变化，因为如果干的事情越少变化的诱因就愈少，如果干的事情越多变化的诱因就愈多。</p><p>关于单一职责原则，<strong>重点是职责的划分！</strong>职责划分的粒度取决于需求的粒度，并不是在设计类或者函数一定要做到单一职责，这样也会带来类的数量会增多，代码复杂度提高。对成本和效率都会产生影响。</p><h2 id="开放封闭原则OCP-Open－Close-Principle"><a href="#开放封闭原则OCP-Open－Close-Principle" class="headerlink" title="开放封闭原则OCP(Open－Close Principle)"></a>开放封闭原则OCP(Open－Close Principle)</h2><p><strong>软件实体（如类、模块、函数等）应该对扩展开放，对修改封闭。</strong></p><p>需要注意对未发生的变化进行预设很容易踏入过渡设计的陷阱，而一旦需求开始发生变化，那它很可能会以相似的方式一变再变。此时就应该在代码循环开放封闭原则上多下功夫。</p><p>开放封闭原则是相对的，没有完全完美的开放。</p><blockquote><p>开放封闭原则是编写一个好程序的目标，其他设计原则都是达到这个目标的过程。</p><p>里氏替换原则<strong>基于抽象去编程，而不要基于具体。这样也就可以实现：对扩展（基于抽象）是开放的，对变更（基于具体）是禁止的。</strong></p></blockquote><h2 id="里氏替换原则-the-Liskov-Substitution-Principle-LSP"><a href="#里氏替换原则-the-Liskov-Substitution-Principle-LSP" class="headerlink" title="里氏替换原则(the Liskov Substitution Principle LSP)"></a>里氏替换原则(the Liskov Substitution Principle LSP)</h2><p><strong>子类应当可以替换父类并出现在父类能够出现的任何地方。</strong></p><p>里氏替换原则通俗的来讲就是：<strong>子类可以扩展父类的功能，但不能改变父类原有的功能。</strong></p><p>里氏替换原则有至少以下两种含义：</p><ul><li><p>里氏替换原则是针对继承而言的，如果继承是为了实现代码重用，也就是为了共享方法，那么共享的父类方法就应该保持不变，不能被子类重新定义。</p><p>子类只能通过新添加方法来扩展功能，父类和子类都可以实例化，而子类继承的方法和父类是一样的，父类调用方法的地方，子类也可以调用同一个继承得来的，逻辑和父类一致的方法，这时用子类对象将父类对象替换掉时，当然逻辑一致，相安无事。</p></li><li><p>如果继承的目的是为了多态，而多态的前提就是子类覆盖并重新定义父类的方法，为了符合LSP，我们应该将父类定义为抽象类，并定义抽象方法，让子类重新定义这些方法，当父类是抽象类时，父类就是不能实例化，所以也不存在可实例化的父类对象在程序里。也就不存在子类替换父类实例（根本不存在父类实例了）时逻辑不一致的可能。</p></li></ul><h3 id="多态与里氏替换原则"><a href="#多态与里氏替换原则" class="headerlink" title="多态与里氏替换原则"></a>多态与里氏替换原则</h3><p>里氏替换原则要求<strong>特殊性不可违背普遍性</strong>，这个违背是指<strong>子类修改父类</strong>。而<strong>多态是指子类本身就父类中的普遍性进行特殊化的继承，实际上并未修改父类</strong>。所以，两者不冲突，是一种补充关系。多态使得父类的普遍性能够在子类中进行特殊化继承。里氏代换原则要求继承关系必须符合普遍性与特殊性的规律。</p><blockquote><p>不符合 LSP 的最常见的情况是，父类和子类都是可实例化的非抽象类，且父类的方法被子类重新定义，这一类的实现继承会造成父类和子类间的强耦合，也就是实际上并不相关的属性和方法牵强附会在一起，不利于程序扩展和维护。</p><p><strong>符合 LSP 的方法：尽量不要从可实例化的父类中继承，而是要使用基于抽象类和接口的继承。</strong></p></blockquote><blockquote><p><strong>基于抽象去编程，而不要基于具体。这样也就可以实现：对扩展（基于抽象）是开放的，对变更（基于具体）是禁止的。</strong></p></blockquote><h2 id="接口分离原则-the-Interface-Segregation-Principle-ISP"><a href="#接口分离原则-the-Interface-Segregation-Principle-ISP" class="headerlink" title="接口分离原则(the Interface Segregation Principle ISP)"></a>接口分离原则(the Interface Segregation Principle ISP)</h2><p><strong>使用多个专门的接口比使用单一的总接口要好。不应该强行要求客户端依赖于它们不用的接口（接口属于客户，不属于它所在的类层次结构）。类之间的依赖应该建立在最小的接口上面。</strong></p><h4 id="接口隔离原则和单一职责原则"><a href="#接口隔离原则和单一职责原则" class="headerlink" title="接口隔离原则和单一职责原则"></a>接口隔离原则和单一职责原则</h4><p>从功能上来看，接口隔离和单一职责两个原则具有一定的相似性。</p><p>它们的区别在于观察角度或是侧重点不一样。单一职责是从模块、类或方法自身的角度来看的，接口隔离原则是从调用者的角度来看的。</p><blockquote><p>举个例子，有个聚合服务，为APP提供了一组相同标准的接口，但它们的功能不同，有些和商品相关，有些和用户相关，有些和订单相关。这看起来既不符合接口隔离原则，也不符合接口单一职责原则。其实，从APP的角度来看，这组接口是一个整体，多一个不行，缺一个不可，所以它是符合接口隔离原则的。从更粗粒度的服务层面来看，这个聚合服务本身只为APP服务，这也符合单一职责。</p></blockquote><h2 id="依赖倒置原则-the-Dependency-Inversion-Principle-DIP"><a href="#依赖倒置原则-the-Dependency-Inversion-Principle-DIP" class="headerlink" title="依赖倒置原则(the Dependency Inversion Principle DIP)"></a>依赖倒置原则(the Dependency Inversion Principle DIP)</h2><p><strong>上层模块不应该依赖下层模块，它们都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</strong></p><p>这个原则听起来很像是“针对接口编程，不针对现实编程”，但更强调“抽象”。</p><h4 id="在依赖倒置原则中的倒置指的是和一般OO设计的思考方式完全相反。"><a href="#在依赖倒置原则中的倒置指的是和一般OO设计的思考方式完全相反。" class="headerlink" title="在依赖倒置原则中的倒置指的是和一般OO设计的思考方式完全相反。"></a><strong>在依赖倒置原则中的倒置指的是和一般OO设计的思考方式完全相反。</strong></h4><p>举个例子，现在你需要实现一个比萨店，你第一件想到的事情是什么？我想到的是一个比萨店，里面有很多具体的比萨，如：芝士比萨、素食比萨、海鲜比萨……<br><strong>比萨店是上层模块，比萨是下层模块</strong>，如果把比萨店和它依赖的对象画成一张图，看起来是这样：</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210726201203.png" alt="正常依赖-上层依赖下层"></p><p>上图可以看出，先从顶端开始，然后往下到具体类，比萨店全都依赖这些具体类。</p><p>现在<strong>将依赖关系倒置</strong>，不从上层模块发散，而是从下层模块开始尝试进行抽象化。</p><p>显然，芝士比萨、素食比萨、海鲜比萨都是比萨，所以它们应该共享一个Pizza接口。抽象完成后回头重新思考如何设计比萨店。于是得到如下的依赖关系：</p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210726201600.png" alt="依赖倒置-上层下层均依赖抽象"></p><p>从两图的对比可以看出，依赖由最初的<strong>上层依赖下层</strong>，转变为<strong>二者依赖于抽象</strong>，在依赖关系上确实发生了<strong>倒置</strong>。</p><blockquote><p>参考：<a href="https://www.jianshu.com/p/c3ce6762257c">六大设计原则之依赖倒置原则（DIP）</a></p></blockquote><hr><h2 id="迪米特法则-Law-of-Demeter-LoD"><a href="#迪米特法则-Law-of-Demeter-LoD" class="headerlink" title="迪米特法则(Law of Demeter, LoD)"></a>迪米特法则(Law of Demeter, LoD)</h2><p><strong>一个对象应该对其他对象有最少的了解</strong>，所以迪米特法则又叫做最少知识原则（Least Knowledge Principle, LKP）。</p><p><strong>迪米特法则的意义在于降低类之间的耦合</strong>。由于每个对象尽量减少对其他对象的了解，因此，很容易使得系统的功能模块功能独立，相互之间不存在（或很少有）依赖关系。</p><p>迪米特法则还有一个英文解释是：<strong>talk only to your immediate friends（只和直接的朋友交流）</strong>。什么是朋友呢？每个对象都必然会与其他的对象有耦合关系，两个对象之间的耦合就会成为朋友关系。那么什么又是直接的朋友呢？<strong>出现在成员变量、方法的输入输出参数中的类就是直接的朋友</strong>。迪米特法则要求只和直接的朋友通信。</p><blockquote><p>只出现在方法体内部的类就不是直接的朋友，如果一个类和不是直接的朋友进行交流，就属于违反迪米特法则。</p></blockquote><hr><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><p>solid原则包括迪米特法则具备指导意义的程序设计原则，个人认为所有的原则中最核心的就是开放封闭原则，其他设计原则都是达到这个目标的过程。单一职能原则、接口分离原则包括迪米特法则都是为了实现高内聚、低耦合，如此就确定了职能划分清晰的不修改部分，实现<strong>对修改封闭</strong>；另一方面，里氏替换原则与依赖倒置原则都是对抽象的约束与规范，指明程序应基于抽象而非具体，实现<strong>对扩展开放</strong>。通过以上两方面的规范，最终达到开放封闭原则要求的<strong>对扩展开放，对修改封闭</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>面向对象</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象三大特性</title>
    <link href="/2021/07/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/"/>
    <url>/2021/07/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象三大特性"><a href="#面向对象三大特性" class="headerlink" title="面向对象三大特性"></a>面向对象三大特性</h1><h2 id="封装-Encapsulation"><a href="#封装-Encapsulation" class="headerlink" title="封装(Encapsulation)"></a>封装(Encapsulation)</h2><p>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问。因此在编写类时一般将成员变量私有化，外部类需要同getter和setter方法来查看和设置变量。</p><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><table><thead><tr><th>作用域，可见性</th><th>当前类</th><th>同一包</th><th>子类</th><th>其他包</th></tr></thead><tbody><tr><td>private</td><td>✔</td><td></td><td></td><td></td></tr><tr><td>default</td><td>✔</td><td>✔</td><td></td><td></td></tr><tr><td>protected</td><td>✔</td><td>✔</td><td>✔</td><td></td></tr><tr><td>public</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr></tbody></table><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>this关键字在类的方法定义中使用时代表<strong>当前对象的引用</strong>，this常用于处理函数参数名与成员变量重名的情况。</p><p>this可以看作一个变量，它的值指向当前对象的引用。</p><h3 id="内部类-Inner-Class"><a href="#内部类-Inner-Class" class="headerlink" title="内部类( Inner Class)"></a>内部类( Inner Class)</h3><p>内部类就是定义在另一个类中的类。与之对应，包含内部类的类被称为外部类。</p><p>内部类的作用：</p><ul><li><p>提供更好的封装，可以将内部类隐藏在外部类中，<strong>不允许同一包下的其他类访问</strong>；</p></li><li><p>完善了Java多继承机制，由于每一个内部类都可以独立的继承接口或类，所以无论外部类是否继承或实现了某个类或接口，对于内部类没有影响，如此一来可以间接实现多继承。</p></li><li><p>使用匿名内部类实现回调功能，在java中通常就是编写一个接口并实现这个接口，然后将这个接口的一个对象作以参数的形式传到另一个程序方法中， 然后通过接口调用方法，匿名内部类就可以很好的展现了这一种回调功能。</p></li><li><p>解决继承及实现接口出现同名方法的问题</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MyDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Demo</span> </span>&#123;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>如果接口与继承类中的方法同名则会难以区分，但如果使用内部类来实现接口就能很好区分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MyDemo</span> </span>&#123;<br>      <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">inner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Demo</span> </span>&#123;<br>          <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>              System.out.println(<span class="hljs-string">&quot;接口的test方法&quot;</span>);<br>          &#125;<br>      &#125;<br>      <br>      <span class="hljs-function"><span class="hljs-keyword">public</span> Demo <span class="hljs-title">getIn</span><span class="hljs-params">()</span> </span>&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> inner();<br>      &#125;<br>      <br>      <br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>          <span class="hljs-comment">//调用接口而来的test()方法</span><br>          DemoTest dt = <span class="hljs-keyword">new</span> DemoTest();<br>          Demo d = dt.getIn();<br>          d.test();<br>          <br>          <span class="hljs-comment">//调用继承而来的test()方法</span><br>          dt.test();<br>      &#125;<br>  &#125;<br>  <br>  <span class="hljs-comment">//运行结果</span><br>  接口的test方法<br>  父类的test方法<br></code></pre></td></tr></table></figure></blockquote></li></ul><p>内部类可以分为四种:<strong>成员内部类、局部内部类、匿名内部类、静态内部类</strong>。</p><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span></span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成员内部类就是位于外部类成员位置的类。成员内部类可以无条件访问外部类的属性和方法，包括<strong>私有数据</strong>；</p><blockquote><p>如果成员内部类的属性或者方法与外部类的同名，将导致外部类的这些属性与方法在内部类被隐藏，也可按照该格式调用<code>外部类.this.属性/方法</code>。</p></blockquote><p>成员内部类是寄生于外部类，创建内部类对象就必须先创造外部类对象。之后创建内部类有两种方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*方式1创建成员内部类对象*/</span><br>C c = <span class="hljs-keyword">new</span> C();<br>C.D d = c.<span class="hljs-function">new <span class="hljs-title">D</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">/*方式2创建成员内部类对象*/</span><br>C.D d1 = c.getClassD();<br></code></pre></td></tr></table></figure><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><p>局部内部类就是定义在一个方法或者一个作用域里面的类。</p><p>它和成员内部类的区别在于局部内部类的访问权限仅限于方法或作用域内。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">K</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">J</span></span>&#123;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>局部内部类就像局部变量一样，<strong>前面不能加访问修饰符以及static修饰符</strong>。</p></blockquote><p><strong>局部内部类访问局部变量必须加final修饰</strong>：因为<strong>局部变量是随着方法的调用而调用</strong>，<strong>使用完毕就消失</strong>，<strong>而堆内存的数据并不会立即消失</strong>。所以，堆内存还是用该变量，而该变量已经没有了。<strong>为了让该值还存在，就加final修饰。</strong>原因是，当我们使用final修饰变量后，堆内存直接存储的<strong>是值</strong>，而<strong>不是变量名</strong>。</p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p><strong>static是不能用来修饰类的</strong>,但是成员内部类可以看做外部类中的一个成员,所以可以用static修饰,这种<strong>用static修饰的内部类我们称作静态内部类</strong>,也称作嵌套内部类。</p><p>​    静态内部类不能使用外部类的非static成员变量和成员方法。</p><blockquote><p>非静态内部类编译后会默认的保存一个指向外部类的引用，而静态类却没有。即使没有外部类对象，也可以创建静态内部类对象，而外部类的非static成员必须依赖于对象的调用，静态成员则可以直接使用类调用，不必依赖于外部类的对象，所以静态内部类只能访问静态的外部属性和方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outter</span> </span>&#123;<br>      <span class="hljs-keyword">int</span> age = <span class="hljs-number">10</span>;<br>      <span class="hljs-keyword">static</span> age2 = <span class="hljs-number">20</span>;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Outter</span><span class="hljs-params">()</span> </span>&#123;        <br>      &#125;<br>       <br>      <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> </span>&#123;<br>          <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> </span>&#123;<br>              System.out.println(age);<span class="hljs-comment">//错误</span><br>              System.out.println(age2);<span class="hljs-comment">//正确</span><br>          &#125;<br>      &#125;<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span>  </span>&#123;<br>          Outter.Inner inner = <span class="hljs-keyword">new</span> Outter.Inner();<br>          inner.method();<br>      &#125;<br>  &#125;<br><br></code></pre></td></tr></table></figure><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>一个没有名字的类，是内部类的简化写法。</p><p>匿名内部类的本质其实是继承该类或者实现接口的子类匿名对象。此外，在开发的时候，会看到抽象类，或者接口作为参数。而这个时候，实际需要的是一个子类对象。如果该方法仅仅调用一次，我们就可以使用匿名内部类的格式简化。</p><blockquote><p>匿名内部类没有构造方法。也是唯一没有构造方法的内部类。<strong>匿名内部类和局部内部类一样只能访问外部类的final变量。</strong></p></blockquote><h2 id="继承-Inherit"><a href="#继承-Inherit" class="headerlink" title="继承(Inherit)"></a>继承(Inherit)</h2><p>继承实际上也是为了<strong>提高代码的复用性和可扩展性</strong>，在定义不同类的时候存在一些相同属性，为了方便使用可以将这些共同属性抽象成一个父类，在定义其他子类时可以继承自该父类，减少代码的重复定义，子类可以使用父类中<strong>非私有</strong>的成员。</p><blockquote><p>java中的继承是<strong>单继承</strong>，即<strong>一个类只有一个父类。</strong></p></blockquote><h3 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h3><p>方法重载：在同一个类中处理不同数据的多个相同方法名的多态手段。</p><p>方法重写：相对继承而言，子类中对父类已经存在的方法进行区别化的修改。</p><blockquote><p>重写需要保证方法的返回值类型、方法名、参数类型及个数都要与父类继承的方法相同</p></blockquote><h3 id="继承的初始化顺序"><a href="#继承的初始化顺序" class="headerlink" title="继承的初始化顺序"></a>继承的初始化顺序</h3><p>　1、初始化父类再初始化子类</p><p>　2、先执行初始化对象中的属性，再执行构造方法中的初始化。</p><p>　基于上面两点，可以知道实例化一个子类，java程序的执行顺序是：</p><p>　<strong>父类对象属性初始化 → 父类对象构造方法 → 子类对象属性初始化 → 子类对象构造方法</strong>　　　</p><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>使用final关键字做标识有“最终的”含义。</p><table><thead><tr><th>final修饰对象</th><th align="left">作用</th></tr></thead><tbody><tr><td>类</td><td align="left">该类不允许被继承</td></tr><tr><td>方法</td><td align="left">该方法不允许被覆盖(重写)。</td></tr><tr><td>属性</td><td align="left">该类的该属性不会进行隐式的初始化，即 该final 属性的初始化属性必须有值，或在构造方法中赋值(但只能选其一，且必须选其一，因为没有默认值！)，且初始化之后就不能改了，只能赋值一次。</td></tr><tr><td>变量</td><td align="left">该变量的值只能赋一次值，在声明变量的时候才能赋值，即变为常量。</td></tr></tbody></table><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p>siper可以理解为是指向自己父（超）类对象的一个指针，而这个父类指的是离自己最近的一个父类。</p><p>super用来访问父类内容，当子类中的成员变量或方法与父类中同名时可用super用于区分。</p><p>super关键字在子类里调用父类的构造方法，则必须在子类的构造方法中的<strong>第一行</strong>。<strong>如果子类构造方法中既没有显示调用父类的构造方法，而父类没有无参的构造方法，则编译出错。</strong>（如果没有显示声明父类的无参的构造方法，系统会自动默认生成一个无参构造方法，但是，如果声明了一个有参的构造方法，而没有声明无参的构造方法，这时系统不会动默认生成一个无参构造方法，此时称为父类没有无参的构造方法。）</p><blockquote><p>子类的构造的过程当中必须调用父类的构造方法。其实这个过程已经隐式地使用了super关键字。</p></blockquote><h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><p>Object类是所有类的父类，如果一个类没有使用extends关键字明确标识继承另一个类，那么这个类默认继承Object类。</p><p><strong>Object类中的方法，适合所有子类。</strong></p><ol><li><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><p>在Object类里面定义toString()方法的时候返回的对象的哈希code码(对象地址字符串)。</p><p>toString()在碰到“println”之类的输出方法时会自动调用，不用显式打出来。</p><p><strong>undefined和null没有toString()方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">undefined.toString();<span class="hljs-comment">//错误</span><br><span class="hljs-keyword">null</span>.toString();<span class="hljs-comment">//错误</span><br></code></pre></td></tr></table></figure><p><strong>布尔型数据true和false返回对应的’true’和’false’</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">true</span>.toString();<span class="hljs-comment">//&#x27;true&#x27;</span><br><span class="hljs-keyword">false</span>.toString();<span class="hljs-comment">//&#x27;false&#x27;</span><br>Boolean.toString();<span class="hljs-comment">//&quot;function Boolean() &#123; [native code] &#125;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>字符串类型原值返回</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&#x27;1&#x27;</span>.toString();<span class="hljs-comment">//&#x27;1&#x27;</span><br><span class="hljs-string">&#x27;&#x27;</span>.toString();<span class="hljs-comment">//&#x27;&#x27;</span><br><span class="hljs-string">&#x27;abc&#x27;</span>.toString();<span class="hljs-comment">//&#x27;abc&#x27;</span><br>String.toString();<span class="hljs-comment">//&quot;function String() &#123; [native code] &#125;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>数值类型的情况较复杂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Number.toString();<span class="hljs-comment">//&quot;function Number() &#123; [native code] &#125;&quot;</span><br></code></pre></td></tr></table></figure><p>　　1、正浮点数及NaN、Infinity加引号返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.23</span>.toString();<span class="hljs-comment">//&#x27;1.23&#x27;</span><br>NaN.toString();<span class="hljs-comment">//&#x27;NaN&#x27;</span><br>Infinity.toString();<span class="hljs-comment">//&#x27;Infinity&#x27;</span><br></code></pre></td></tr></table></figure><p>　　2、负浮点数或加’+’号的正浮点数直接跟上.toString()，相当于先运行toString()方法，再添加正负号，转换为数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">+<span class="hljs-number">1.23</span>.toString();<span class="hljs-comment">//1.23</span><br>typeof +<span class="hljs-number">1.23</span>.toString();<span class="hljs-comment">//&#x27;number&#x27;</span><br>-<span class="hljs-number">1.23</span>.toString();<span class="hljs-comment">//-1.23</span><br>typeof -<span class="hljs-number">1.23</span>.toString();<span class="hljs-comment">//&#x27;number&#x27;</span><br></code></pre></td></tr></table></figure><p>　　3、整数直接跟上.toString()形式，会报错，提示无效标记，因为整数后的点会被识别为小数点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0.</span>toString();<span class="hljs-comment">//Uncaught SyntaxError: Invalid or unexpected token</span><br></code></pre></td></tr></table></figure><p>　　因此，为了避免以上无效及报错的情况，数字在使用toString()方法时，加括号可解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">(<span class="hljs-number">0</span>).toString();<span class="hljs-comment">//&#x27;0&#x27;</span><br>(-<span class="hljs-number">0</span>).toString();<span class="hljs-comment">//&#x27;0&#x27;</span><br>(+<span class="hljs-number">1.2</span>).toString();<span class="hljs-comment">//&#x27;1.2&#x27;</span><br>(-<span class="hljs-number">1.2</span>).toString();<span class="hljs-comment">//&#x27;-1.2&#x27;</span><br>(NaN).toString();<span class="hljs-comment">//&#x27;NaN&#x27;</span><br></code></pre></td></tr></table></figure><p>　　此外，数字类型的toString()方法可以接收表示转换基数(radix)的可选参数，如果不指定此参数，转换规则将是基于十进制。同样，也可以将数字转换为其他进制数(范围在2-36)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">var</span> n = <span class="hljs-number">17</span>;<br>n.toString();<span class="hljs-comment">//&#x27;17&#x27;</span><br>n.toString(<span class="hljs-number">2</span>);<span class="hljs-comment">//&#x27;10001&#x27;</span><br>n.toString(<span class="hljs-number">8</span>);<span class="hljs-comment">//&#x27;21&#x27;</span><br>n.toString(<span class="hljs-number">10</span>);<span class="hljs-comment">//&#x27;17&#x27;</span><br>n.toString(<span class="hljs-number">12</span>);<span class="hljs-comment">//&#x27;15&#x27;</span><br>n.toString(<span class="hljs-number">16</span>);<span class="hljs-comment">//&#x27;11&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>对象Object类型及自定义对象类型加括号返回[object Object]</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;&#125;.toString();<span class="hljs-comment">//报错，Unexpected token .</span><br>(&#123;&#125;).toString();<span class="hljs-comment">//[object Object]</span><br>(&#123;a:<span class="hljs-number">123</span>&#125;).toString();<span class="hljs-comment">//[object Object]</span><br>Object.toString();<span class="hljs-comment">//&quot;function Object() &#123; [native code] &#125;&quot;</span><br><span class="hljs-function">function <span class="hljs-title">Person</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">this</span>.name = <span class="hljs-string">&#x27;test&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person();<br>person1.toString();<span class="hljs-comment">//&quot;[object Object]&quot;</span><br></code></pre></td></tr></table></figure><h4 id="String-StringBuffer和StringBuilder"><a href="#String-StringBuffer和StringBuilder" class="headerlink" title="String ,StringBuffer和StringBuilder"></a>String ,StringBuffer和StringBuilder</h4><table><thead><tr><th></th><th>String</th><th>StringBuffer</th><th>StringBuilder</th></tr></thead><tbody><tr><td>版本</td><td>JDK1.0</td><td>JDK1.0</td><td>JDK1.5</td></tr><tr><td>是否可变</td><td>不可变</td><td>可变</td><td>可变</td></tr><tr><td>线程安全</td><td>线程安全</td><td>线程安全</td><td>线程不安全</td></tr><tr><td>运行速度</td><td>最慢</td><td>快</td><td>最快</td></tr><tr><td>占用内存</td><td>最多</td><td>少</td><td>最少</td></tr></tbody></table><blockquote><p>若希望将StringBuffer在屏幕上显示出来, 则必须首先<strong>调用toString方法把它变成字符串常量</strong>，<strong>因为PrintStream的方法println()不接受StringBuffer类型的参数</strong>。</p></blockquote></li><li><h4 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h4></li></ol><p>返回值是布尔类型，默认的情况下，比较的是对象的<strong>引用</strong>是否指向同一块内存地址（对象实例化时，即给对象分配内存空间，该内存空间的地址就是内存地址）。</p><ul><li><h4 id="equals-与"><a href="#equals-与" class="headerlink" title="equals() 与 =="></a>equals() 与 ==</h4><p><strong>Java 语言里的 equals方法其实是交给开发者去覆写的，让开发者自己去定义满足什么条件的两个Object是equal的。</strong></p><p>Java中默认的 equals方法实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span> == obj);<br>&#125;<br></code></pre></td></tr></table></figure><p>因此默认的equals()与==没有区别。</p><p><strong>String类则覆写了equals()方法,直观的讲就是比较字符是不是都相同，会先比较引用地址，若不同再比较内容。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object anObject)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == anObject) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123;<br>        String anotherString = (String)anObject;<br>        <span class="hljs-keyword">int</span> n = count;<br>        <span class="hljs-keyword">if</span> (n == anotherString.count) &#123;<br>            <span class="hljs-keyword">char</span> v1[] = value;<br>            <span class="hljs-keyword">char</span> v2[] = anotherString.value;<br>            <span class="hljs-keyword">int</span> i = offset;<br>            <span class="hljs-keyword">int</span> j = anotherString.offset;<br>            <span class="hljs-keyword">while</span> (n-- != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (v1[i++] != v2[j++])<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此，不能单纯的<strong>说equals到底比较的是什么。对于一个类的equals方法是什么意思就是要去看该类对此方法的定义</strong>。</p></li><li><h4 id="equals-的重写"><a href="#equals-的重写" class="headerlink" title="equals() 的重写"></a>equals() 的重写</h4><p>很多时候我们使用 equals() 需要比较的是<strong>对象的值，而不是地址</strong>，如果两个对象内存地址相同，那两个对象也一定相同。所以 equals() 重写的 equals() 方法中首先判断的还是<strong>地址</strong>(如 String 类)，如果地址不同才会去判断<strong>值是否相等</strong>。</p><p><strong>重写 equals() 必须重写 hashCode()</strong></p><p>hashCode 方法返回该对象的哈希码值。Object 类中定义的 hashCode 方法为不同的对象返回不同的整形值（通常情况下实现的方式是将对象的内部地址转换为整形值）。</p><blockquote><p>在 OpenJDK 中找到 <a href="https://link.juejin.cn/?target=http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/3462d04401ba/src/share/native/java/lang/Object.c">Object.c</a> 文件，可以看到hashCode 方法指向 <code>JVM_IHashCode</code> 方法来处理。hashCode() 产生于 <a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/runtime/synchronizer.cpp">ObjectSynchronizer::FastHashCode</a>，它具体的实现在 <a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/runtime/synchronizer.cpp">synchronizer.cpp</a> 中的 <code>get_next_hash</code>。从<code>get_next_hash</code>的方法中我们可以看到，如果从0开始算的话，这里提供了<strong>6种计算 hash 值的方案，有自增序列，随机数，关联内存地址等</strong>多种方式，其中<strong>官方默认的是最后一种，即随机数生成</strong>。可以看出 <strong>hashCode 也许和内存地址有关系，但不是直接代表内存地址的，具体需要看虚拟机版本和设置</strong>。</p><p>因此，<strong>hashCode() 返回的并不是实际的内存地址，而是与内存地址相关联的计算结果值。</strong>如果是实际内存地址的话，JVM 中的频繁 GC 和内存移动将会导致对象 hashCode 的改变。</p></blockquote><p>重写 equals() 必须重写 hashCode()，是因为如果不这样做的话，就会<strong>违反 hashCode 的通用约定</strong>，从而<strong>导致该类无法结合所有基于散列的集合一起正常工作</strong>，这类集合包括 HashMap 和 HashSet。</p><p>这里的<strong>通用约定</strong>，从 Object 类的 hashCode 方法的注释可以了解，主要包括以下几个方面，</p><ul><li>在应用程序的执行期间，只要对象的 equals 方法的比较操作所用到的信息没有被修改，那么对同一个对象的多次调用，hashCode 方法都必须始终返回同一个值。</li><li>如果两个对象根据 equals 方法比较是相等的，那么调用这两个对象中的 hashCode 方法都必须产生同样的整数结果。</li><li>如果两个对象根据 equals 方法比较是不相等的，那么调用者两个对象中的 hashCode 方法，则不一定要求 hashCode 方法必须产生不同的结果。但是给不相等的对象产生不同的整数散列值，是有可能提高散列表（hash table）的性能。</li></ul><p>从理论上来说如果重写了 equals 方法而没有重写 hashCode 方法则违背了上述约定的第二条，<strong>相等的对象必须拥有相等的散列值</strong>。</p><blockquote><p>虽然 hashCode 方法被重写了，但是如果我们想要获取原始的 Object 类中的哈希码，我们可以通过 <code>System.identityHashCode(Object a)</code>来获取，该方法返回默认的 Object 的 hashCode 方法值，即使对象的 hashCode 方法被重写了也不影响。</p></blockquote><blockquote><p>参考：<a href="https://juejin.cn/post/6844903910839156743">对Java中HashCode方法的深入思考</a></p></blockquote><blockquote><p>重写equals方法的要求：</p><p>1、自反性：对于任何非空引用x，x.equals(x)应该返回true。</p><p>2、对称性：对于任何引用x和y，如果x.equals(y)返回true，那么y.equals(x)也应该返回true。</p><p>3、传递性：对于任何引用x、y和z，如果x.equals(y)返回true，y.equals(z)返回true，那么x.equals(z)也应该返回true。</p><p>4、一致性：如果x和y引用的对象没有发生变化，那么反复调用x.equals(y)应该返回同样的结果。</p><p>5、非空性：对于任意非空引用x，x.equals(null)应该返回false。</p></blockquote></li></ul><h2 id="多态-Polymorphism"><a href="#多态-Polymorphism" class="headerlink" title="多态(Polymorphism)"></a><strong>多态(Polymorphism)</strong></h2><p>多态就是<strong>相同的行为，不同的实现</strong>。多态是方法的多态，不是属性的多态（多态与属性无关）。</p><p>多态的存在要有3个必要条件：<strong>继承，方法重写，父类引用指向子类对象</strong>。</p><blockquote><p>如果我们在子类中编写一个独有的方法（没有继承父类的方法），此时就不能通过父类的引用创建的子类对象来调用该方法</p></blockquote><h3 id="静态多态与动态多态"><a href="#静态多态与动态多态" class="headerlink" title="静态多态与动态多态"></a>静态多态与动态多态</h3><p>动静之分主要是表现在程序是在运行期还是编译期，通过被绑定的对象类型来决定到底执行的是哪个方法。<br><strong>静态多态是在编译期就确定了对象以及对象行为的绑定关系</strong>，所以运行起来以后就固定为编译期确定的效果；<br>而<strong>动态多态是在编译期未知绑定关系，运行进行以后才进行绑定</strong>，所以具有更大的灵活性；很明显，动态多态具有更大的灵活性和可扩展性。</p><h4 id="静态多态"><a href="#静态多态" class="headerlink" title="静态多态"></a>静态多态</h4><p>静态多态是在编译期间就可以确定要执行的是何种类型的对象以及该对象的何种行为，运行期不会有改变的情况。所以 <strong>方法重载</strong> 或 <strong>单独使用方法重写</strong> 都是它的具体表现形式。</p><blockquote><p>方法重载：<br>在一个类当中，具有多个同名方法，参数列表不同（包括：参数个数、参数类型、参数顺序的不同），从而各有各的实现。</p><p>方法重写：<br>在继承关系中，不同的子类都拥有继承于父类的某个共有方法，但是各有各的实现。</p></blockquote><h4 id="动态多态"><a href="#动态多态" class="headerlink" title="动态多态"></a>动态多态</h4><p><strong>父类的引用指向子类的对象</strong>。当绑定一个父类引用的时候，它既有可能指向父类的对象，也有可能是指向该父类的某个子类的对象。它是可变的，具体指向谁不是由编码期的声明决定的，而是可以通过在运行时传入不同的对象，从而形成所谓的<strong>“动态绑定”</strong>。</p><p>当父类引用指向子类对象以后，在使用这个引用调用方法的时候会发生什么呢？其实无非就三种情况</p><ol><li><p>使用父类引用调用父类定义的方法；</p><blockquote><p>其本质就是本类的引用调用本类的方法，所以也就没有任何编译或运行的问题；</p></blockquote></li><li><p>使用父类引用调用子类定义的方法；</p><blockquote><p>在调用的时候会发现根本调用不到，编译就会马上报错。其道理也很简单：虽然对象是子类对象，其中当然包含有子类自己定义的内容，但是由于我们的引用是父类类型（即我们是站在父类的层面去看待它），当然就看不到这些子类定义的内容了。如果想访问，那么必须进行“向下转型”。</p></blockquote></li><li><p>使用父类引用调用父类定义，但被子类重写了的方法。</p><blockquote><p>由于这个方法是重写方法，首先说明它的定义就是在父类当中，所以利用父类的引用当然可以看到有这个方法，保证能够使用引用调用得到；其次该方法被子类对象重写了，而且不同的子类可以各有各的实现，那么具体的运行效果，就要依赖于这个父类引用运行起来以后，到底是指向哪种子类的对象了（指向谁，就执行谁的重写后效果）。</p></blockquote></li></ol><h3 id="引用类型转换"><a href="#引用类型转换" class="headerlink" title="引用类型转换"></a><strong>引用类型转换</strong></h3><h4 id="向上类型转换-隐式-自动类型转换"><a href="#向上类型转换-隐式-自动类型转换" class="headerlink" title="向上类型转换(隐式/自动类型转换)"></a>向上类型转换(隐式/自动类型转换)</h4><p>将子类对象赋给父类引用，称为向上转型（upcasting），自动进行类型转换。向上转型可以调用的子类继承的方法，但不能调用子类特有的方法。需要特别理解的是如果子类重写了父类的方法，向上转型后通过父类引用调用的却是真实子类重写的方法。</p><h4 id="向下类型转换-强制类型转换"><a href="#向下类型转换-强制类型转换" class="headerlink" title="向下类型转换(强制类型转换)"></a>向下类型转换(强制类型转换)</h4><p>将父类的引用变量转换为子类类型，称为向下转型（downcasting）。向下转型后就可以调用子类特有的方法了。</p><ul><li>需要进行强制转换;</li><li>强制转换不是做手术，必须转换成真实子类型，否则ClassCastException；</li><li>向下转型之前肯定发生了向上转型；</li><li>为了避免ClassCastException,向下转型之前使用instanceof先判断一下</li></ul><h4 id="instanceof运算符"><a href="#instanceof运算符" class="headerlink" title="instanceof运算符"></a>instanceof运算符</h4><p><strong>instanceof</strong>是Java的一个二元操作符，和==，&gt;，&lt;属于同一类。由于它是由字母组成的，所以也是Java的保留关键字。<strong>它的作用是测试它左边的对象是否是它右边的类的实例</strong>，返回boolean类型的数据。</p><p>在写程序的时候，如果要进行类型转换，我们最好使用instanceof运算符来判断它左边的对象是否是它右边的类的实例，再进行强制转换。</p><blockquote><p>使用instancof的前提：左边的对象和右边的类型在继承树上有上下级关系</p></blockquote><blockquote><p>在比较一个对象是否和另一个对象属于同一个类实例的时候，我们通常可以采用instanceof和getClass两种方法通过两者是否相等来判断，但是两者在判断上面是有差别的。Instanceof进行类型检查规则是:<strong>你属于该类吗？或者你属于该类的派生类吗？</strong>而通过getClass获得类型信息<strong>采用==来进行检查是否相等</strong>的操作是<strong>严格的判断</strong>,<strong>不会存在继承方面的考虑</strong>；</p></blockquote><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类前使用abstract关键字修饰，则该类为抽象类。</p><p>抽象类是约束子类必须有什么方法，而并不关注子类如何实现这些方法。抽象类定义抽象方法，只有声明，不需要实现。抽象方法没有方法体以分号结束，抽象方法必须用abstract关键字来修饰。包含抽象方法的类是抽象类。抽象类中可以包含普通的方法，也可以没有抽象方法。抽象类不能直接创建，可以定义引用变量来指向子类对象，来实现抽象方法。</p><p>抽象类应用场景：</p><ol><li>在某些情况下，某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法(可实现动态多态)。</li><li>从多个具有相同特征的类中抽象出一个抽象类，以这个抽象类作为子类的模板，从而避免子类设计的随意性。</li></ol><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口可以理解为一种特殊的类，由<strong>全局常量</strong>和公共的<strong>抽象方法</strong>所组成。也可理解为一个特殊的抽象类，因为它含有抽象方法。</p><p>如果说类是一种具体实现体，而接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部数据，也不关心这些类里方法的实现细节，它只规定这些类里必须提供的某些方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] [<span class="hljs-keyword">abstract</span>] <span class="hljs-class"><span class="hljs-keyword">interface</span> 接口名 [<span class="hljs-keyword">extends</span>父接口1,2....]（多继承）</span>&#123;<br><span class="hljs-number">0</span>…n常量 (<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span>)<br><span class="hljs-number">0</span>…n 抽象方法(<span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span>)                                     　&#125;       <br><span class="hljs-comment">//其中[ ]里的内容表示可选项，可以写也可以不写;</span><br><span class="hljs-comment">//接口中的属性都是常量，即使定义时不添加public static final 修饰符，系统也会自动加上；</span><br><span class="hljs-comment">//接口中的方法都是抽象方法，即使定义时不添加public abstract修饰符，系统也会自动加上。</span><br></code></pre></td></tr></table></figure><p>接口的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] <span class="hljs-class"><span class="hljs-keyword">class</span> 类名 <span class="hljs-keyword">extends</span> 父类 <span class="hljs-keyword">implements</span> 接口1，接口2...</span>&#123;<br>类体部分<br><span class="hljs-comment">//如果继承了抽象类，需要实现继承的抽象方法；</span><br><span class="hljs-comment">//要实现接口中的抽象方法</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果要继承父类，继承父类必须在实现接口之前,即extends关键字必须在implements关键字前</p><p>通常我们在命名一个接口时，经常以I开头，用来区分普通的类。如：IPlayGame</p></blockquote><p>接口和匿名内部类配合使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//写法一</span><br>Interface i =<span class="hljs-keyword">new</span> <span class="hljs-class"><span class="hljs-keyword">interface</span>()</span>&#123;<br>    Public <span class="hljs-keyword">void</span> method&#123;<br>        System.out.println(<span class="hljs-string">&quot;利用匿名内部类实现接口1&quot;</span>);<br>&#125;<br>&#125;;<br>i.method();<br><br><span class="hljs-comment">//写法二</span><br>Interface i =<span class="hljs-keyword">new</span> <span class="hljs-class"><span class="hljs-keyword">interface</span>()</span>&#123;<br>Public <span class="hljs-keyword">void</span> method&#123;<br>        System.out.println(<span class="hljs-string">&quot;利用匿名内部类实现接口1&quot;</span>);<br>    &#125;<br>&#125;.method();<br></code></pre></td></tr></table></figure><h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3><h4 id="语法层面上的区别"><a href="#语法层面上的区别" class="headerlink" title="语法层面上的区别"></a>语法层面上的区别</h4><ul><li><p>抽象类可以提供成员方法的实现细节，而接口中只能存在public abstract 方法；</p></li><li><p>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的；</p></li><li><p>抽象类可以有静态代码块和静态方法，而接口中不能含有静态代码块以及静态方法；</p></li><li><p>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</p></li></ul><h4 id="设计层面上的区别"><a href="#设计层面上的区别" class="headerlink" title="设计层面上的区别"></a>设计层面上的区别</h4><ul><li><p>抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象。抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（行为）进行抽象。</p><p>继承是一个 “是不是”的关系，而 接口 实现则是 “有没有”的关系。如果一个类继承了某个抽象类，则子类必定是抽象类的种类，而接口实现则是有没有、具备不具备的关系，具备则实现。</p><blockquote><p>举个简单的例子，飞机和鸟是不同类的事物，但是它们都有一个共性，就是都会飞。那么在设计的时候，可以将飞机设计为一个类Airplane，将鸟设计为一个类Bird，但是不能将 <code>飞行</code> 这个特性也设计为类，因此它只是一个行为特性，并不是对一类事物的抽象描述。此时可以将 <code>飞行</code> 设计为一个接口Fly，包含方法fly( )，然后Airplane和Bird分别根据自己的需要实现Fly这个接口。然后至于有不同种类的飞机，比如战斗机、民用飞机等直接继承Airplane即可，对于鸟也是类似的，不同种类的鸟直接继承Bird类即可。</p></blockquote></li><li><p>抽象类作为很多子类的父类，它是一种模板式设计。而接口是一种行为规范，它是一种辐射式设计。</p><p>对于抽象类，如果需要添加新的方法，可以直接在抽象类中添加具体的实现，子类可以不进行变更；而对于接口则不行，如果接口进行了变更，则所有实现这个接口的类都必须进行相应的改动。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>面向对象</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>资源</title>
    <link href="/2021/07/22/%E8%B5%84%E6%BA%90/"/>
    <url>/2021/07/22/%E8%B5%84%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fdb96a6c69bb1dce0a6fa4d2eca54a98be11bea47b1f7eb41ba1a887e642c699">0bde80ec89a8a2078c2b9386bd006abcbfd33348aa9c8c542d644501428ae760d0f22a296d8109536da1b3a0ec01131c0d60a6067533a5c2b6f15eb3075261540ddc9b0e3bb59dd8cdd5230aab3588f466114edc4ac1f0ad85f952b3e3dfa4a159ba0f7f4f3881d98f5677d5574118a6b38c9eaa9b777d64de8261134563739fca189221012cfa1e00d09d34f4567dd522952bf359c25b6c7bd531c8fbf5ec59c20a69fdda30f8ce7a20eb982bb9487c2788d855eb6c1acb737387864bb4f5de34920796b58698f8d4986cf31f4e2b6f41437503ab2e0d52a8bb50e4ca8d969d451c40b42ec3f3b1d594a94133b563250adc7e6320287aeb8c58ad77a8068ac38ace321f016539483d38de1269074bbd2b51c0ca1cd499b1be2403d21330d445708f45953f45611352363d27e0c70c504a35bd18ed90a99146d7d7a387babfb35384ce8fbf15ed949089bfb2e995b85e962a5655b743bc766ad3bf990e428eb1a79dd1fcc3d7626592f8719b3e81ae257d8dab243270b1fce1b11f1539fc80a0e30f4e99a91605a6b35ba5bdde4942c68c9f947546135ceabc0a0559dcd2fd22aade7855c20c261cdc3af0aa6908d83366616fb86ecd4ae6a1d0adb72e741e6793360bb13fe147520a9d679294dc2597c1177c8d749e8161ec026e0d45686afafa3f5e8c05f8c2c22104d35a7d3c11130faee86207f87b1175daf5204d0af2e6d2ace44611b5c223ead542a525388c6d6260d450f6663d7f7950dbfbc17591b8646a21c2a5afc9a094aec5fccc9f5f25bc563c5f900d966ff0ab88eac75ed967bee9d2bb359b79db464911ca24b2deea2baffbd40a4e9cd00c8beeed6797e0f38ee54d070d44be0ce1e1416451b89b615ed2c51e346da52711fef19abd1706fe731b0d7bb0360ddeddb991bf376e765347e5975f07e5d1d6c2f688889eee379c09bd4b26be8e466b4074cf356383766ad27b5cac6863767948a135e675b29336333bb2137e63938ac0a58e0ec46c55deeb669502e11d8d71a307a02ae205bb8689bb2c9ec6bf0de89c4b4da2cb9c855979d28253c39f9b8948e44a9a3778bf7d0e0954ff7ba4d9df224088b8bab47fc10ef657668a3ee2f2fcb9c4e419b2b036733f532bdc0e76cd61cbd456be9aa4d9f0679d44c7a25f138b880bbd2f72b281d455c16baa6cf9fc31a5178bf566f14bd24a7a0cb3f49bd3d2336dc0612a057515bf5e0587022fec075e33d206da38ebf70d2a45ca49b64daec8bd250d13ecffae8a2db41e320e2fcecaf50e7fdeaa00b6f7d63b81371302b6a001257a3a14e2afc3dfd266b3ba937e192a23ebe4c3683cd0bcbeaf728b67d73fee9d537f2c913521a42662064bf0d3b9ef9f21114612a48eb7a902ae9b54a475af7607e0008054533e823699b2a23c259709e322c91c42d38af0250f6db0243c982cec5f690d7a8688d96095e7eced45729e1baaf71859ecc020d7cdf1eb2555e9f7b85f819fcff0ebeaa08296953f9c04a5cd4ae86bb20721702abe46889665b5808a110416cfcbde33f9ab867ce29a981396a8e0e98d9006adae6c86e3cab31353126592932026e6c64759116a009a9f68a4aadd326f69a6db8f06a7b479e80c837c620ffc04846aac8ec1eb011f5aebc086fd5702a295bee206fdad8d20438842715944e6f02e2255ec861918adfea255a8ccb2ff46725ff6d40a05710a8bfe3da90376d284663f95b3108f245741c1d93288435d294cf5bad87822409edc25106a5de45da925143c2c4ad01846abef5a490ea03fd64e9a879cd0245566402068e9787d3937b2fe4ae3ec454f488b56800300056cb3ac90f6d3d41244436ada00d2ecc8aef3f64f9c270c3cce856b5e3cc96985ba5364d8cbca47a0f0e3ac7c442fce1f68b25697192ba5aa4ec592e21f7bc4103eb28289652e8b8eb106c6ca5d13c2f3ca5671aad62aa08eadc25bb492ff70e6b00e0848ce1a215b5a00a627a92cb479bc23d95d89690dd6f845782a13796ae1d04ccb6c0796b84815dbb0091fee64f9556fbf91c26ec17aad38c61279c1b5e8c186073c15f45b3a837d2f81d5a88746b30f7b0d1e265759a4594479a8c51fdcaa544772f3d0e22fba5cd3acb6561b28afb72778e4d18d3ea5f4f5ff7379e856aab7a54c6661ac030ee1b1bec12176b39f1ff2c4b09e150b51ae1f27bd130b0a5d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Website</category>
      
    </categories>
    
    
    <tags>
      
      <tag>source</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo主题</title>
    <link href="/2021/07/22/Hexo%E4%B8%BB%E9%A2%98/"/>
    <url>/2021/07/22/Hexo%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>hexo本身自带一套主题<code>landscape</code>，但是原主题过于简洁，通常在<a href="https://hexo.io/themes/">官方地址</a>选取其他主题替换。</p><h2 id="Next"><a href="#Next" class="headerlink" title="Next"></a><a href="https://theme-next.js.org/">Next</a></h2><p>个人使用的第一个主题，主题风格极度简洁，但是稳定性与功能性几乎是所有主题中最好的。主题适配多种插件，比较适合喜欢界面简洁但功能丰富的人群。</p><h2 id="Fluid"><a href="#Fluid" class="headerlink" title="Fluid"></a><a href="https://hexo.fluid-dev.com/docs/">Fluid</a></h2><p>目前使用的主题，主要我个人比较喜欢这款主题的布局与风格。在功能性方面，这款主题同样比较丰富，具体内容官方文档中均有详细描述。此外，主题配套的文档可谓十分详实，对于配置中可能会遇到的问题都有详细的说明。</p><hr><p>以上是我实际使用过的主题，下面两个主要是界面符合我个人审美，但并未实际使用，故仅给出链接。</p><h2 id="Ocean"><a href="#Ocean" class="headerlink" title="Ocean "></a><a href="https://zhwangart.com/2018/11/30/Ocean/">Ocean </a></h2><h2 id="Claudia"><a href="#Claudia" class="headerlink" title="Claudia"></a><a href="https://haojen.github.io/Claudia-theme-blog/">Claudia</a></h2>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>theme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo插件</title>
    <link href="/2020/10/06/Hexo%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/"/>
    <url>/2020/10/06/Hexo%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo评论插件"><a href="#Hexo评论插件" class="headerlink" title="Hexo评论插件"></a>Hexo评论插件</h1><p>大致对比了网上已有的评论插件，在考虑简便性以及成本的基础上，我个人选择使用gitalk用于博客搭建。Gitalk 是一个基于 Github Issue 和 Preact 开发的评论插件。</p><p>这里放一个Next主题下的评论系统的<a href="https://theme-next.js.org/docs/third-party-services/comments.html">官方链接</a>，感兴趣可以自行参考。</p><h2 id="构建方式"><a href="#构建方式" class="headerlink" title="构建方式"></a>构建方式</h2><ol><li><p>首先<a href="https://github.com/settings/applications/new">申请</a>一个新的OAuth Application，注册成功后会得到一个<code>Client ID</code>和<code>Client Secret</code>，这两项会在后续配置中用到，需要记一下。<img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210722214805.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210722214825.png" alt="img"></p></li><li><p>建立评论仓库</p><p>建立由于存放评论的内容，设置中打开issues，默认应该是打开的</p><span id="more"></span></li><li><p>添加代码</p><p>通常情况下只要将对应的代码嵌入页面之中即可使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/gitalk@latest/dist/gitalk.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gitalk-container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>     <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> gitalk = <span class="hljs-keyword">new</span> Gitalk(&#123;</span><br><span class="javascript">    <span class="hljs-comment">// gitalk的主要参数</span></span><br><span class="javascript">      <span class="hljs-attr">clientID</span>: <span class="hljs-string">&#x27;&#x27;</span>,   <span class="hljs-comment">//上面获取到的值</span></span><br><span class="javascript">      <span class="hljs-attr">clientSecret</span>: <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-comment">//上面获取到的值</span></span><br><span class="javascript">      <span class="hljs-attr">repo</span>: <span class="hljs-string">&#x27;&#x27;</span>,  <span class="hljs-comment">//你刚才建立仓库的名字</span></span><br><span class="javascript">      <span class="hljs-attr">owner</span>: <span class="hljs-string">&#x27;&#x27;</span>,   <span class="hljs-comment">//你的GitHub用户名字</span></span><br><span class="javascript">      <span class="hljs-attr">admin</span>:<span class="hljs-string">&#x27;&#x27;</span>,  <span class="hljs-comment">//你的GitHub用户的名字</span></span><br><span class="javascript">      <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">//id不能重复</span></span><br><span class="javascript">        &#125;);</span><br><span class="javascript">      gitalk.render(<span class="hljs-string">&#x27;gitalk-container&#x27;</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure></li><li><p>Next主题配置</p><p>我个人使用的是Next主题，Next有对应的集成插件，修改主题_config.yml配置即可。Next以往版本内部为gitment参数，8.0版本修改为gitalk参数。<img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210722214630.png" alt="image-20201006092628245"></p><p>但配置项基本一致，重点是之前申请所得的两个参数。</p><p>此外还需要引入对应的js与css否则不会显示评论模块。<img src="https://cdn.jsdelivr.net/gh/hejianjie/ImgForMD/blogimgs/a20210722214654.png" alt="img"></p><p>加载完成后需要注册Github Application的账号登录评论模块，进行手动初始化评论才能让其他用户进行评论</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>plugin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用笔记</title>
    <link href="/2020/09/28/Hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/09/28/Hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        通过网上教程以Hexo与Github自建个人博客，谨以此文纪念，同时对于使用过程中出现的问题以及学到的相关知识进行记录。</p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hexo</span>: <span class="hljs-number">5</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">hexo</span>-cli: <span class="hljs-number">4</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">os</span>: Windows_NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">18362</span> win<span class="hljs-number">32</span> x<span class="hljs-number">64</span><br><span class="hljs-attribute">node</span>: <span class="hljs-number">12</span>.<span class="hljs-number">18</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">NexT</span> version <span class="hljs-number">8</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="Hexo相关知识点"><a href="#Hexo相关知识点" class="headerlink" title="Hexo相关知识点"></a>Hexo相关知识点</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；</p></li><li><p>hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；同时我个人使用的主题Next也有多个版本（目前使用/**<a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-theme-fluid</a>**），截止此文撰写最新的版本为 8.0.0，往期的旧版本已停止维护，很多文章的对应配置信息也与新的版本有所出入，需要自行甄别；</p></li><li><p>hexo有2种<code>_config.yml</code>文件，一个是根目录下的全局的<code>_config.yml</code>，一个是各个<code>theme</code>下的；</p></li><li><p>有的教程会让配置SSH密钥，SSH密钥可以为了防止其他人恶意部署文件到你的仓库，使用以后每次部署文件都需要登录Github账号，通过下述配置可比避免每次登录：</p><p>修改配置文件的deploy属性</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">    type:</span> git<br><span class="hljs-symbol">    repo:</span> git@github.com:xxxxx/xxxxx.github.io.git<br><span class="hljs-symbol">    branch:</span> master<br></code></pre></td></tr></table></figure><p>当然在网上也看到有人将登录信息写在环境变量里或者修改git的配置信息，此处不做详细说明。</p></li></ol><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><h4 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vala">hexo n [layout] &lt;title&gt;<br><span class="hljs-meta">#新建文章</span><br><span class="hljs-meta">#layout 可选参数，用于选取文章的布局模板，若省略则为默认post布局</span><br><span class="hljs-meta">#title 必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围</span><br></code></pre></td></tr></table></figure><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="ruby">p  <span class="hljs-comment">#自定义新文章的路径</span></span><br><span class="ruby"></span>-<span class="ruby">r <span class="hljs-comment">#如果存在同名文章，将其替换</span></span><br><span class="ruby"></span>-<span class="ruby">s <span class="hljs-comment">#文章的 Slug，作为新文章的文件名和发布后的 URL</span></span><br></code></pre></td></tr></table></figure><h5 id="Hexo新建标签、分类、归档等页面"><a href="#Hexo新建标签、分类、归档等页面" class="headerlink" title="Hexo新建标签、分类、归档等页面"></a>Hexo新建标签、分类、归档等页面</h5><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> <span class="hljs-string">&quot;tages&quot;</span> <br></code></pre></td></tr></table></figure><blockquote><p>你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> --path about/me <span class="hljs-string">&quot;About me&quot;</span><br></code></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hexo <span class="hljs-keyword">new</span> page <span class="hljs-comment">--path about/me</span><br></code></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><p>对于tags之类的页面，如需生效，须找到对应的创建页面加上type,注意<code>type：</code>后面要有一个空格。</p></blockquote><p>然后打开对应路径中的文件，例如 <code>/source/tages/index.md</code>，设置其类型 type 值为“tages”，一定注意<code>type:</code>后一定要有空格。 </p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: tags<br>date: 2020<span class="hljs-string">-09</span><span class="hljs-string">-28</span> 19:48:15<br>type: &quot;tags&quot;<br><span class="hljs-keyword">tags:</span> 标签<br></code></pre></td></tr></table></figure><p>当同时具有多个标签时，使用如下方式处理，注意便签之间仍旧需要注意空格问题。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">tags:</span> [标签1, 标签2, 标签3]<br></code></pre></td></tr></table></figure><p>最后打开 <code>/themes/主题/_config.yml</code>，把tages标签那项取消注释即可。在写文章时添加对应的tags或categories会自动归类。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">menu:</span><br><span class="hljs-symbol">  home:</span> / || fa fa-home<br><span class="hljs-symbol">  about:</span> <span class="hljs-meta-keyword">/about/</span> || fa fa-user<br><span class="hljs-symbol">  tags:</span> <span class="hljs-meta-keyword">/tags/</span> || fa fa-tags<br><span class="hljs-symbol">  categories:</span> <span class="hljs-meta-keyword">/categories/</span> || fa fa-th<br><span class="hljs-symbol">  archives:</span> <span class="hljs-meta-keyword">/archives/</span> || fa fa-archive<br>  <span class="hljs-meta"># schedule: /schedule/ || fa fa-calendar</span><br>  <span class="hljs-meta"># sitemap: /sitemap.xml || fa fa-sitemap</span><br>  <span class="hljs-meta"># commonweal: /404/ || fa fa-heartbeat</span><br></code></pre></td></tr></table></figure><h5 id="layout布局-文章模板，非网页布局"><a href="#layout布局-文章模板，非网页布局" class="headerlink" title="layout布局(文章模板，非网页布局)"></a>layout布局(文章模板，非网页布局)</h5><p>在<code>/scaffolds/</code>目录下是文章的模板，可以自己新建对应的模板，在创建文章时选择对应模板即可，图简单的话可以直接修改post.md，作为默认模板可以在创建文件时不选择模板。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: &#123;&#123; title &#125;&#125;<br>date: &#123;&#123; date &#125;&#125;<br><span class="hljs-keyword">tags:</span> <br>categories: <br></code></pre></td></tr></table></figure><h5 id="写草稿"><a href="#写草稿" class="headerlink" title="写草稿"></a>写草稿</h5><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">draft</span> [layout] &lt;filename&gt;<br></code></pre></td></tr></table></figure><p>会在source/drafts目录下生成一个new-draft.md文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到drafts目录之中。</p><p>发布草稿</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">hexo publish [layout] <span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果要强行预览草稿，可以修改配置文件或者使用对应指令</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#更改配置文件</span><br>render_drafts: <span class="hljs-literal">true</span><br><br><span class="hljs-meta">#使用指令</span><br>$ hexo server --drafts<br></code></pre></td></tr></table></figure><h5 id="让文章不显示全部内容"><a href="#让文章不显示全部内容" class="headerlink" title="让文章不显示全部内容"></a>让文章不显示全部内容</h5><p>在合适的位置加上<code>&lt;!--more--&gt;</code>即可</p><h4 id="本地生成"><a href="#本地生成" class="headerlink" title="本地生成"></a>本地生成</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo g == hexo <span class="hljs-keyword">generate</span> #生成静态文件<br>hexo s == hexo server #启动服务预览<br></code></pre></td></tr></table></figure><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">hexo <span class="hljs-attr">d</span> == hexo deploy <span class="hljs-comment">#部署</span><br>hexo d <span class="hljs-attr">-g</span> == hexo g -d <span class="hljs-comment">#指定生成后部署</span><br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> clean <span class="hljs-comment">#清除缓存，网站显示异常时可尝试此操作</span><br></code></pre></td></tr></table></figure><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> --<span class="hljs-literal">debug</span> <span class="hljs-comment">#调试模式，用于将消息详细记录到终端和debug.log文件</span><br></code></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haml">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>    -<span class="ruby">s <span class="hljs-comment">#静态模式,仅提供 public 文件夹中的文件并禁用文件监视</span></span><br><span class="ruby"></span>    -<span class="ruby">p <span class="hljs-number">5000</span> <span class="hljs-comment">#定服务器端口，默认为 4000</span></span><br><span class="ruby"></span>    -<span class="ruby">i <span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span> <span class="hljs-comment">#指定服务器 IP 地址，默认为 0.0.0.0</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
